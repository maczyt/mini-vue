!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!g[e])return;for(var n in g[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(v[n]=t[n]);0==--y&&0===b&&O()}(e,n),t&&t(e,n)};var n,i=!0,r="628290bb392e9d185af9",o=1e4,s={},c=[],a=[];function u(e){var t=$[e];if(!t)return C;var i=function(i){return t.hot.active?($[i]?-1===$[i].parents.indexOf(e)&&$[i].parents.push(e):(c=[e],n=i),-1===t.children.indexOf(i)&&t.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),c=[]),C(i)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return C[e]},set:function(t){C[e]=t}}};for(var o in C)Object.prototype.hasOwnProperty.call(C,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(i,o,r(o));return i.e=function(e){return"ready"===f&&h("prepare"),b++,C.e(e).then(t,(function(e){throw t(),e}));function t(){b--,"prepare"===f&&(_[e]||E(e),0===b&&0===y&&O())}},i.t=function(e,t){return 1&t&&(e=i(e)),C.t(e,-2&t)},i}function l(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:j,apply:A,status:function(e){if(!e)return f;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:s[e]};return n=void 0,t}var d=[],f="idle";function h(e){f=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var p,v,m,y=0,b=0,_={},g={},x={};function w(e){return+e+""===e?+e:e}function j(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return i=e,h("check"),(t=o,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,o=C.p+""+r+".hot-update.json";i.open("GET",o,!0),i.timeout=t,i.send(null)}catch(e){return n(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===i.status)e();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(i.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return h("idle"),null;g={},_={},x=e.c,m=e.h,h("prepare");var t=new Promise((function(e,t){p={resolve:e,reject:t}}));v={};return E(0),"prepare"===f&&0===b&&0===y&&O(),t}));var t}function E(e){x[e]?(g[e]=!0,y++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=C.p+""+e+"."+r+".hot-update.js",document.head.appendChild(t)}(e)):_[e]=!0}function O(){h("ready");var e=p;if(p=null,e)if(i)Promise.resolve().then((function(){return A(i)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in v)Object.prototype.hasOwnProperty.call(v,n)&&t.push(w(n));e.resolve(t)}}function A(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,i,o,a,u;function l(e){for(var t=[e],n={},i=t.map((function(e){return{chain:[e],id:e}}));i.length>0;){var r=i.pop(),o=r.id,s=r.chain;if((a=$[o])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(a.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var c=0;c<a.parents.length;c++){var u=a.parents[c],l=$[u];if(l){if(l.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(l.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),d(n[u],[o])):(delete n[u],t.push(u),i.push({chain:s.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function d(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}t=t||{};var p={},y=[],b={},_=function(){console.warn("[HMR] unexpected require("+j.moduleId+") to disposed module")};for(var g in v)if(Object.prototype.hasOwnProperty.call(v,g)){var j;u=w(g);var E=!1,O=!1,A=!1,k="";switch((j=v[g]?l(u):{type:"disposed",moduleId:g}).chain&&(k="\nUpdate propagation: "+j.chain.join(" -> ")),j.type){case"self-declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(E=new Error("Aborted because of self decline: "+j.moduleId+k));break;case"declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+j.moduleId+" in "+j.parentId+k));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(j),t.ignoreUnaccepted||(E=new Error("Aborted because "+u+" is not accepted"+k));break;case"accepted":t.onAccepted&&t.onAccepted(j),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(j),A=!0;break;default:throw new Error("Unexception type "+j.type)}if(E)return h("abort"),Promise.reject(E);if(O)for(u in b[u]=v[u],d(y,j.outdatedModules),j.outdatedDependencies)Object.prototype.hasOwnProperty.call(j.outdatedDependencies,u)&&(p[u]||(p[u]=[]),d(p[u],j.outdatedDependencies[u]));A&&(d(y,[j.moduleId]),b[u]=_)}var P,M=[];for(i=0;i<y.length;i++)u=y[i],$[u]&&$[u].hot._selfAccepted&&b[u]!==_&&M.push({module:u,errorHandler:$[u].hot._selfAccepted});h("dispose"),Object.keys(x).forEach((function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)}));for(var D,T,S=y.slice();S.length>0;)if(u=S.pop(),a=$[u]){var H={},N=a.hot._disposeHandlers;for(o=0;o<N.length;o++)(n=N[o])(H);for(s[u]=H,a.hot.active=!1,delete $[u],delete p[u],o=0;o<a.children.length;o++){var I=$[a.children[o]];I&&((P=I.parents.indexOf(u))>=0&&I.parents.splice(P,1))}}for(u in p)if(Object.prototype.hasOwnProperty.call(p,u)&&(a=$[u]))for(T=p[u],o=0;o<T.length;o++)D=T[o],(P=a.children.indexOf(D))>=0&&a.children.splice(P,1);for(u in h("apply"),r=m,b)Object.prototype.hasOwnProperty.call(b,u)&&(e[u]=b[u]);var F=null;for(u in p)if(Object.prototype.hasOwnProperty.call(p,u)&&(a=$[u])){T=p[u];var L=[];for(i=0;i<T.length;i++)if(D=T[i],n=a.hot._acceptedDependencies[D]){if(-1!==L.indexOf(n))continue;L.push(n)}for(i=0;i<L.length;i++){n=L[i];try{n(T)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:T[i],error:e}),t.ignoreErrored||F||(F=e)}}}for(i=0;i<M.length;i++){var U=M[i];u=U.module,c=[u];try{C(u)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||F||(F=n),F||(F=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||F||(F=e)}}return F?(h("fail"),Promise.reject(F)):(h("idle"),new Promise((function(e){e(y)})))}var $={};function C(t){if($[t])return $[t].exports;var n=$[t]={i:t,l:!1,exports:{},hot:l(t),parents:(a=c,c=[],a),children:[]};return e[t].call(n.exports,n,n.exports,u(t)),n.l=!0,n.exports}C.m=e,C.c=$,C.d=function(e,t,n){C.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},C.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},C.t=function(e,t){if(1&t&&(e=C(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(C.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)C.d(n,i,function(t){return e[t]}.bind(null,i));return n},C.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return C.d(t,"a",t),t},C.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},C.p="",C.h=function(){return r},u("./src/main.js")(C.s="./src/main.js")}({"./src/compile.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compile=function(e,t){l(t,e)||t.hasChildNodes()&&function e(t,n){t.forEach((function(t){l(t,n)||t.hasChildNodes()&&e(t.childNodes,n)}))}(t.childNodes,e);if(!u){var n=void 0,i=void 0;for(u=!0,function(e){e.forEach((function(e){e.def.priority||(e.def.priority=1e3)})),e.sort((function(e,t){return t.def.priority-e.def.priority}))}(a);a.length;)i=a.shift(),(n=new o.default(i,i.vm))._bind(),i.vm._directives.push(n);u=!1,e._callHook("compiled"),setTimeout((function(){!function(e){var t=document.body,n=t.contains,i=e._directives,r=void 0,o=[],s=void 0;for(;i.length;)s=i.shift(),r=s.descriptor.attr,n.call(t,s.el)||"v-for"===r||"v-if"===r?o.push(s):s._teardown();e._directives=[].concat(o),o.length=0}(e),e._callHook("destroyed")}),0)}},t.compileProps=function(e,t,n){var i=e.$options.directives,r=[],o=void 0,u=void 0,l=void 0;Object.keys(n).forEach((function(e){l=n[e],o={name:l,path:l},null!==(u=(0,s.getBindAttr)(t,l))?(o.dynamic=!0,o.raw=o.parentPath=u):null!==(u=(0,s.getAttr)(t,l))&&(o.raw=u),r.push(o)})),e._props={},r.forEach((function(t){var n=t.path;t.raw,t.options;e._props[n]=t,t.dynamic?e._context&&a.push({vm:e,name:"prop",def:i.prop,prop:t}):(0,c.defineReactive)(e,t.path,t.raw)}))};var i,r=n("./src/directive.js"),o=(i=r)&&i.__esModule?i:{default:i},s=n("./src/utils/index.js"),c=n("./src/observer.js");var a=[],u=!1;function l(e,t){var n=e.nodeType;return 1==n?function(e,t){var n=t.$options.directives,i=e.tagName.toLowerCase();if(v.test(i)||m.test(i)){if("slot"===i)a.push({vm:t,el:e,arg:void 0,name:"slot",attr:void 0,expression:"",def:n.slot});else if(e.hasAttributes()){var r=void 0,o=!1;return(0,s.toArray)(e.attributes).forEach((function(i){var s=i.name.trim(),c=i.value.trim();if(d.test(s))e.removeAttribute(s),a.push({vm:t,el:e,arg:s.replace(d,""),name:"on",attr:s,expression:c,def:n.on});else if(h.test(s)){e.removeAttribute(s);var u=c.split("|"),l={vm:t,el:e,arg:s.replace(h,""),name:"bind",attr:s,def:n.bind};if(u.length>1){var p=u.shift(),v=[];u.forEach((function(e){v.push({name:e.trim()})})),l.expression=p,l.filters=v}else l.expression=c;a.push(l)}else if(r=s.match(f)){if("v-text"==s){e.removeAttribute(s);var m=c.split("|"),y={vm:t,el:e,arg:s.replace(h,""),name:"text",attr:s,def:n.text};if(m.length>1){var b=m.shift(),_=[];m.forEach((function(e){_.push({name:e.trim()})})),y.expression=b,y.filters=_}else y.expression=c;a.push(y)}else"v-else"!==s&&(e.removeAttribute(s),a.push({vm:t,el:e,arg:void 0,name:s.replace(/^v-/,""),attr:s,expression:c,def:n[r[1]]}));"v-for"==s&&(o=!0)}})),o}}else t.$options.components[i]&&a.push({vm:t,el:e,name:"component",expression:i,def:n.component,modifiers:{literal:!0}})}(e,t):3==n?function(e,t){var n=function(e,t){var n=0,i=0,r=void 0,o=[];for(;r=p.exec(e);)(n=r.index)>i&&o.push({value:e.slice(i,n)}),o.push({value:r[2],tag:!0}),i=n+r[0].length;i<e.length&&o.push({value:e.slice(i)});return o}(e.nodeValue);if(!n)return;var i=document.createDocumentFragment(),r=void 0;n.forEach((function(e){r=e.tag?function(e,t){var n=t.$options.directives,i=document.createTextNode(" ");if(e.descriptor)return;var r=e.value.split("|");if(e.descriptor={vm:t,el:i,name:"text",def:n.text},r.length>1){var o=r.shift(),s=[];r.forEach((function(e){s.push({name:e.trim()})})),e.descriptor.expression=o.trim(),e.descriptor.filters=s}else e.descriptor.expression=e.value.trim();return i}(e,t):document.createTextNode(e.value),i.appendChild(r),e.tag&&a.push(e.descriptor)})),Promise.resolve().then((function(){(0,s.replace)(e,i)}))}(e,t):void 0}var d=/^(v-on:|@)/,f=/^v-([^:]+)(?:$|:(.*)$)/,h=/^(v-bind:|:)/,p=/\{\{\{((?:.|\n)+?)\}\}\}|\{\{((?:.|\n)+?)\}\}/g,v=/^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer|button|textarea)$/i,m=/^(slot|partial|component)$/i},"./src/dep.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var i=0;function r(){this.id=i++,this.subs=[]}r.target=null,r.prototype={depend:function(){r.target&&r.target.addDep(this)},addSub:function(e){this.subs.push(e)},removeSub:function(e){var t=this.subs.indexOf(e);t>-1&&this.subs.splice(t,1)},notify:function(){this.subs.forEach((function(e){e.update()}))}}},"./src/directive.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=o;var i=n("./src/utils/index.js"),r=n("./src/watcher.js");function o(e,t){this.vm=t,this.name=e.name,this.descriptor=e,this.expression=e.expression,this.el=e.el,this.filters=e.filters,this.modifiers=e.modifiers,this.literal=this.modifiers&&this.modifiers.literal}o.prototype={_bind:function(){var e=this.descriptor,t=e.def;if("function"==typeof t?this.update=t:(0,i.extend)(this,t),this.bind&&this.bind(),this.literal)this.update&&this.update(e.raw);else if(this.expression){var n=this;this.update&&(this._update=function(e,t){n.update(e,t)});var o=this._watcher=new r.Watcher(this.vm,this.expression,this._update,{filters:this.filters});this.update&&this.update(o.value)}},set:function(e){this._watcher.set(e)},_teardown:function(e){this.unbind&&this.unbind(),this._watcher&&this._watcher.teardown(),this.vm=this.el=this._watcher=null}}},"./src/directives.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=n("./src/utils/index.js"),o=n("./src/compile.js"),s=n("./src/observer.js"),c=n("./src/watcher.js"),a={text:{bind:function(){var e=this;this.listener=function(){e.set(this.value)},(0,r.on)(this.el,"input",this.listener)},update:function(e){this.el.value=e},unbind:function(){(0,r.off)(this.el,"input",this.listener)}},select:{bind:function(){var e=this,t=this.el,n=this.multiple=t.hasAttribute("multiple");this.listener=function(){var i=u(t,n);e.set(i)},(0,r.on)(t,"change",this.listener),u(t,n,!0)},update:function(e){var t=this.el;t.selectedIndex=-1;for(var n=this.multiple&&(0,r.isArray)(e),i=t.options,o=i.length,s=void 0,c=void 0;o--;)c=(s=i[o]).value,s.selected=n?e.indexOf(c)>-1:e==c},unbind:function(){(0,r.off)(this.el,"change",this.listener)}},radio:{bind:function(){var e=this;this.el;this.listener=function(){e.set(this.value)},(0,r.on)(this.el,"change",this.listener)},update:function(e){var t=this.el;t.checked=t.value==e},unbind:function(){(0,r.off)(this.el,"change",this.listener)}},checkbox:{bind:function(){var e=this,t=this.el;this.listener=function(){var n=t.checked,i=e._watcher.get();if((0,r.isArray)(i)){var o=i.indexOf(this.value);n?-1==o&&e.set(i.concat(this.value)):e.set(i.slice(0,o).concat(i.slice(o+1)))}else e.set(n)},(0,r.on)(t,"change",this.listener)},update:function(e){var t=this.el;(0,r.isArray)(e)?t.checked=e.indexOf(t.value)>-1:t.checked=!!e},unbind:function(){(0,r.off)(el,"change",this.listener)}}};function u(e,t,n){for(var i=t?[]:null,r=void 0,o=0,s=e.options.length;o<s;o++)if(r=e.options[o],n?r.hasAttribute("selected"):r.selected){if(!t)return r.value;i.push(r.value)}return i}t.default={text:{bind:function(){this.attr=3===this.el.nodeType?"data":"textContent"},update:function(e){this.el[this.attr]=e}},on:{priority:700,update:function(e){this.handler&&(0,r.off)(this.el,this.descriptor.arg,this.handler),this.handler=e,(0,r.on)(this.el,this.descriptor.arg,this.handler)},unbind:function(){this.handler&&(0,r.off)(this.el,this.descriptor.arg,this.handler)}},bind:{priority:850,bind:function(){this.attr=this.descriptor.arg},update:function(e){this.el.setAttribute(this.attr,e)}},model:{priority:800,bind:function(){var e=this.el,t=void 0;switch(e.tagName){case"INPUT":t=a[e.type]||a.text;break;case"TEXTAREA":t=a.text;break;case"SELECT":t=a.select;break;default:return}t.bind.call(this),this.update=t.update}},html:{update:function(e){this.el.innerHTML=e}},show:{update:function(e){this.el.style.display=e?"":"none"}},if:{priority:2100,bind:function(){var e=this.el,t=e.nextElementSibling;t&&null!==(0,r.getAttr)(t,"v-else")&&((0,r.remove)(t),this.elseEl=t),this.anchor=document.createTextNode(""),(0,r.replace)(e,this.anchor),this.isFirst=!0},update:function(e){var t=this;e?(this.cloneElseEl&&(0,r.remove)(this.cloneElseEl),this.isFirst?(this.isFirst=!1,setTimeout((function(){t.cloneEl=t.el.cloneNode(!0),(0,r.insert)(t.cloneEl,t.anchor)}),0)):(this.cloneEl=this.el.cloneNode(!0),(0,r.insert)(this.cloneEl,this.anchor))):(this.cloneEl&&(0,r.remove)(this.cloneEl),this.isFirst?(this.isFirst=!1,setTimeout((function(){t.cloneElseEl=t.elseEl.cloneNode(!0),(0,r.insert)(t.cloneElseEl,t.anchor)}),0)):(this.cloneElseEl=this.elseEl.cloneNode(!0),(0,r.insert)(this.cloneElseEl,this.anchor)))}},for:{priority:2200,bind:function(){var e=this.expression.match(/(.*) (?:in|of) (.*)/);if(e){var t=e[1].match(/\((.*),(.*)\)/);t?(this.valueKey=t[1].trim(),this.indexKey=t[2].trim()):this.valueKey=e[1].trim()}else this.valueKey=e[1].trim();this.expression=e[2].trim(),this.anchor=document.createTextNode(""),this.frag=document.createDocumentFragment(),(0,r.replace)(this.el,this.anchor)},update:function(e){if(this.len)for(;this.len--;)(0,r.remove)(this.anchor.previousElementSibling);var t=void 0,n=void 0,s=void 0,c=void 0;if("object"===(void 0===e?"undefined":i(e))){for(var a in this.len=0,e)this.len++,c=(t=this.el.cloneNode(!0)).innerHTML,this.valueKey&&(n=new RegExp("{{\\s*"+this.valueKey+"\\s*}}","g"),c=c.replace(n,e[a])),this.indexKey&&(s=new RegExp("{{\\s*"+this.indexKey+"\\s*}}","g"),c=c.replace(s,a)),t.innerHTML=c,this.frag.appendChild(t);(0,o.compile)(this.vm,this.frag),(0,r.insert)(this.frag,this.anchor)}else console.error(this.expression+"必须为对象或数组")}},component:{priority:1500,bind:function(){this.anchor=document.createTextNode(""),(0,r.replace)(this.el,this.anchor);var e=this.build();(0,r.insert)(e.$el,this.anchor)},build:function(){this.Component=this.vm.$options.components[this.expression],this.Component.options.template||(this.Component.options.template="<div></div>");var e={name:this.expression,el:this.el.cloneNode(!0),_asComponent:!0,_context:this.vm,parent:this.vm};return new this.Component(e)}},prop:{bind:function(){var e=this.vm,t=e._context,n=this.descriptor.prop,i=(n.path,n.parentPath),r=this.parentWatcher=new c.Watcher(t,i,(function(t){e[n.path]=t}),{sync:!0});(0,s.defineReactive)(e,n.path,r.value)},unbind:function(){}},slot:{priority:2300,bind:function(){var e=(0,r.getAttr)(this.el,"name");null==e&&(e="default");var t=this.vm._slotContents&&this.vm._slotContents[e];(0,r.replace)(this.el,t)}}}},"./src/main.js":function(e,t,n){"use strict";var i=u(n("./src/observer.js")),r=n("./src/watcher.js"),o=n("./src/utils/index.js"),s=n("./src/compile.js"),c=u(n("./src/directives.js")),a=u(n("./src/dep.js"));function u(e){return e&&e.__esModule?e:{default:e}}function l(e){this._init(e)}function d(){}function f(e,t){var n=new r.Watcher(t,e,null,{lazy:!0});return function(){return n.dirty&&n.evaluate(),a.default.target&&n.depend(),n.value}}l.options={directives:c.default,components:{},filters:{}},l.mixin=function(e){this.options=(0,o.mergeOptions)(this.options,e)},l.directive=function(e,t){this.options.directives[e]=t},l.use=function(e){if(!e.installed){var t=(0,o.toArray)(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):e.apply(null,t),e.installed=!0,this}},l.cid=0,l.extend=function(e){e=e||{};var t=0===this.cid;if(t&&e._Ctor)return e._Ctor;var n=e.name||this.options.name,i=new Function("return function "+n.replace(h,o.toUpper)+" (options) { this._init(options) }")();return i.prototype=Object.create(this.prototype),i.prototype.constructor=i,i.options=(0,o.mergeOptions)(this.options,e),i.super=this,i.extend=this.extend,i.component=this.component,n&&(i.options.components[n]=i),t&&(e._Ctor=i),i},l.component=function(e,t,n){return t?(t.name||(t.name=e),t=l.extend(t),n||(this.options.components[e]=t),t):this.options.components[e]},l.filter=function(e,t){this.options.filters[e]=t},l.prototype={constructor:l,_init:function(e){this.$el=null,this.$parent=e.parent,this._isMiniVue=!0,this.$root=this.$parent?this.$parent.$root:this,this.$children=[],this._watchers=[],this._events={},this._directives=[],this._context=e._context||this.$parent,this.$parent&&this.$parent.$children.push(this),e=this.$options=(0,o.mergeOptions)(this.constructor.options,e,this),this._callHook("init"),this._initMixins(),this._initComponents(),this._initProps(),this._initMethods(),this._initData(),this._initWatch(),this._initComputed(),this._initEvents(),this._callHook("created"),e.el&&this._compile()},_initMixins:function(){var e=this.$options;e.mixin&&(this.$options=(0,o.mergeOptions)(e,e.mixin))},_initComponents:function(){var e=this.$options.components;Object.keys(e).forEach((function(t){e[t]=l.component(t,e[t],!0)}))},_initProps:function(){var e=this.$options,t=e.el,n=e.props;t=e.el=(0,o.query)(t),n&&1==t.nodeType&&(0,s.compileProps)(this,t,n)},_initMethods:function(){var e=this,t=this.$options.methods?this.$options.methods:{};Object.keys(t).forEach((function(n){e[n]=(0,o.bind)(t[n],e)}))},_initData:function(){var e=this,t=this.$options.data;t=this._data="function"==typeof t?t():t||{},Object.keys(t).forEach((function(t){e._proxy(e,"_data",t)})),(0,i.default)(this._data)},_initWatch:function(){var e=this;if(this.$options.watch){var t=this.$options.watch;Object.keys(t).forEach((function(n){e.$watch(n,t[n])}))}},_initComputed:function(){var e=this;if(this.$options.computed){var t=this.$options.computed;Object.keys(t).forEach((function(n){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:f(t[n],e),set:d})}))}},_initEvents:function(){var e=this.$options;e._asComponent&&function(e,t){var n=/^(v-on:|@)/,i=(0,o.toArray)(t.attributes),r=void 0,s=void 0,c=void 0;i.forEach((function(t){r=t.name.trim(),s=t.value.trim(),n.test(r)&&(r=r.replace(n,""),s+=".apply(this, this.$arguments)",c=function(e,t){var n=new Function("vm","return vm."+t);return function(){e.$arguments=(0,o.toArray)(arguments);var t=n.call(e,e);return e.$arguments=null,t}}(e._context,s),e.$on(r,c))}))}(this,e.el)},_proxy:function(e,t,n){var i={enumerable:!0,configurable:!0,get:function(){return this[t][n]},set:function(e){this[t][n]=e}};Object.defineProperty(e,n,i)},$set:function(e,t,n){this[e][t]=n,vm[e].__ob__.dep.notify()},$delete:function(e,t){(0,o.isArray)(this[e])?this[e].splice(t,1):(delete this[e][t],vm[e].__ob__.dep.notify())},$watch:function(e,t,n){new r.Watcher(this,e,t,n)},$on:function(e,t){(this._events[e]||(this._events[e]=[])).push(t)},$off:function(e,t){var n=this._events[e];if(t)for(var i=n.length;i--;){n[i]===t&&n.splice(i,1)}else n.length=0},$emit:function(e){var t=this,n=this._events[e],i=(0,o.toArray)(arguments,1);n?i.length>1?n.forEach((function(e){e.apply(t,i)})):n.forEach((function(e){e.call(t,i[0])})):this._events[e]=[]},$once:function(e,t){var n=this;this.$on(e,(function i(){n.$off(e,i),t.apply(this,arguments)}))},$nextTick:r.nextTick,_applyFilters:function(e,t){var n=this,i=this.$options.filters?this.$options.filters:{},r=void 0;return t.forEach((function(t){(r=i[t.name])&&(e=r.call(n,e))})),e},_callHook:function(e){var t=this,n=this.$options[e];"function"==typeof n?n.call(this):n&&n.forEach((function(e){e.call(t)}))},_compile:function(){var e=this.$options;e.el=this.$el=(0,o.query)(e.el);var t=function(e,t){if(t.template){t._content=p(e);var n=t.template.trim(),i=document.createElement("div");i.innerHTML=n;var r=p(i,!0),s=(r=r.cloneNode(!0)).firstChild;return(0,o.mergeAttrs)(e,s),s}}(this.$el,e);t&&(this.$el=t,e.el.innerHTML="",(0,o.replace)(e.el,this.$el)),function(e,t){if(!t)return;var n=e._slotContents=Object.create(null),i=void 0;for(i in(0,o.toArray)(t.children).forEach((function(e){(i=e.getAttribute("slot"))&&(n[i]||(n[i]=[])).push(e)})),n)n[i]=v(n[i],t);if(t.hasChildNodes()){var r=t.childNodes;if(1===r.length&&3===r[0].nodeType&&!r[0].data.trim())return;n.default=v(t.childNodes,t)}}(this,e._content),this._callHook("beforeCompile"),(0,s.compile)(this,this.$el)}},window.MiniVue=l;var h=/(?:^|[-_\/])(\w)/g;function p(e,t){var n=void 0,i=void 0;if(e.hasChildNodes())for((0,o.trimNode)(e),i=t?document.createDocumentFragment():document.createElement("div");n=e.firstChild;)i.appendChild(n);return i}function v(e,t){var n=document.createDocumentFragment(),i=void 0;return(e=(0,o.toArray)(e)).forEach((function(e){(0,o.isTrimmable)(e)||(t.removeChild(e),(i=document.createElement("div")).innerHTML=e.innerHTML,(0,o.trimNode)(i),(0,o.toArray)(i.childNodes).forEach((function(e){n.appendChild(e)})))})),n}},"./src/observer.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=l,t.defineReactive=f;var r,o=n("./src/dep.js"),s=(r=o)&&r.__esModule?r:{default:r},c=n("./src/utils/index.js");var a=Array.prototype,u=Object.create(a);function l(e){if(e&&"object"===(void 0===e?"undefined":i(e))){var t=void 0;return(0,c.hasOwn)(e,"__ob__")&&e.__ob__ instanceof d?t=e.__ob__:e._isMiniVue||(t=new d(e)),t}}function d(e){this.value=e,this.dep=new s.default,(0,c.def)(e,"__ob__",this),(0,c.isArray)(e)?(e.__proto__=u,this.observeArray(e)):this.walk(e)}function f(e,t,n){var i=new s.default,r=l(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){if(s.default.target&&(i.depend(),r&&r.dep.depend(),(0,c.isArray)(n)))for(var e,t=0,o=n.length;t<o;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend();return n},set:function(e){n!==e&&(n=e,r=l(e),i.notify())}})}["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=a[e];(0,c.def)(u,e,(function(){for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var o=t.apply(this,i),s=this.__ob__,c=void 0;switch(e){case"push":case"unshift":c=i;break;case"splice":c=i.slice(2)}return c&&s.observeArray(c),s.dep.notify(),o}))})),d.prototype={walk:function(e){for(var t=Object.keys(e),n=0,i=t.length;n<i;n++)f(e,t[n],e[t[n]])},observeArray:function(e){e.forEach((function(e){l(e)}))}}},"./src/utils/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=t.mergeAttrs=t.mergeOptions=void 0;var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.toArray=function(e,t){return t=t||0,[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e)).slice(t)},t.replace=function(e,t){var n=e.parentNode;n&&n.replaceChild(t,e)},t.extend=function(e,t){var n=Object.keys(t),i=n.length;for(;i--;)e[n[i]]=t[n[i]];return e},t.on=function(e,t,n,i){e.addEventListener(t,n,i)},t.off=function(e,t,n){e.removeEventListener(t,n)},t.bind=function(e,t){return function(n){var i=arguments.length;return i?i>1?e.apply(t,arguments):e.call(t,n):e.call(t)}},t.def=function(e,t,n,i){Object.defineProperty(e,t,{value:n,enumerable:!!i,writable:!0,configurable:!0})},t.hasOwn=o,t.isObject=function(e){return null!==e&&"object"===(void 0===e?"undefined":i(e))},t.getAttr=c,t.getBindAttr=function(e,t){var n=c(e,":"+t);null===n&&(n=c(e,"v-bind:"+t));return n},t.remove=function(e){e.parentNode.removeChild(e)},t.insert=function(e,t){t.parentNode.insertBefore(e,t)},t.addClass=function(e,t){e.classList.add(t)},t.query=function(e){return"string"==typeof e?document.querySelector(e):e},t.makeGetterFn=function(e){return new Function("with(this) { return "+e+" }")},t.firstWordtoUpper=function(e){return e.substring(0,1).toUpperCase()+e.substring(1)},t.trimNode=function(e){var t=void 0;for(;a(t=e.firstChild);)e.removeChild(t);for(;a(t=e.lastChild);)e.removeChild(t)},t.isTrimmable=a,t.toUpper=function(e,t){return t?t.toUpperCase():""},t.set=function e(t,n,i){if(o(t,n))return void(t[n]=i);if(t._isMiniVue)return void e(t._data,n,i);var r=t.__ob__;if(!r)return void(t[n]=i);r.convert(n,i);r.dep.notify();return i};var r=n("./src/utils/merge.js");function o(e,t){return hasOwnProperty.call(e,t)}t.mergeOptions=r.mergeOptions,t.mergeAttrs=r.mergeAttrs;var s=Array.isArray;function c(e,t){var n=e.getAttribute(t);return null!==n&&e.removeAttribute(t),n}function a(e){return e&&(3===e.nodeType&&!e.data.trim()||8===e.nodeType)}t.isArray=s},"./src/utils/merge.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mergeOptions=function e(t,n,o){!function(e){if(e.components){var t=e.components;Object.keys(t).forEach((function(e){t[e]=MiniVue.component(e,t[e],!0)}))}}(n);var s={};var a=void 0;n.extends&&(t="function"==typeof n.extends?e(t,n.extends.options,o):e(t,n.extends,o));if(n.mixins)for(var u=0,l=n.mixins.length;u<l;u++){var d=n.mixins[u],f=d.prototype instanceof MiniVue?d.options:d;t=e(t,f,o)}for(a in t)h(a);for(a in n)(0,i.hasOwn)(t,a)||h(a);function h(e){var i=r[e]||c;s[e]=i(t[e],n[e],o,e)}return s},t.mergeAttrs=function(e,t){var n=e.attributes,i=n.length,r=void 0,o=void 0;for(;i--;)r=n[i].name,o=n[i].value.trim(),t.hasAttribute(r)||a.test(r)?"class"===r&&o.split(/\s+/).forEach((function(e){addClass(t,e)})):t.setAttribute(r,o)};var i=n("./src/utils/index.js");var r=Object.create(null);function o(e,t){var n=void 0,r=void 0,s=void 0;for(n in t)r=e[n],s=t[n],(0,i.hasOwn)(e,n)?isObject(r)&&isObject(s)&&o(r,s):(0,i.set)(e,n,s);return e}function s(e,t){var n=Object.create(e||null);return t?(0,i.extend)(n,function(e){if((0,i.isArray)(e)){for(var t={},n=e.length,r=void 0;n--;)r=e[n],id="function"==typeof r?r.options&&r.options.name||r.id:r.name||r.id,id&&(t[id]=r);return t}return e}(t)):n}function c(e,t){return void 0===t?e:t}r.data=function(e,t,n){return n?e||t?function(){var i="function"==typeof t?t.call(n):t,r="function"==typeof e?e.call(n):void 0;return i?o(i,r):r}:void 0:t?"function"!=typeof t?e:e?function(){return o(t.call(this),e.call(this))}:t:e},r.el=function(e,t,n){if(n||!t||"function"==typeof t){var i=t||e;return n&&"function"==typeof i?i.call(n):i}},r.init=r.created=r.ready=r.attached=r.detached=r.beforeCompile=r.compiled=r.beforeDestroy=r.destroyed=r.activate=function(e,t){return t?e?e.concat(t):(0,i.isArray)(t)?t:[t]:e},["component","directive","elementDirective","filter","transition","partial"].forEach((function(e){r[e+"s"]=s})),r.watch=r.events=function(e,t){if(!t)return e;if(!e)return t;var n={};for(var r in(0,i.extend)(n,e),t){var o=n[r],s=t[r];o&&!(0,i.isArray)(o)&&(o=[o]),n[r]=o?o.concat(s):[s]}return n},r.props=r.methods=r.computed=function(e,t){if(!t)return e;if(!e)return t;var n=Object.create(null);return(0,i.extend)(n,e),(0,i.extend)(n,t),n};var a=/[^\w\-:\.]/},"./src/watcher.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Watcher=a,t.nextTick=h;var i,r=n("./src/dep.js"),o=(i=r)&&i.__esModule?i:{default:i},s=n("./src/utils/index.js");var c=0;function a(e,t,n,i){if(e._watchers.push(this),i&&(0,s.extend)(this,i),this.id=c++,this.vm=e,this.expression=t,this.sync=!!i&&i.sync,this.dirty=this.lazy,this.deps=[],this.depIds=new Set,this.cb=n,"function"==typeof t)this.getter=t,this.setter=void 0;else{var r=function(e){var t={exp:e=e.trim()};return t.get=(0,s.makeGetterFn)(e),t}(t);this.getter=r.get,this.setter=function(n){e[t]=n}}this.lazy?this.value=void 0:this.value=this.get()}a.prototype={get:function(){var e=this.vm;o.default.target=this;var t=this.getter.call(e,e);return this.filters&&(t=e._applyFilters(t,this.filters)),o.default.target=null,t},set:function(e){this.setter.call(this.vm,e)},update:function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;null==l[t]&&(l[t]=u.length,u.push(e));d||(d=!0,h(f))}(this)},run:function(){var e=this.get(),t=this.value;this.value=e,(e!==t||(0,s.isObject)(e))&&this.cb.call(this.vm,e,t)},addDep:function(e){this.depIds.has(e.id)||(this.deps.push(e),this.depIds.add(e.id),e.addSub(this))},teardown:function(){this.vm._watchers.splice(this.vm._watchers.indexOf(this),1);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.vm=this.cb=this.value=null},evaluate:function(){var e=o.default.target;this.value=this.get(),this.dirty=!1,o.default.target=e},depend:function(){this.deps.forEach((function(e){e.depend()}))}};var u=[],l={},d=!1;function f(){u.forEach((function(e){e.run()})),d=!1,l={},u.length=0}function h(e,t){Promise.resolve().then((function(){t?e.call(t):e()}))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9kaXJlY3RpdmVzLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL21lcmdlLmpzIiwid2VicGFjazovLy8uL3NyYy93YXRjaGVyLmpzIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90Q3VycmVudE1vZHVsZURhdGEiLCJob3RDdXJyZW50UGFyZW50cyIsImhvdEN1cnJlbnRQYXJlbnRzVGVtcCIsImhvdENyZWF0ZVJlcXVpcmUiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZm4iLCJyZXF1ZXN0IiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIk9iamVjdEZhY3RvcnkiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwidGhlbiIsImZpbmlzaENodW5rTG9hZGluZyIsImVyciIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwidCIsIm1vZGUiLCJob3RDcmVhdGVNb2R1bGUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfbWFpbiIsImFjY2VwdCIsImRlcCIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiaSIsImxlbmd0aCIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImlkeCIsInNwbGljZSIsImNoZWNrIiwiaG90Q2hlY2siLCJhcHBseSIsImhvdEFwcGx5Iiwic3RhdHVzIiwibCIsImhvdFN0YXR1c0hhbmRsZXJzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwibmV3U3RhdHVzIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiYyIsImgiLCJwcm9taXNlIiwic2NyaXB0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInNyYyIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwibWFwIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwb3AiLCJ0eXBlIiwicGFyZW50SWQiLCJwYXJlbnQiLCJjb25jYXQiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiaXRlbSIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJlcnJvckhhbmRsZXIiLCJrZXlzIiwiZm9yRWFjaCIsImluc3RhbGxlZENodW5rcyIsImhvdERpc3Bvc2VDaHVuayIsImRlcGVuZGVuY3kiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsInNsaWNlIiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJtb2R1bGVzIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCJleHBvcnRzIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJjb21waWxlIiwidm0iLCJlbCIsImNvbXBpbGVOb2RlIiwiaGFzQ2hpbGROb2RlcyIsImNvbXBpbGVOb2RlTGlzdCIsIm5vZGVzIiwibm9kZSIsImNoaWxkTm9kZXMiLCJwZW5kaW5nIiwiZGlyIiwiZGVzY3JpcHRvciIsImRlcyIsImRlZiIsInByaW9yaXR5Iiwic29ydCIsInNvcnREZXNjcmlwdG9ycyIsInNoaWZ0IiwiRGlyZWN0aXZlIiwiX2JpbmQiLCJfZGlyZWN0aXZlcyIsIl9jYWxsSG9vayIsInNldFRpbWVvdXQiLCJib2R5IiwiY29udGFpbnMiLCJkaXJzIiwiYXR0ciIsInRlbXAiLCJfdGVhcmRvd24iLCJ0ZWFyZG93biIsImNvbXBpbGVQcm9wcyIsInByb3BzT3B0aW9ucyIsImRpcmVjdGl2ZXMiLCIkb3B0aW9ucyIsInByb3BzIiwicHJvcCIsInBhdGgiLCJnZXRCaW5kQXR0ciIsImR5bmFtaWMiLCJyYXciLCJwYXJlbnRQYXRoIiwiZ2V0QXR0ciIsIl9wcm9wcyIsIl9jb250ZXh0IiwiZGVmaW5lUmVhY3RpdmUiLCJub2RlVHlwZSIsInRhZyIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsImNvbW1vblRhZ1JFIiwidGVzdCIsInJlc2VydmVkVGFnUkUiLCJhcmciLCJleHByZXNzaW9uIiwic2xvdCIsImhhc0F0dHJpYnV0ZXMiLCJtYXRjaGVkIiwiaXNGb3IiLCJ0b0FycmF5IiwiYXR0cmlidXRlcyIsInRyaW0iLCJvblJlIiwicmVtb3ZlQXR0cmlidXRlIiwicmVwbGFjZSIsIm9uIiwiYmluZFJlIiwidmFsdWVzIiwic3BsaXQiLCJmaWx0ZXJzIiwibWF0Y2giLCJkaXJBdHRyUkUiLCJ0ZXh0IiwiY29tcG9uZW50cyIsImNvbXBvbmVudCIsIm1vZGlmaWVycyIsImxpdGVyYWwiLCJjb21waWxlRWxlbWVudCIsInRva2VucyIsImluZGV4IiwibGFzdEluZGV4IiwidGFnUkUiLCJleGVjIiwicGFyc2VUZXh0Iiwibm9kZVZhbHVlIiwiZnJhZyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJ0b2tlbiIsImNyZWF0ZVRleHROb2RlIiwicHJvY2Vzc1RleHRUb2tlbiIsImNvbXBpbGVUZXh0Tm9kZSIsIkRlcCIsInVpZCIsInRoaXMiLCJzdWJzIiwidGFyZ2V0IiwiZGVwZW5kIiwiYWRkRGVwIiwiYWRkU3ViIiwic3ViIiwicmVtb3ZlU3ViIiwibm90aWZ5Iiwid2F0Y2hlciIsImV4dGVuZCIsIl91cGRhdGUiLCJvbGRWYWwiLCJfd2F0Y2hlciIsIldhdGNoZXIiLCJ1bmJpbmQiLCJoYW5kbGVycyIsInNlbGYiLCJsaXN0ZW5lciIsIm9mZiIsInNlbGVjdCIsIm11bHRpcGxlIiwiaGFzQXR0cmlidXRlIiwiZ2V0VmFsdWUiLCJzZWxlY3RlZEluZGV4IiwibXVsdGkiLCJpc0FycmF5Iiwib3AiLCJ2YWwiLCJzZWxlY3RlZCIsInJhZGlvIiwiY2hlY2tlZCIsImNoZWNrYm94IiwiaXNDaGVja2VkIiwiaW5pdCIsInJlcyIsImhhbmRsZXIiLCJzZXRBdHRyaWJ1dGUiLCJtb2RlbCIsImh0bWwiLCJpbm5lckhUTUwiLCJzaG93Iiwic3R5bGUiLCJkaXNwbGF5IiwiaWYiLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicmVtb3ZlIiwiZWxzZUVsIiwiYW5jaG9yIiwiaXNGaXJzdCIsImNsb25lRWxzZUVsIiwiY2xvbmVFbCIsImNsb25lTm9kZSIsImluc2VydCIsImZvciIsIm1hdGNoMSIsInZhbHVlS2V5IiwiaW5kZXhLZXkiLCJsZW4iLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicmUxIiwicmUyIiwiUmVnRXhwIiwiYnVpbGQiLCIkZWwiLCJDb21wb25lbnQiLCJ0ZW1wbGF0ZSIsIl9hc0NvbXBvbmVudCIsInBhcmVudEtleSIsInBhcmVudFdhdGNoZXIiLCJzeW5jIiwiY29udGVudCIsIl9zbG90Q29udGVudHMiLCJNaW5pVnVlIiwiX2luaXQiLCJub29wIiwibWFrZUNvbXB1dGVkR2V0dGVyIiwibGF6eSIsImRpcnR5IiwiZXZhbHVhdGUiLCJtaXhpbiIsIm1lcmdlT3B0aW9ucyIsImRpcmVjdGl2ZSIsImRpck5hbWUiLCJ1c2UiLCJwbHVnaW4iLCJpbnN0YWxsZWQiLCJhcmdzIiwiYXJndW1lbnRzIiwidW5zaGlmdCIsImluc3RhbGwiLCJjaWQiLCJleHRlbmRPcHRpb25zIiwiaXNGaXJzdEV4dGVuZCIsIl9DdG9yIiwiU3ViIiwiRnVuY3Rpb24iLCJjbGFzc2lmeVJFIiwidG9VcHBlciIsImNvbnN0cnVjdG9yIiwiZGVmaW5pdGlvbiIsImlzUHJpdmF0ZSIsImZpbHRlciIsIiRwYXJlbnQiLCJfaXNNaW5pVnVlIiwiJHJvb3QiLCIkY2hpbGRyZW4iLCJfd2F0Y2hlcnMiLCJfZXZlbnRzIiwiX2luaXRNaXhpbnMiLCJfaW5pdENvbXBvbmVudHMiLCJfaW5pdFByb3BzIiwiX2luaXRNZXRob2RzIiwiX2luaXREYXRhIiwiX2luaXRXYXRjaCIsIl9pbml0Q29tcHV0ZWQiLCJfaW5pdEV2ZW50cyIsIl9jb21waWxlIiwicXVlcnkiLCJtZXRob2RzIiwiX2RhdGEiLCJfcHJveHkiLCJ3YXRjaCIsIiR3YXRjaCIsImNvbXB1dGVkIiwiYXR0cnMiLCIkYXJndW1lbnRzIiwic3RhdGVtZW50SGFuZGxlciIsIiRvbiIsInJlZ2lzdGVyQ29tcG9uZW50RXZlbnRzIiwic291cmNlS2V5Iiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwiJHNldCIsIm9iaiIsIl9fb2JfXyIsIiRkZWxldGUiLCJleHBPckZuIiwiZXZlbnQiLCIkb2ZmIiwiY2JzIiwiJGVtaXQiLCIkb25jZSIsIiRuZXh0VGljayIsIm5leHRUaWNrIiwiX2FwcGx5RmlsdGVycyIsImZpbHRlcnNPYmoiLCJob29rIiwidGVtcEVsIiwiX2NvbnRlbnQiLCJleHRyYWN0Q29udGVudCIsInJlcGxhY2VyIiwiZmlyc3RDaGlsZCIsIm1lcmdlQXR0cnMiLCJ0cmFuc2NsdWRlIiwiY29udGVudHMiLCJnZXRBdHRyaWJ1dGUiLCJleHRyYWN0RnJhZ21lbnQiLCJyZXNvbHZlU2xvdHMiLCJhc0ZyYWdtZW50IiwicmF3Q29udGVudCIsInRyaW1Ob2RlIiwiZGl2IiwiaXNUcmltbWFibGUiLCJyZW1vdmVDaGlsZCIsIm9ic2VydmUiLCJhcnJheVByb3RvIiwiQXJyYXkiLCJhcnJheU1ldGhvZHMiLCJvYiIsImhhc093biIsIk9ic2VydmVyIiwiX19wcm90b19fIiwib2JzZXJ2ZUFycmF5Iiwid2FsayIsImNoaWxkT2IiLCJuZXdWYWwiLCJtZXRob2QiLCJvcmlnaW5hbCIsImluc2VydGVkIiwiYXJyeSIsIm9sZE5vZGUiLCJuZXdOb2RlIiwicGFyZW50Tm9kZSIsInJlcGxhY2VDaGlsZCIsInRvIiwiZnJvbSIsInVzZUNhcHR1cmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImN0eCIsIndyaXRhYmxlIiwiaXNPYmplY3QiLCJpbnNlcnRCZWZvcmUiLCJhZGRDbGFzcyIsImNscyIsImNsYXNzTGlzdCIsImFkZCIsInF1ZXJ5U2VsZWN0b3IiLCJtYWtlR2V0dGVyRm4iLCJmaXJzdFdvcmR0b1VwcGVyIiwic3RyIiwic3Vic3RyaW5nIiwidG9VcHBlckNhc2UiLCJsYXN0Q2hpbGQiLCJfIiwiY29udmVydCIsIl9hdHRyIiwiZ3VhcmRDb21wb25lbnRzIiwibWl4aW5zIiwibWl4aW5PcHRpb25zIiwibWVyZ2VGaWVsZCIsInN0cmF0Iiwic3RyYXRzIiwiZGVmYXVsdFN0cmF0Iiwic3BlY2lhbENoYXJSRSIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlQXNzZXRzIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJhc3NldHMiLCJhc3NldCIsImd1YXJkQXJyYXlBc3NldHMiLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsInJldCIsImNyZWF0ZWQiLCJyZWFkeSIsImF0dGFjaGVkIiwiZGV0YWNoZWQiLCJiZWZvcmVDb21waWxlIiwiY29tcGlsZWQiLCJiZWZvcmVEZXN0cm95IiwiZGVzdHJveWVkIiwiYWN0aXZhdGUiLCJldmVudHMiLCJkZXBzIiwiZGVwSWRzIiwiU2V0Iiwic2V0dGVyIiwiZXhwIiwicGFyc2VFeHByZXNzaW9uIiwicnVuIiwiaGFzIiwid2FpdGluZyIsImZsdXNoUXVldWUiLCJwdXNoV2F0Y2hlciIsIm9sZFZhbHVlIiwiY3VycmVudCIsInEiXSwibWFwcGluZ3MiOiJhQUdFLElBQUlBLEVBQTBCQyxPQUF5QixpQkFDdkRBLE9BQXlCLGlCQUN6QixTQUFrQ0MsRUFBU0MsSUFnUjNDLFNBQTJCRCxFQUFTQyxHQUNuQyxJQUFLQyxFQUFxQkYsS0FBYUcsRUFBcUJILEdBQzNELE9BRUQsSUFBSyxJQUFJSSxLQURURCxFQUFxQkgsSUFBVyxFQUNYQyxFQUNoQkksT0FBT0MsVUFBVUMsZUFBZUMsS0FBS1AsRUFBYUcsS0FDckRLLEVBQVVMLEdBQVlILEVBQVlHLElBR1YsS0FBcEJNLEdBQThDLElBQXJCQyxHQUM5QkMsSUF6UkRDLENBQWtCYixFQUFTQyxHQUN2QkgsR0FBeUJBLEVBQXdCRSxFQUFTQyxJQXVEL0QsSUFLSWEsRUFMQUMsR0FBbUIsRUFFbkJDLEVBQWlCLHVCQUNqQkMsRUFBb0IsSUFDcEJDLEVBQXVCLEdBR3ZCQyxFQUFvQixHQUVwQkMsRUFBd0IsR0FHNUIsU0FBU0MsRUFBaUJqQixHQUN6QixJQUFJa0IsRUFBS0MsRUFBaUJuQixHQUMxQixJQUFLa0IsRUFBSSxPQUFPRSxFQUNoQixJQUFJQyxFQUFLLFNBQVNDLEdBc0JqQixPQXJCSUosRUFBR0ssSUFBSUMsUUFDTkwsRUFBaUJHLElBQ3lDLElBQXpESCxFQUFpQkcsR0FBU0csUUFBUUMsUUFBUTFCLElBQzdDbUIsRUFBaUJHLEdBQVNHLFFBQVFFLEtBQUszQixJQUd4Q2UsRUFBb0IsQ0FBQ2YsR0FDckJVLEVBQXdCWSxJQUVhLElBQWxDSixFQUFHVSxTQUFTRixRQUFRSixJQUN2QkosRUFBR1UsU0FBU0QsS0FBS0wsS0FHbEJPLFFBQVFDLEtBQ1AsNEJBQ0NSLEVBQ0EsMEJBQ0F0QixHQUVGZSxFQUFvQixJQUVkSyxFQUFvQkUsSUFFeEJTLEVBQWdCLFNBQXVCQyxHQUMxQyxNQUFPLENBQ05DLGNBQWMsRUFDZEMsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT2YsRUFBb0JZLElBRTVCSSxJQUFLLFNBQVNDLEdBQ2JqQixFQUFvQlksR0FBUUssS0FJL0IsSUFBSyxJQUFJTCxLQUFRWixFQUVmbkIsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS2dCLEVBQXFCWSxJQUNqRCxNQUFUQSxHQUNTLE1BQVRBLEdBRUEvQixPQUFPcUMsZUFBZWpCLEVBQUlXLEVBQU1ELEVBQWNDLElBMkJoRCxPQXhCQVgsRUFBR2tCLEVBQUksU0FBUzNDLEdBR2YsTUFGa0IsVUFBZDRDLEdBQXVCQyxFQUFhLFdBQ3hDbEMsSUFDT2EsRUFBb0JtQixFQUFFM0MsR0FBUzhDLEtBQUtDLEdBQW9CLFNBQVNDLEdBRXZFLE1BREFELElBQ01DLEtBR1AsU0FBU0QsSUFDUnBDLElBQ2tCLFlBQWRpQyxJQUNFSyxFQUFtQmpELElBQ3ZCa0QsRUFBcUJsRCxHQUVHLElBQXJCVyxHQUE4QyxJQUFwQkQsR0FDN0JFLE9BS0phLEVBQUcwQixFQUFJLFNBQVNWLEVBQU9XLEdBRXRCLE9BRFcsRUFBUEEsSUFBVVgsRUFBUWhCLEVBQUdnQixJQUNsQmpCLEVBQW9CMkIsRUFBRVYsR0FBYyxFQUFQVyxJQUU5QjNCLEVBSVIsU0FBUzRCLEVBQWdCakQsR0FDeEIsSUFBSXVCLEVBQU0sQ0FFVDJCLHNCQUF1QixHQUN2QkMsc0JBQXVCLEdBQ3ZCQyxlQUFlLEVBQ2ZDLGVBQWUsRUFDZkMsaUJBQWtCLEdBQ2xCQyxNQUFPN0MsSUFBMEJWLEVBR2pDd0IsUUFBUSxFQUNSZ0MsT0FBUSxTQUFTQyxFQUFLQyxHQUNyQixRQUFZQyxJQUFSRixFQUFtQmxDLEVBQUk2QixlQUFnQixPQUN0QyxHQUFtQixtQkFBUkssRUFBb0JsQyxFQUFJNkIsY0FBZ0JLLE9BQ25ELEdBQW1CLGlCQUFSQSxFQUNmLElBQUssSUFBSUcsRUFBSSxFQUFHQSxFQUFJSCxFQUFJSSxPQUFRRCxJQUMvQnJDLEVBQUkyQixzQkFBc0JPLEVBQUlHLElBQU1GLEdBQVksa0JBQzdDbkMsRUFBSTJCLHNCQUFzQk8sR0FBT0MsR0FBWSxjQUVuREksUUFBUyxTQUFTTCxHQUNqQixRQUFZRSxJQUFSRixFQUFtQmxDLEVBQUk4QixlQUFnQixPQUN0QyxHQUFtQixpQkFBUkksRUFDZixJQUFLLElBQUlHLEVBQUksRUFBR0EsRUFBSUgsRUFBSUksT0FBUUQsSUFDL0JyQyxFQUFJNEIsc0JBQXNCTSxFQUFJRyxLQUFNLE9BQ2pDckMsRUFBSTRCLHNCQUFzQk0sSUFBTyxHQUV2Q00sUUFBUyxTQUFTTCxHQUNqQm5DLEVBQUkrQixpQkFBaUIzQixLQUFLK0IsSUFFM0JNLGtCQUFtQixTQUFTTixHQUMzQm5DLEVBQUkrQixpQkFBaUIzQixLQUFLK0IsSUFFM0JPLHFCQUFzQixTQUFTUCxHQUM5QixJQUFJUSxFQUFNM0MsRUFBSStCLGlCQUFpQjVCLFFBQVFnQyxHQUNuQ1EsR0FBTyxHQUFHM0MsRUFBSStCLGlCQUFpQmEsT0FBT0QsRUFBSyxJQUloREUsTUFBT0MsRUFDUEMsTUFBT0MsRUFDUEMsT0FBUSxTQUFTQyxHQUNoQixJQUFLQSxFQUFHLE9BQU9qQyxFQUNma0MsRUFBa0IvQyxLQUFLOEMsSUFFeEJFLGlCQUFrQixTQUFTRixHQUMxQkMsRUFBa0IvQyxLQUFLOEMsSUFFeEJHLG9CQUFxQixTQUFTSCxHQUM3QixJQUFJUCxFQUFNUSxFQUFrQmhELFFBQVErQyxHQUNoQ1AsR0FBTyxHQUFHUSxFQUFrQlAsT0FBT0QsRUFBSyxJQUk3Q1csS0FBTS9ELEVBQXFCZCxJQUc1QixPQURBVSxPQUF3QmlELEVBQ2pCcEMsRUFHUixJQUFJbUQsRUFBb0IsR0FDcEJsQyxFQUFZLE9BRWhCLFNBQVNDLEVBQWFxQyxHQUNyQnRDLEVBQVlzQyxFQUNaLElBQUssSUFBSWxCLEVBQUksRUFBR0EsRUFBSWMsRUFBa0JiLE9BQVFELElBQzdDYyxFQUFrQmQsR0FBR3hELEtBQUssS0FBTTBFLEdBSWxDLElBS0lDLEVBR0ExRSxFQUFXMkUsRUFSWDFFLEVBQWtCLEVBQ2xCQyxFQUFtQixFQUNuQnNDLEVBQXFCLEdBQ3JCOUMsRUFBdUIsR0FDdkJELEVBQXVCLEdBTTNCLFNBQVNtRixFQUFXQyxHQUVuQixPQURnQkEsRUFBSyxLQUFPQSxHQUNUQSxFQUFLQSxFQUd6QixTQUFTYixFQUFTQyxHQUNqQixHQUFrQixTQUFkOUIsRUFDSCxNQUFNLElBQUkyQyxNQUFNLDBDQUlqQixPQUZBeEUsRUFBbUIyRCxFQUNuQjdCLEVBQWEsVUE1TmUyQyxFQTZORHZFLEVBNU4zQnVFLEVBQWlCQSxHQUFrQixJQUM1QixJQUFJQyxTQUFRLFNBQVNDLEVBQVNDLEdBQ3BDLEdBQThCLG9CQUFuQkMsZUFDVixPQUFPRCxFQUFPLElBQUlKLE1BQU0sdUJBRXpCLElBQ0MsSUFBSTdELEVBQVUsSUFBSWtFLGVBQ2RDLEVBQWNyRSxFQUFvQnNFLEVBQUksR0FBSzlFLEVBQWlCLG1CQUNoRVUsRUFBUXFFLEtBQUssTUFBT0YsR0FBYSxHQUNqQ25FLEVBQVFzRSxRQUFVUixFQUNsQjlELEVBQVF1RSxLQUFLLE1BQ1osTUFBT2pELEdBQ1IsT0FBTzJDLEVBQU8zQyxHQUVmdEIsRUFBUXdFLG1CQUFxQixXQUM1QixHQUEyQixJQUF2QnhFLEVBQVF5RSxXQUNaLEdBQXVCLElBQW5CekUsRUFBUWtELE9BRVhlLEVBQ0MsSUFBSUosTUFBTSx1QkFBeUJNLEVBQWMscUJBRTVDLEdBQXVCLE1BQW5CbkUsRUFBUWtELE9BRWxCYyxTQUNNLEdBQXVCLE1BQW5CaEUsRUFBUWtELFFBQXFDLE1BQW5CbEQsRUFBUWtELE9BRTVDZSxFQUFPLElBQUlKLE1BQU0sdUJBQXlCTSxFQUFjLGlCQUNsRCxDQUVOLElBQ0MsSUFBSU8sRUFBU0MsS0FBS0MsTUFBTTVFLEVBQVE2RSxjQUMvQixNQUFPNUQsR0FFUixZQURBZ0QsRUFBT2hELEdBR1IrQyxFQUFRVSxTQXlMbUN0RCxNQUFLLFNBQVNzRCxHQUMzRCxJQUFLQSxFQUVKLE9BREF2RCxFQUFhLFFBQ04sS0FFUjFDLEVBQXVCLEdBQ3ZCOEMsRUFBcUIsR0FDckIvQyxFQUF1QmtHLEVBQU9JLEVBQzlCcEIsRUFBbUJnQixFQUFPSyxFQUUxQjVELEVBQWEsV0FDYixJQUFJNkQsRUFBVSxJQUFJakIsU0FBUSxTQUFTQyxFQUFTQyxHQUMzQ1IsRUFBYyxDQUNiTyxRQUFTQSxFQUNUQyxPQUFRQSxNQUdWbEYsRUFBWSxHQWNaLE9BVEN5QyxFQUphLEdBT0MsWUFBZE4sR0FDcUIsSUFBckJqQyxHQUNvQixJQUFwQkQsR0FFQUUsSUFFTThGLEtBNVBULElBQTZCbEIsRUErUTdCLFNBQVN0QyxFQUFxQmxELEdBQ3hCRSxFQUFxQkYsSUFHekJHLEVBQXFCSCxJQUFXLEVBQ2hDVSxJQTdSRixTQUFnQ1YsR0FDL0IsSUFBSTJHLEVBQVNDLFNBQVNDLGNBQWMsVUFDcENGLEVBQU9HLFFBQVUsUUFDakJILEVBQU9JLElBQU12RixFQUFvQnNFLEVBQUksR0FBSzlGLEVBQVUsSUFBTWdCLEVBQWlCLGlCQUUzRTRGLFNBQVNJLEtBQUtDLFlBQVlOLEdBeVJ6Qk8sQ0FBdUJsSCxJQUp2QmlELEVBQW1CakQsSUFBVyxFQVFoQyxTQUFTWSxJQUNSaUMsRUFBYSxTQUNiLElBQUlzRSxFQUFXaEMsRUFFZixHQURBQSxFQUFjLEtBQ1RnQyxFQUNMLEdBQUlwRyxFQUlIMEUsUUFBUUMsVUFDTjVDLE1BQUssV0FDTCxPQUFPNkIsRUFBUzVELE1BRWhCK0IsTUFDQSxTQUFTc0UsR0FDUkQsRUFBU3pCLFFBQVEwQixNQUVsQixTQUFTcEUsR0FDUm1FLEVBQVN4QixPQUFPM0MsVUFHYixDQUNOLElBQUlxRSxFQUFrQixHQUN0QixJQUFLLElBQUkvQixLQUFNN0UsRUFDVkosT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0MsRUFBVzZFLElBQ25EK0IsRUFBZ0J0RixLQUFLc0QsRUFBV0MsSUFHbEM2QixFQUFTekIsUUFBUTJCLElBSW5CLFNBQVMxQyxFQUFTMkMsR0FDakIsR0FBa0IsVUFBZDFFLEVBQ0gsTUFBTSxJQUFJMkMsTUFBTSwyQ0FHakIsSUFBSWdDLEVBQ0F2RCxFQUNBd0QsRUFDQUMsRUFDQXJILEVBRUosU0FBU3NILEVBQWlCQyxHQVV6QixJQVRBLElBQUlOLEVBQWtCLENBQUNNLEdBQ25CQyxFQUF1QixHQUV2QkMsRUFBUVIsRUFBZ0JTLEtBQUksU0FBU3hDLEdBQ3hDLE1BQU8sQ0FDTnlDLE1BQU8sQ0FBQ3pDLEdBQ1JBLEdBQUlBLE1BR0N1QyxFQUFNNUQsT0FBUyxHQUFHLENBQ3hCLElBQUkrRCxFQUFZSCxFQUFNSSxNQUNsQjdILEVBQVc0SCxFQUFVMUMsR0FDckJ5QyxFQUFRQyxFQUFVRCxNQUV0QixJQURBTixFQUFTbEcsRUFBaUJuQixNQUNYcUgsRUFBTzlGLElBQUk2QixjQUExQixDQUNBLEdBQUlpRSxFQUFPOUYsSUFBSThCLGNBQ2QsTUFBTyxDQUNOeUUsS0FBTSxnQkFDTkgsTUFBT0EsRUFDUDNILFNBQVVBLEdBR1osR0FBSXFILEVBQU85RixJQUFJZ0MsTUFDZCxNQUFPLENBQ051RSxLQUFNLGFBQ05ILE1BQU9BLEVBQ1AzSCxTQUFVQSxHQUdaLElBQUssSUFBSTRELEVBQUksRUFBR0EsRUFBSXlELEVBQU81RixRQUFRb0MsT0FBUUQsSUFBSyxDQUMvQyxJQUFJbUUsRUFBV1YsRUFBTzVGLFFBQVFtQyxHQUMxQm9FLEVBQVM3RyxFQUFpQjRHLEdBQzlCLEdBQUtDLEVBQUwsQ0FDQSxHQUFJQSxFQUFPekcsSUFBSTRCLHNCQUFzQm5ELEdBQ3BDLE1BQU8sQ0FDTjhILEtBQU0sV0FDTkgsTUFBT0EsRUFBTU0sT0FBTyxDQUFDRixJQUNyQi9ILFNBQVVBLEVBQ1YrSCxTQUFVQSxJQUcrQixJQUF2Q2QsRUFBZ0J2RixRQUFRcUcsS0FDeEJDLEVBQU96RyxJQUFJMkIsc0JBQXNCbEQsSUFDL0J3SCxFQUFxQk8sS0FDekJQLEVBQXFCTyxHQUFZLElBQ2xDRyxFQUFZVixFQUFxQk8sR0FBVyxDQUFDL0gsYUFHdkN3SCxFQUFxQk8sR0FDNUJkLEVBQWdCdEYsS0FBS29HLEdBQ3JCTixFQUFNOUYsS0FBSyxDQUNWZ0csTUFBT0EsRUFBTU0sT0FBTyxDQUFDRixJQUNyQjdDLEdBQUk2QyxTQUtQLE1BQU8sQ0FDTkQsS0FBTSxXQUNOOUgsU0FBVXVILEVBQ1ZOLGdCQUFpQkEsRUFDakJPLHFCQUFzQkEsR0FJeEIsU0FBU1UsRUFBWUMsRUFBR0MsR0FDdkIsSUFBSyxJQUFJeEUsRUFBSSxFQUFHQSxFQUFJd0UsRUFBRXZFLE9BQVFELElBQUssQ0FDbEMsSUFBSXlFLEVBQU9ELEVBQUV4RSxJQUNZLElBQXJCdUUsRUFBRXpHLFFBQVEyRyxJQUFjRixFQUFFeEcsS0FBSzBHLElBN0VyQ25CLEVBQVVBLEdBQVcsR0FtRnJCLElBQUlNLEVBQXVCLEdBQ3ZCUCxFQUFrQixHQUNsQnFCLEVBQWdCLEdBRWhCQyxFQUF3QixXQUMzQjFHLFFBQVFDLEtBQ1AsNEJBQThCa0YsRUFBT2hILFNBQVcseUJBSWxELElBQUssSUFBSWtGLEtBQU03RSxFQUNkLEdBQUlKLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtDLEVBQVc2RSxHQUFLLENBR3hELElBQUk4QixFQUZKaEgsRUFBV2lGLEVBQVdDLEdBWXRCLElBQUlzRCxHQUFhLEVBQ2JDLEdBQVUsRUFDVkMsR0FBWSxFQUNaQyxFQUFZLEdBSWhCLFFBZkMzQixFQURHM0csRUFBVTZFLEdBQ0pvQyxFQUFpQnRILEdBRWpCLENBQ1I4SCxLQUFNLFdBQ045SCxTQUFVa0YsSUFRRHlDLFFBQ1ZnQixFQUFZLHlCQUEyQjNCLEVBQU9XLE1BQU1pQixLQUFLLFNBRWxENUIsRUFBT2MsTUFDZCxJQUFLLGdCQUNBWixFQUFRMkIsWUFBWTNCLEVBQVEyQixXQUFXN0IsR0FDdENFLEVBQVE0QixpQkFDWk4sRUFBYSxJQUFJckQsTUFDaEIsb0NBQ0M2QixFQUFPaEgsU0FDUDJJLElBRUgsTUFDRCxJQUFLLFdBQ0F6QixFQUFRMkIsWUFBWTNCLEVBQVEyQixXQUFXN0IsR0FDdENFLEVBQVE0QixpQkFDWk4sRUFBYSxJQUFJckQsTUFDaEIsMkNBQ0M2QixFQUFPaEgsU0FDUCxPQUNBZ0gsRUFBT2UsU0FDUFksSUFFSCxNQUNELElBQUssYUFDQXpCLEVBQVE2QixjQUFjN0IsRUFBUTZCLGFBQWEvQixHQUMxQ0UsRUFBUThCLG1CQUNaUixFQUFhLElBQUlyRCxNQUNoQixtQkFBcUJuRixFQUFXLG1CQUFxQjJJLElBRXZELE1BQ0QsSUFBSyxXQUNBekIsRUFBUStCLFlBQVkvQixFQUFRK0IsV0FBV2pDLEdBQzNDeUIsR0FBVSxFQUNWLE1BQ0QsSUFBSyxXQUNBdkIsRUFBUWdDLFlBQVloQyxFQUFRZ0MsV0FBV2xDLEdBQzNDMEIsR0FBWSxFQUNaLE1BQ0QsUUFDQyxNQUFNLElBQUl2RCxNQUFNLG9CQUFzQjZCLEVBQU9jLE1BRS9DLEdBQUlVLEVBRUgsT0FEQS9GLEVBQWEsU0FDTjRDLFFBQVFFLE9BQU9pRCxHQUV2QixHQUFJQyxFQUdILElBQUt6SSxLQUZMc0ksRUFBY3RJLEdBQVlLLEVBQVVMLEdBQ3BDa0ksRUFBWWpCLEVBQWlCRCxFQUFPQyxpQkFDbkJELEVBQU9RLHFCQUV0QnZILE9BQU9DLFVBQVVDLGVBQWVDLEtBQy9CNEcsRUFBT1EscUJBQ1B4SCxLQUdJd0gsRUFBcUJ4SCxLQUN6QndILEVBQXFCeEgsR0FBWSxJQUNsQ2tJLEVBQ0NWLEVBQXFCeEgsR0FDckJnSCxFQUFPUSxxQkFBcUJ4SCxLQUs1QjBJLElBQ0hSLEVBQVlqQixFQUFpQixDQUFDRCxFQUFPaEgsV0FDckNzSSxFQUFjdEksR0FBWXVJLEdBTTdCLElBd0JJckUsRUF4QkFpRixFQUE4QixHQUNsQyxJQUFLdkYsRUFBSSxFQUFHQSxFQUFJcUQsRUFBZ0JwRCxPQUFRRCxJQUN2QzVELEVBQVdpSCxFQUFnQnJELEdBRTFCekMsRUFBaUJuQixJQUNqQm1CLEVBQWlCbkIsR0FBVXVCLElBQUk2QixlQUUvQmtGLEVBQWN0SSxLQUFjdUksR0FFNUJZLEVBQTRCeEgsS0FBSyxDQUNoQzBGLE9BQVFySCxFQUNSb0osYUFBY2pJLEVBQWlCbkIsR0FBVXVCLElBQUk2QixnQkFNaERYLEVBQWEsV0FDYnhDLE9BQU9vSixLQUFLdkosR0FBc0J3SixTQUFRLFNBQVMxSixJQUNaLElBQWxDRSxFQUFxQkYsSUEzaEIzQixTQUF5QkEsVUFDakIySixnQkFBZ0IzSixHQTJoQnJCNEosQ0FBZ0I1SixNQU1sQixJQURBLElBcUNJNkosRUFDQUMsRUF0Q0FqQyxFQUFRUixFQUFnQjBDLFFBQ3JCbEMsRUFBTTVELE9BQVMsR0FHckIsR0FGQTdELEVBQVd5SCxFQUFNSSxNQUNqQlIsRUFBU2xHLEVBQWlCbkIsR0FDMUIsQ0FFQSxJQUFJNkUsRUFBTyxHQUdQK0UsRUFBa0J2QyxFQUFPOUYsSUFBSStCLGlCQUNqQyxJQUFLOEQsRUFBSSxFQUFHQSxFQUFJd0MsRUFBZ0IvRixPQUFRdUQsS0FDdkNELEVBQUt5QyxFQUFnQnhDLElBQ2xCdkMsR0FjSixJQVpBL0QsRUFBcUJkLEdBQVk2RSxFQUdqQ3dDLEVBQU85RixJQUFJQyxRQUFTLFNBR2JMLEVBQWlCbkIsVUFHakJ3SCxFQUFxQnhILEdBR3ZCb0gsRUFBSSxFQUFHQSxFQUFJQyxFQUFPekYsU0FBU2lDLE9BQVF1RCxJQUFLLENBQzVDLElBQUl5QyxFQUFRMUksRUFBaUJrRyxFQUFPekYsU0FBU3dGLElBQ3hDeUMsS0FDTDNGLEVBQU0yRixFQUFNcEksUUFBUUMsUUFBUTFCLEtBQ2pCLEdBQ1Y2SixFQUFNcEksUUFBUTBDLE9BQU9ELEVBQUssS0FRN0IsSUFBS2xFLEtBQVl3SCxFQUNoQixHQUNDdkgsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS29ILEVBQXNCeEgsS0FFM0RxSCxFQUFTbEcsRUFBaUJuQixJQUd6QixJQURBMEosRUFBNkJsQyxFQUFxQnhILEdBQzdDb0gsRUFBSSxFQUFHQSxFQUFJc0MsRUFBMkI3RixPQUFRdUQsSUFDbERxQyxFQUFhQyxFQUEyQnRDLElBQ3hDbEQsRUFBTW1ELEVBQU96RixTQUFTRixRQUFRK0gsS0FDbkIsR0FBR3BDLEVBQU96RixTQUFTdUMsT0FBT0QsRUFBSyxHQVk5QyxJQUFLbEUsS0FMTHlDLEVBQWEsU0FFYjdCLEVBQWlCb0UsRUFHQXNELEVBQ1pySSxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLa0ksRUFBZXRJLEtBQ3ZEOEosRUFBUTlKLEdBQVlzSSxFQUFjdEksSUFLcEMsSUFBSStKLEVBQVEsS0FDWixJQUFLL0osS0FBWXdILEVBQ2hCLEdBQ0N2SCxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLb0gsRUFBc0J4SCxLQUUzRHFILEVBQVNsRyxFQUFpQm5CLElBQ2QsQ0FDWDBKLEVBQTZCbEMsRUFBcUJ4SCxHQUNsRCxJQUFJZ0ssRUFBWSxHQUNoQixJQUFLcEcsRUFBSSxFQUFHQSxFQUFJOEYsRUFBMkI3RixPQUFRRCxJQUdsRCxHQUZBNkYsRUFBYUMsRUFBMkI5RixHQUN4Q3VELEVBQUtFLEVBQU85RixJQUFJMkIsc0JBQXNCdUcsR0FDOUIsQ0FDUCxJQUErQixJQUEzQk8sRUFBVXRJLFFBQVF5RixHQUFZLFNBQ2xDNkMsRUFBVXJJLEtBQUt3RixHQUdqQixJQUFLdkQsRUFBSSxFQUFHQSxFQUFJb0csRUFBVW5HLE9BQVFELElBQUssQ0FDdEN1RCxFQUFLNkMsRUFBVXBHLEdBQ2YsSUFDQ3VELEVBQUd1QyxHQUNGLE1BQU85RyxHQUNKc0UsRUFBUStDLFdBQ1gvQyxFQUFRK0MsVUFBVSxDQUNqQm5DLEtBQU0saUJBQ045SCxTQUFVQSxFQUNWa0ssYUFBY1IsRUFBMkI5RixHQUN6Q21HLE1BQU9uSCxJQUdKc0UsRUFBUWlELGVBQ1BKLElBQU9BLEVBQVFuSCxLQVMxQixJQUFLZ0IsRUFBSSxFQUFHQSxFQUFJdUYsRUFBNEJ0RixPQUFRRCxJQUFLLENBQ3hELElBQUl5RSxFQUFPYyxFQUE0QnZGLEdBQ3ZDNUQsRUFBV3FJLEVBQUtoQixPQUNoQnRHLEVBQW9CLENBQUNmLEdBQ3JCLElBQ0NvQixFQUFvQnBCLEdBQ25CLE1BQU80QyxHQUNSLEdBQWlDLG1CQUF0QnlGLEVBQUtlLGFBQ2YsSUFDQ2YsRUFBS2UsYUFBYXhHLEdBQ2pCLE1BQU93SCxHQUNKbEQsRUFBUStDLFdBQ1gvQyxFQUFRK0MsVUFBVSxDQUNqQm5DLEtBQU0sb0NBQ045SCxTQUFVQSxFQUNWK0osTUFBT0ssRUFDUEMsY0FBZXpILElBR1pzRSxFQUFRaUQsZUFDUEosSUFBT0EsRUFBUUssR0FFaEJMLElBQU9BLEVBQVFuSCxRQUdqQnNFLEVBQVErQyxXQUNYL0MsRUFBUStDLFVBQVUsQ0FDakJuQyxLQUFNLHNCQUNOOUgsU0FBVUEsRUFDVitKLE1BQU9uSCxJQUdKc0UsRUFBUWlELGVBQ1BKLElBQU9BLEVBQVFuSCxJQU94QixPQUFJbUgsR0FDSHRILEVBQWEsUUFDTjRDLFFBQVFFLE9BQU93RSxLQUd2QnRILEVBQWEsUUFDTixJQUFJNEMsU0FBUSxTQUFTQyxHQUMzQkEsRUFBUTJCLE9BS1YsSUFBSTlGLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CcEIsR0FHNUIsR0FBR21CLEVBQWlCbkIsR0FDbkIsT0FBT21CLEVBQWlCbkIsR0FBVXNLLFFBR25DLElBQUlqRCxFQUFTbEcsRUFBaUJuQixHQUFZLENBQ3pDNEQsRUFBRzVELEVBQ0h5RSxHQUFHLEVBQ0g2RixRQUFTLEdBQ1QvSSxJQUFLMEIsRUFBZ0JqRCxHQUNyQnlCLFNBQVVULEVBQXdCRCxFQUFtQkEsRUFBb0IsR0FBSUMsR0FDN0VZLFNBQVUsSUFVWCxPQU5Ba0ksRUFBUTlKLEdBQVVJLEtBQUtpSCxFQUFPaUQsUUFBU2pELEVBQVFBLEVBQU9pRCxRQUFTckosRUFBaUJqQixJQUdoRnFILEVBQU81QyxHQUFJLEVBR0o0QyxFQUFPaUQsUUFLZmxKLEVBQW9CbUosRUFBSVQsRUFHeEIxSSxFQUFvQmdGLEVBQUlqRixFQUd4QkMsRUFBb0JvSixFQUFJLFNBQVNGLEVBQVN0SSxFQUFNeUksR0FDM0NySixFQUFvQnNKLEVBQUVKLEVBQVN0SSxJQUNsQy9CLE9BQU9xQyxlQUFlZ0ksRUFBU3RJLEVBQU0sQ0FBRUUsWUFBWSxFQUFNQyxJQUFLc0ksS0FLaEVySixFQUFvQnVKLEVBQUksU0FBU0wsR0FDWCxvQkFBWE0sUUFBMEJBLE9BQU9DLGFBQzFDNUssT0FBT3FDLGVBQWVnSSxFQUFTTSxPQUFPQyxZQUFhLENBQUV4SSxNQUFPLFdBRTdEcEMsT0FBT3FDLGVBQWVnSSxFQUFTLGFBQWMsQ0FBRWpJLE9BQU8sS0FRdkRqQixFQUFvQjJCLEVBQUksU0FBU1YsRUFBT1csR0FFdkMsR0FEVSxFQUFQQSxJQUFVWCxFQUFRakIsRUFBb0JpQixJQUMvQixFQUFQVyxFQUFVLE9BQU9YLEVBQ3BCLEdBQVcsRUFBUFcsR0FBOEIsaUJBQVZYLEdBQXNCQSxHQUFTQSxFQUFNeUksV0FBWSxPQUFPekksRUFDaEYsSUFBSTBJLEVBQUs5SyxPQUFPK0ssT0FBTyxNQUd2QixHQUZBNUosRUFBb0J1SixFQUFFSSxHQUN0QjlLLE9BQU9xQyxlQUFleUksRUFBSSxVQUFXLENBQUU3SSxZQUFZLEVBQU1HLE1BQU9BLElBQ3RELEVBQVBXLEdBQTRCLGlCQUFUWCxFQUFtQixJQUFJLElBQUk0SSxLQUFPNUksRUFBT2pCLEVBQW9Cb0osRUFBRU8sRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU81SSxFQUFNNEksSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSM0osRUFBb0IrSixFQUFJLFNBQVM5RCxHQUNoQyxJQUFJb0QsRUFBU3BELEdBQVVBLEVBQU95RCxXQUM3QixXQUF3QixPQUFPekQsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQWpHLEVBQW9Cb0osRUFBRUMsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUnJKLEVBQW9Cc0osRUFBSSxTQUFTVSxFQUFRQyxHQUFZLE9BQU9wTCxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLZ0wsRUFBUUMsSUFHekdqSyxFQUFvQnNFLEVBQUksR0FHeEJ0RSxFQUFvQmlGLEVBQUksV0FBYSxPQUFPekYsR0FJckNLLEVBQWlCLGdCQUFqQkEsQ0FBa0NHLEVBQW9Ca0ssRUFBSSxpQixxR0Mvd0JuREMsUUFBVCxTQUFpQkMsRUFBSUMsR0FFbkJDLEVBQVlELEVBQUlELElBQ2JDLEVBQUdFLGlCQXFDZixTQUFTQyxFQUFnQkMsRUFBT0wsR0FDNUJLLEVBQU12QyxTQUFRLFNBQUF3QyxHQUNMSixFQUFZSSxFQUFNTixJQUNmTSxFQUFLSCxpQkFDTEMsRUFBZ0JFLEVBQUtDLFdBQVlQLE1BeENyQ0ksQ0FBZ0JILEVBQUdNLFdBQVlQLEdBTXZDLElBQUtRLEVBQVMsQ0FDVixJQUFJQyxTQUFLQyxTQUdULElBRkFGLEdBQVUsRUFpUWxCLFNBQXlCRyxHQUNyQkEsRUFBSTdDLFNBQVEsU0FBQWtCLEdBQ0hBLEVBQUU0QixJQUFJQyxXQUNQN0IsRUFBRTRCLElBQUlDLFNBQVcsUUFHekJGLEVBQUlHLE1BQUssU0FBQ25FLEVBQUdDLEdBQ1QsT0FBT0EsRUFBRWdFLElBQUlDLFNBQVdsRSxFQUFFaUUsSUFBSUMsWUF2UTlCRSxDQUFnQkosR0FDVEEsRUFBSXRJLFFBQ1BxSSxFQUFhQyxFQUFJSyxTQUNqQlAsRUFBTSxJQUFJUSxVQUFVUCxFQUFZQSxFQUFXVixLQUN2Q2tCLFFBQ0pSLEVBQVdWLEdBQUdtQixZQUFZaEwsS0FBS3NLLEdBRW5DRCxHQUFVLEVBQ1ZSLEVBQUdvQixVQUFVLFlBRWJDLFlBQVcsWUFrUW5CLFNBQWtCckIsR0FDZCxJQUFNc0IsRUFBT3RHLFNBQVNzRyxLQUNoQkMsRUFBV0QsRUFBS0MsU0FDaEJDLEVBQU94QixFQUFHbUIsWUFDWk0sU0FDRUMsRUFBTyxHQUNUakIsU0FFSixLQUFPZSxFQUFLbkosUUFDUm9JLEVBQU1lLEVBQUtSLFFBQ1hTLEVBQU9oQixFQUFJQyxXQUFXZSxLQUVqQkYsRUFBUzNNLEtBQUswTSxFQUFNYixFQUFJUixLQUFnQixVQUFUd0IsR0FBNkIsU0FBVEEsRUFHcERDLEVBQUt2TCxLQUFLc0ssR0FGVkEsRUFBSWtCLFlBTVozQixFQUFHbUIsWUFBSCxVQUFxQk8sR0FDckJBLEVBQUtySixPQUFTLEVBclJOdUosQ0FBUzVCLEdBQ1RBLEVBQUdvQixVQUFVLGVBQ2QsSyxFQXVSS1MsYUFBVCxTQUFzQjdCLEVBQUlDLEVBQUk2QixHQUNqQyxJQUFNQyxFQUFhL0IsRUFBR2dDLFNBQVNELFdBQ3pCRSxFQUFRLEdBQ1ZDLFNBQU1yTCxTQUFPTCxTQUNKL0IsT0FBT29KLEtBQUtpRSxHQUNwQmhFLFNBQVEsU0FBQTJCLEdBQ1RqSixFQUFPc0wsRUFBYXJDLEdBQ3BCeUMsRUFBTyxDQUNIMUwsT0FDQTJMLEtBQU0zTCxHQUU4QixRQUFuQ0ssR0FBUSxJQUFBdUwsYUFBWW5DLEVBQUl6SixLQUV6QjBMLEVBQUtHLFNBQVUsRUFDZkgsRUFBS0ksSUFBTUosRUFBS0ssV0FBYTFMLEdBQ1UsUUFBL0JBLEdBQVEsSUFBQTJMLFNBQVF2QyxFQUFJekosTUFFNUIwTCxFQUFLSSxJQUFNekwsR0FFZm9MLEVBQU05TCxLQUFLK0wsTUFHZmxDLEVBQUd5QyxPQUFTLEdBQ1pSLEVBQU1uRSxTQUFRLFNBQUFvRSxHQUFRLElBQ2JDLEVBQXNCRCxFQUF0QkMsS0FBc0JELEVBQWhCSSxJQUFnQkosRUFBWHhHLFFBQ2hCc0UsRUFBR3lDLE9BQU9OLEdBQVFELEVBRWRBLEVBQUtHLFFBQ0RyQyxFQUFHMEMsVUFDSC9CLEVBQUl4SyxLQUFLLENBQ0w2SixLQUNBeEosS0FBTSxPQUNOb0ssSUFBS21CLEVBQVdHLEtBQ2hCQSxVQUlSLElBQUFTLGdCQUFlM0MsRUFBSWtDLEVBQUtDLEtBQU1ELEVBQUtJLFNBL1YvQyxJLEVBQUEsMEIsb0NBQ0EsNEJBQ0EseUJBR0EsSUFBTTNCLEVBQU0sR0FFUkgsR0FBVSxFQWdDZCxTQUFTTixFQUFZSSxFQUFNTixHQUN2QixJQUFNMUQsRUFBT2dFLEVBQUtzQyxTQUNsQixPQUFZLEdBQVJ0RyxFQXlCUixTQUF3QmdFLEVBQU1OLEdBQzFCLElBQU0rQixFQUFhL0IsRUFBR2dDLFNBQVNELFdBQ3pCYyxFQUFNdkMsRUFBS3dDLFFBQVFDLGNBQ3pCLEdBQUtDLEVBQVlDLEtBQUtKLElBQVNLLEVBQWNELEtBQUtKLElBYTNDLEdBQVksU0FBUkEsRUFDUGxDLEVBQUl4SyxLQUFLLENBQ0w2SixLQUNBQyxHQUFJSyxFQUNKNkMsU0FBS2hMLEVBQ0wzQixLQUFNLE9BQ05pTCxVQUFNdEosRUFDTmlMLFdBQVksR0FDWnhDLElBQUttQixFQUFXc0IsWUFFakIsR0FBSS9DLEVBQUtnRCxnQkFBaUIsQ0FDN0IsSUFBSUMsU0FDQUMsR0FBUSxFQTZGWixPQTVGYyxJQUFBQyxTQUFRbkQsRUFBS29ELFlBQ3JCNUYsU0FBUSxTQUFDMkQsR0FDWCxJQUFNakwsRUFBT2lMLEVBQUtqTCxLQUFLbU4sT0FDakI5TSxFQUFRNEssRUFBSzVLLE1BQU04TSxPQUN6QixHQUFJQyxFQUFLWCxLQUFLek0sR0FDVjhKLEVBQUt1RCxnQkFBZ0JyTixHQUNyQm1LLEVBQUl4SyxLQUFLLENBQ0w2SixLQUNBQyxHQUFJSyxFQUNKNkMsSUFBSzNNLEVBQUtzTixRQUFRRixFQUFNLElBQ3hCcE4sS0FBTSxLQUNOaUwsS0FBTWpMLEVBQ040TSxXQUFZdk0sRUFDWitKLElBQUttQixFQUFXZ0MsVUFFakIsR0FBSUMsRUFBT2YsS0FBS3pNLEdBQU8sQ0FDMUI4SixFQUFLdUQsZ0JBQWdCck4sR0FFckIsSUFBTXlOLEVBQVNwTixFQUFNcU4sTUFBTSxLQUNyQnhDLEVBQU8sQ0FDVDFCLEtBQ0FDLEdBQUlLLEVBQ0o2QyxJQUFLM00sRUFBS3NOLFFBQVFFLEVBQVEsSUFDMUJ4TixLQUFNLE9BQ05pTCxLQUFNakwsRUFDTm9LLElBQUttQixFQUFXckMsTUFHcEIsR0FBSXVFLEVBQU81TCxPQUFTLEVBQUcsQ0FDbkIsSUFBTStLLEVBQWFhLEVBQU9qRCxRQUNwQm1ELEVBQVUsR0FDaEJGLEVBQU9uRyxTQUFRLFNBQUFqSCxHQUNYc04sRUFBUWhPLEtBQUssQ0FDVEssS0FBTUssRUFBTThNLFlBSXBCakMsRUFBSzBCLFdBQWFBLEVBQ2xCMUIsRUFBS3lDLFFBQVVBLE9BRWZ6QyxFQUFLMEIsV0FBYXZNLEVBR3RCOEosRUFBSXhLLEtBQUt1TCxRQUNOLEdBQUk2QixFQUFVL00sRUFBSzROLE1BQU1DLEdBQVksQ0FDeEMsR0FBWSxVQUFSN04sRUFBa0IsQ0FDbEI4SixFQUFLdUQsZ0JBQWdCck4sR0FDckIsSUFBTXlOLEVBQVNwTixFQUFNcU4sTUFBTSxLQUNyQnhDLEVBQU8sQ0FDVDFCLEtBQ0FDLEdBQUlLLEVBQ0o2QyxJQUFLM00sRUFBS3NOLFFBQVFFLEVBQVEsSUFDMUJ4TixLQUFNLE9BQ05pTCxLQUFNakwsRUFDTm9LLElBQUttQixFQUFXdUMsTUFHcEIsR0FBSUwsRUFBTzVMLE9BQVMsRUFBRyxDQUNuQixJQUFNK0ssRUFBYWEsRUFBT2pELFFBQ3BCbUQsRUFBVSxHQUNoQkYsRUFBT25HLFNBQVEsU0FBQWpILEdBQ1hzTixFQUFRaE8sS0FBSyxDQUNUSyxLQUFNSyxFQUFNOE0sWUFJcEJqQyxFQUFLMEIsV0FBYUEsRUFDbEIxQixFQUFLeUMsUUFBVUEsT0FFZnpDLEVBQUswQixXQUFhdk0sRUFHdEI4SixFQUFJeEssS0FBS3VMLE9BQ08sV0FBVGxMLElBQ1A4SixFQUFLdUQsZ0JBQWdCck4sR0FFckJtSyxFQUFJeEssS0FBSyxDQUNMNkosS0FDQUMsR0FBSUssRUFDSjZDLFNBQUtoTCxFQUNMM0IsS0FBTUEsRUFBS3NOLFFBQVEsTUFBTyxJQUMxQnJDLEtBQU1qTCxFQUNONE0sV0FBWXZNLEVBQ1orSixJQUFLbUIsRUFBV3dCLEVBQVEsT0FJcEIsU0FBUi9NLElBQ0FnTixHQUFRLE9BSWJBLFFBckhIeEQsRUFBR2dDLFNBQVN1QyxXQUFXMUIsSUFDdkJsQyxFQUFJeEssS0FBSyxDQUNMNkosS0FDQUMsR0FBSUssRUFDSjlKLEtBQU0sWUFDTjRNLFdBQVlQLEVBQ1pqQyxJQUFLbUIsRUFBV3lDLFVBQ2hCQyxVQUFXLENBQ1BDLFNBQVMsS0FwQ2RDLENBQWVyRSxFQUFNTixHQUNiLEdBQVIxRCxFQW9KZixTQUF5QmdFLEVBQU1OLEdBQzNCLElBQU00RSxFQXFCVixTQUFtQk4sRUFBTXRFLEdBQ3JCLElBQUk2RSxFQUFRLEVBQ1JDLEVBQVksRUFDWlYsU0FDRVEsRUFBUyxHQUVmLEtBQU9SLEVBQVFXLEVBQU1DLEtBQUtWLEtBQ3RCTyxFQUFRVCxFQUFNUyxPQUVGQyxHQUNSRixFQUFPek8sS0FBSyxDQUNSVSxNQUFPeU4sRUFBS25HLE1BQU0yRyxFQUFXRCxLQUlyQ0QsRUFBT3pPLEtBQUssQ0FDUlUsTUFBT3VOLEVBQU0sR0FDYnZCLEtBQUssSUFFVGlDLEVBQVlELEVBQVFULEVBQU0sR0FBRy9MLE9BRzdCeU0sRUFBWVIsRUFBS2pNLFFBQ2pCdU0sRUFBT3pPLEtBQUssQ0FDUlUsTUFBT3lOLEVBQUtuRyxNQUFNMkcsS0FHMUIsT0FBT0YsRUFoRFFLLENBQVUzRSxFQUFLNEUsV0FDOUIsSUFBS04sRUFDRCxPQUdKLElBQU1PLEVBQU9uSyxTQUFTb0sseUJBQ2xCbkYsU0FDSjJFLEVBQU85RyxTQUFRLFNBQUF1SCxHQUNYcEYsRUFBS29GLEVBQU14QyxJQTJDbkIsU0FBMEJ3QyxFQUFPckYsR0FDN0IsSUFBTStCLEVBQWEvQixFQUFHZ0MsU0FBU0QsV0FDekI5QixFQUFLakYsU0FBU3NLLGVBQWUsS0FDbkMsR0FBSUQsRUFBTTNFLFdBQ04sT0FHSixJQUFNdUQsRUFBU29CLEVBQU14TyxNQUFNcU4sTUFBTSxLQVFqQyxHQVBBbUIsRUFBTTNFLFdBQWEsQ0FDZlYsS0FDQUMsS0FDQXpKLEtBQU0sT0FDTm9LLElBQUttQixFQUFXdUMsTUFHaEJMLEVBQU81TCxPQUFTLEVBQUcsQ0FDbkIsSUFBTXhCLEVBQVFvTixFQUFPakQsUUFDZm1ELEVBQVUsR0FFaEJGLEVBQU9uRyxTQUFRLFNBQUFqSCxHQUNYc04sRUFBUWhPLEtBQUssQ0FDVEssS0FBTUssRUFBTThNLFlBSXBCMEIsRUFBTTNFLFdBQVcwQyxXQUFhdk0sRUFBTThNLE9BQ3BDMEIsRUFBTTNFLFdBQVd5RCxRQUFVQSxPQUUzQmtCLEVBQU0zRSxXQUFXMEMsV0FBYWlDLEVBQU14TyxNQUFNOE0sT0FHOUMsT0FBTzFELEVBMUVjc0YsQ0FBaUJGLEVBQU9yRixHQUFNaEYsU0FBU3NLLGVBQWVELEVBQU14TyxPQUM3RXNPLEVBQUs5SixZQUFZNEUsR0FDYm9GLEVBQU14QyxLQUNObEMsRUFBSXhLLEtBQUtrUCxFQUFNM0UsZUFLdkI3RyxRQUFRQyxVQUFVNUMsTUFBSyxZQUNuQixJQUFBNE0sU0FBUXhELEVBQU02RSxNQXJLUEssQ0FBZ0JsRixFQUFNTixRQUQxQixFQWdCWCxJQUFNNEQsRUFBTyxhQUNQUyxFQUFZLHlCQUNaTCxFQUFTLGVBQ1RlLEVBQVEsaURBQ1IvQixFQUFjLG1LQUNkRSxFQUFnQiwrQix1R0MzREV1QyxFQUp4QixJQUFJQyxFQUFNLEVBSUssU0FBU0QsSUFDcEJFLEtBQUtqTSxHQUFLZ00sSUFDVkMsS0FBS0MsS0FBTyxHQUpoQkgsRUFBSUksT0FBUyxLQU9iSixFQUFJL1EsVUFBWSxDQUNab1IsT0FEWSxXQUVKTCxFQUFJSSxRQUNKSixFQUFJSSxPQUFPRSxPQUFPSixPQUkxQkssT0FQWSxTQU9MQyxHQUNITixLQUFLQyxLQUFLelAsS0FBSzhQLElBR25CQyxVQVhZLFNBV0ZELEdBQ04sSUFBTXBCLEVBQVFjLEtBQUtDLEtBQUsxUCxRQUFRK1AsR0FDNUJwQixHQUFTLEdBQ1RjLEtBQUtDLEtBQUtqTixPQUFPa00sRUFBTyxJQUloQ3NCLE9BbEJZLFdBbUJSUixLQUFLQyxLQUFLOUgsU0FBUSxTQUFBc0ksR0FDZEEsRUFBUTVMLGUsNkdDM0JJeUcsRUFIeEIsZ0NBQ0Esd0JBRWUsU0FBU0EsRUFBVVAsRUFBWVYsR0FDMUMyRixLQUFLM0YsR0FBS0EsRUFDVjJGLEtBQUtuUCxLQUFPa0ssRUFBV2xLLEtBQ3ZCbVAsS0FBS2pGLFdBQWFBLEVBQ2xCaUYsS0FBS3ZDLFdBQWExQyxFQUFXMEMsV0FDN0J1QyxLQUFLMUYsR0FBS1MsRUFBV1QsR0FDckIwRixLQUFLeEIsUUFBVXpELEVBQVd5RCxRQUMxQndCLEtBQUtsQixVQUFZL0QsRUFBVytELFVBQzVCa0IsS0FBS2pCLFFBQVVpQixLQUFLbEIsV0FBYWtCLEtBQUtsQixVQUFVQyxRQUdwRHpELEVBQVV2TSxVQUFZLENBQ2xCd00sTUFEa0IsV0FFZCxJQUFNUixFQUFhaUYsS0FBS2pGLFdBQ2xCRSxFQUFNRixFQUFXRSxJQVl2QixHQVhtQixtQkFBUkEsRUFDUCtFLEtBQUtuTCxPQUFTb0csR0FFZCxJQUFBeUYsUUFBT1YsS0FBTS9FLEdBSWIrRSxLQUFLakcsTUFDTGlHLEtBQUtqRyxPQUdMaUcsS0FBS2pCLFFBQ0xpQixLQUFLbkwsUUFBVW1MLEtBQUtuTCxPQUFPa0csRUFBVzRCLFVBQ25DLEdBQUlxRCxLQUFLdkMsV0FBWSxDQUN4QixJQUFNM0MsRUFBTWtGLEtBQ1JBLEtBQUtuTCxTQUNMbUwsS0FBS1csUUFBVSxTQUFVelAsRUFBTzBQLEdBQzVCOUYsRUFBSWpHLE9BQU8zRCxFQUFPMFAsS0FHMUIsSUFBTUgsRUFBVVQsS0FBS2EsU0FBVyxJQUFJQyxVQUFRZCxLQUFLM0YsR0FBSTJGLEtBQUt2QyxXQUFZdUMsS0FBS1csUUFBUyxDQUNoRm5DLFFBQVN3QixLQUFLeEIsVUFJZHdCLEtBQUtuTCxRQUNMbUwsS0FBS25MLE9BQU80TCxFQUFRdlAsU0FLaENELElBbkNrQixTQW1DZEMsR0FDQThPLEtBQUthLFNBQVM1UCxJQUFJQyxJQUd0QjhLLFVBdkNrQixTQXVDUnZKLEdBQ0Z1TixLQUFLZSxRQUNMZixLQUFLZSxTQUdMZixLQUFLYSxVQUNMYixLQUFLYSxTQUFTNUUsV0FHbEIrRCxLQUFLM0YsR0FBSzJGLEtBQUsxRixHQUFLMEYsS0FBS2EsU0FBVyxRLG9UQzlENUMsNEJBQ0Esd0JBQ0EseUJBQ0Esd0JBV01HLEVBQVcsQ0FDYnJDLEtBQU0sQ0FDRjVFLEtBREUsV0FFRSxJQUFNa0gsRUFBT2pCLEtBQ2JBLEtBQUtrQixTQUFXLFdBQ1pELEVBQUtoUSxJQUFJK08sS0FBSzlPLFNBRWxCLElBQUFrTixJQUFHNEIsS0FBSzFGLEdBQUksUUFBUzBGLEtBQUtrQixXQUc5QnJNLE9BVEUsU0FTSzNELEdBQ0g4TyxLQUFLMUYsR0FBR3BKLE1BQVFBLEdBR3BCNlAsT0FiRSxZQWNFLElBQUFJLEtBQUluQixLQUFLMUYsR0FBSSxRQUFTMEYsS0FBS2tCLFlBSW5DRSxPQUFRLENBQ0pySCxLQURJLFdBQ0csV0FDR08sRUFBTTBGLEtBQUsxRixHQUNiK0csRUFBV3JCLEtBQUtxQixTQUFXL0csRUFBR2dILGFBQWEsWUFFL0N0QixLQUFLa0IsU0FBVyxXQUNaLElBQUloUSxFQUFRcVEsRUFBU2pILEVBQUkrRyxHQUN6QixFQUFLcFEsSUFBSUMsS0FHYixJQUFBa04sSUFBRzlELEVBQUksU0FBVTBGLEtBQUtrQixVQUd0QkssRUFBU2pILEVBQUkrRyxHQUFVLElBRzNCeE0sT0FoQkksU0FnQkczRCxHQUNILElBQU1vSixFQUFLMEYsS0FBSzFGLEdBQ2hCQSxFQUFHa0gsZUFBaUIsRUFLcEIsSUFKQSxJQUFNQyxFQUFRekIsS0FBS3FCLFdBQVksSUFBQUssU0FBUXhRLEdBQ2pDNkUsRUFBVXVFLEVBQUd2RSxRQUNmdEQsRUFBSXNELEVBQVFyRCxPQUNaaVAsU0FBSUMsU0FDRG5QLEtBRUhtUCxHQURBRCxFQUFLNUwsRUFBUXRELElBQ0p2QixNQUNUeVEsRUFBR0UsU0FBV0osRUFBT3ZRLEVBQU1YLFFBQVFxUixJQUFRLEVBQUkxUSxHQUFTMFEsR0FJaEViLE9BOUJJLFlBK0JBLElBQUFJLEtBQUluQixLQUFLMUYsR0FBSSxTQUFVMEYsS0FBS2tCLFlBSXBDWSxNQUFPLENBQ0gvSCxLQURHLFdBRUMsSUFBTWtILEVBQU9qQixLQUNGQSxLQUFLMUYsR0FDaEIwRixLQUFLa0IsU0FBVyxXQUNaRCxFQUFLaFEsSUFBSStPLEtBQUs5TyxTQUdsQixJQUFBa04sSUFBRzRCLEtBQUsxRixHQUFJLFNBQVUwRixLQUFLa0IsV0FHL0JyTSxPQVhHLFNBV0kzRCxHQUNILElBQU1vSixFQUFLMEYsS0FBSzFGLEdBQ2hCQSxFQUFHeUgsUUFBVXpILEVBQUdwSixPQUFTQSxHQUc3QjZQLE9BaEJHLFlBaUJDLElBQUFJLEtBQUluQixLQUFLMUYsR0FBSSxTQUFVMEYsS0FBS2tCLFlBSXBDYyxTQUFVLENBQ05qSSxLQURNLFdBRUYsSUFBTWtILEVBQU9qQixLQUNQMUYsRUFBSzBGLEtBQUsxRixHQUVoQjBGLEtBQUtrQixTQUFXLFdBQ1osSUFBTWUsRUFBWTNILEVBQUd5SCxRQUNqQkgsRUFBTVgsRUFBS0osU0FBUzdQLE1BQ3hCLElBQUksSUFBQTBRLFNBQVFFLEdBQU0sQ0FDZCxJQUFJMUMsRUFBUTBDLEVBQUlyUixRQUFReVAsS0FBSzlPLE9BQ3pCK1EsR0FDYyxHQUFWL0MsR0FDQStCLEVBQUtoUSxJQUFJMlEsRUFBSTlLLE9BQU9rSixLQUFLOU8sUUFHN0IrUCxFQUFLaFEsSUFBSTJRLEVBQUlwSixNQUFNLEVBQUcwRyxHQUFPcEksT0FBTzhLLEVBQUlwSixNQUFNMEcsRUFBUSxVQUcxRCtCLEVBQUtoUSxJQUFJZ1IsS0FJakIsSUFBQTdELElBQUc5RCxFQUFJLFNBQVUwRixLQUFLa0IsV0FHMUJyTSxPQXpCTSxTQXlCQzNELEdBQ0gsSUFBTW9KLEVBQUswRixLQUFLMUYsSUFDWixJQUFBb0gsU0FBUXhRLEdBQ1JvSixFQUFHeUgsUUFBVTdRLEVBQU1YLFFBQVErSixFQUFHcEosUUFBVSxFQUV4Q29KLEVBQUd5SCxVQUFZN1EsR0FJdkI2UCxPQWxDTSxZQW1DRixJQUFBSSxLQUFJN0csR0FBSSxTQUFVMEYsS0FBS2tCLGFBeVFuQyxTQUFTSyxFQUFTakgsRUFBSW1ILEVBQU9TLEdBR3pCLElBRkEsSUFBTUMsRUFBTVYsRUFBTyxHQUFLLEtBQ3BCRSxTQUNLbFAsRUFBSSxFQUFHYSxFQUFJZ0gsRUFBR3ZFLFFBQVFyRCxPQUFRRCxFQUFJYSxFQUFHYixJQUcxQyxHQUZBa1AsRUFBS3JILEVBQUd2RSxRQUFRdEQsR0FDTHlQLEVBQU1QLEVBQUdMLGFBQWEsWUFBY0ssRUFBR0UsU0FDcEMsQ0FDVixJQUFJSixFQUdBLE9BQU9FLEVBQUd6USxNQUZWaVIsRUFBSTNSLEtBQUttUixFQUFHelEsT0FNeEIsT0FBT2lSLEUsVUFqUkksQ0FFWHhELEtBQU0sQ0FDRjVFLEtBREUsV0FFRWlHLEtBQUtsRSxLQUE0QixJQUFyQmtFLEtBQUsxRixHQUFHMkMsU0FBaUIsT0FBUyxlQUdsRHBJLE9BTEUsU0FLSzNELEdBQ0g4TyxLQUFLMUYsR0FBRzBGLEtBQUtsRSxNQUFRNUssSUFJN0JrTixHQUFJLENBQ0FsRCxTQTFJRyxJQTRJSHJHLE9BSEEsU0FHT3VOLEdBQ0NwQyxLQUFLb0MsVUFDTCxJQUFBakIsS0FBSW5CLEtBQUsxRixHQUFJMEYsS0FBS2pGLFdBQVd5QyxJQUFLd0MsS0FBS29DLFNBRTNDcEMsS0FBS29DLFFBQVVBLEdBQ2YsSUFBQWhFLElBQUc0QixLQUFLMUYsR0FBSTBGLEtBQUtqRixXQUFXeUMsSUFBS3dDLEtBQUtvQyxVQUcxQ3JCLE9BWEEsV0FZUWYsS0FBS29DLFVBQ0wsSUFBQWpCLEtBQUluQixLQUFLMUYsR0FBSTBGLEtBQUtqRixXQUFXeUMsSUFBS3dDLEtBQUtvQyxXQUtuRHJJLEtBQU0sQ0FDRm1CLFNBMUpLLElBMkpMbkIsS0FGRSxXQUdFaUcsS0FBS2xFLEtBQU9rRSxLQUFLakYsV0FBV3lDLEtBR2hDM0ksT0FORSxTQU1LM0QsR0FDSDhPLEtBQUsxRixHQUFHK0gsYUFBYXJDLEtBQUtsRSxLQUFNNUssS0FJeENvUixNQUFPLENBQ0hwSCxTQXRLTSxJQXVLTm5CLEtBRkcsV0FHQyxJQUFNTyxFQUFLMEYsS0FBSzFGLEdBRVo4SCxTQUVKLE9BSFk5SCxFQUFHNkMsU0FJWCxJQUFLLFFBQ0RpRixFQUFVcEIsRUFBUzFHLEVBQUczRCxPQUFTcUssRUFBU3JDLEtBQ3hDLE1BQ0osSUFBSyxXQUNEeUQsRUFBVXBCLEVBQVNyQyxLQUNuQixNQUNKLElBQUssU0FDRHlELEVBQVVwQixFQUFTSSxPQUNuQixNQUNKLFFBQ0ksT0FHUmdCLEVBQVFySSxLQUFLOUssS0FBSytRLE1BQ2xCQSxLQUFLbkwsT0FBU3VOLEVBQVF2TixTQUk5QjBOLEtBQU0sQ0FDRjFOLE9BREUsU0FDSzNELEdBQ0g4TyxLQUFLMUYsR0FBR2tJLFVBQVl0UixJQUk1QnVSLEtBQU0sQ0FDRjVOLE9BREUsU0FDSzNELEdBQ0g4TyxLQUFLMUYsR0FBR29JLE1BQU1DLFFBQVl6UixFQUFPLEdBQUssU0FNOUMwUixHQUFJLENBQ0ExSCxTQTNNRyxLQTRNSG5CLEtBRkEsV0FHSSxJQUFNTyxFQUFLMEYsS0FBSzFGLEdBQ1Z1SSxFQUFPdkksRUFBR3dJLG1CQUNaRCxHQUFvQyxRQUE1QixJQUFBaEcsU0FBUWdHLEVBQU0sYUFDdEIsSUFBQUUsUUFBT0YsR0FDUDdDLEtBQUtnRCxPQUFTSCxHQUdsQjdDLEtBQUtpRCxPQUFTNU4sU0FBU3NLLGVBQWUsS0FDdEMsSUFBQXhCLFNBQVE3RCxFQUFJMEYsS0FBS2lELFFBQ2pCakQsS0FBS2tELFNBQVUsR0FHbkJyTyxPQWZBLFNBZU8zRCxHQUFPLFdBQ05BLEdBQ0k4TyxLQUFLbUQsY0FDTCxJQUFBSixRQUFPL0MsS0FBS21ELGFBR1huRCxLQUFLa0QsU0FJTmxELEtBQUtrRCxTQUFVLEVBRWZ4SCxZQUFXLFdBQ1AsRUFBSzBILFFBQVUsRUFBSzlJLEdBQUcrSSxXQUFVLElBQ2pDLElBQUFDLFFBQU8sRUFBS0YsUUFBUyxFQUFLSCxVQUMzQixLQVJIakQsS0FBS29ELFFBQVVwRCxLQUFLMUYsR0FBRytJLFdBQVUsSUFDakMsSUFBQUMsUUFBT3RELEtBQUtvRCxRQUFTcEQsS0FBS2lELFdBVzFCakQsS0FBS29ELFVBQ0wsSUFBQUwsUUFBTy9DLEtBQUtvRCxTQUdYcEQsS0FBS2tELFNBSU5sRCxLQUFLa0QsU0FBVSxFQUVmeEgsWUFBVyxXQUNQLEVBQUt5SCxZQUFjLEVBQUtILE9BQU9LLFdBQVUsSUFDekMsSUFBQUMsUUFBTyxFQUFLSCxZQUFhLEVBQUtGLFVBQy9CLEtBUkhqRCxLQUFLbUQsWUFBY25ELEtBQUtnRCxPQUFPSyxXQUFVLElBQ3pDLElBQUFDLFFBQU90RCxLQUFLbUQsWUFBYW5ELEtBQUtpRCxZQWM5Q00sSUFBSyxDQUNEckksU0FoUUksS0FpUUpuQixLQUZDLFdBR0csSUFFSTBFLEVBQVF1QixLQUFLdkMsV0FBV2dCLE1BRmhCLHVCQUlaLEdBQUlBLEVBQU8sQ0FDUCxJQUFJK0UsRUFBUy9FLEVBQU0sR0FBR0EsTUFBTSxpQkFDeEIrRSxHQUNBeEQsS0FBS3lELFNBQVdELEVBQU8sR0FBR3hGLE9BQzFCZ0MsS0FBSzBELFNBQVdGLEVBQU8sR0FBR3hGLFFBRTFCZ0MsS0FBS3lELFNBQVdoRixFQUFNLEdBQUdULFlBRzdCZ0MsS0FBS3lELFNBQVdoRixFQUFNLEdBQUdULE9BRzdCZ0MsS0FBS3ZDLFdBQWFnQixFQUFNLEdBQUdULE9BQzNCZ0MsS0FBS2lELE9BQVM1TixTQUFTc0ssZUFBZSxJQUN0Q0ssS0FBS1IsS0FBT25LLFNBQVNvSywwQkFDckIsSUFBQXRCLFNBQVE2QixLQUFLMUYsR0FBSTBGLEtBQUtpRCxTQUcxQnBPLE9BekJDLFNBeUJNM0QsR0FDSCxHQUFJOE8sS0FBSzJELElBQ0wsS0FBTzNELEtBQUsyRCxRQUNSLElBQUFaLFFBQU8vQyxLQUFLaUQsT0FBT1csd0JBRzNCLElBQUlQLFNBQ0FRLFNBQ0FDLFNBQ0F2QixTQUVKLEdBQXFCLGlCQUFqQixJQUFPclIsRUFBUCxjQUFPQSxJQUFYLENBT0EsSUFBSyxJQUFJNEksS0FGVGtHLEtBQUsyRCxJQUFNLEVBRUt6UyxFQUNaOE8sS0FBSzJELE1BRUxwQixHQURBYyxFQUFZckQsS0FBSzFGLEdBQUcrSSxXQUFVLElBQ2JiLFVBQ2J4QyxLQUFLeUQsV0FDTEksRUFBTSxJQUFJRSxPQUFKLFNBQW9CL0QsS0FBS3lELFNBQXpCLFNBQTJDLEtBQ2pEbEIsRUFBT0EsRUFBS3BFLFFBQVEwRixFQUFLM1MsRUFBTTRJLEtBRS9Ca0csS0FBSzBELFdBQ0xJLEVBQU0sSUFBSUMsT0FBSixTQUFvQi9ELEtBQUswRCxTQUF6QixTQUEyQyxLQUNqRG5CLEVBQU9BLEVBQUtwRSxRQUFRMkYsRUFBS2hLLElBRzdCdUosRUFBVWIsVUFBWUQsRUFDdEJ2QyxLQUFLUixLQUFLOUosWUFBWTJOLElBRzFCLElBQUFqSixTQUFRNEYsS0FBSzNGLEdBQUkyRixLQUFLUixPQUN0QixJQUFBOEQsUUFBT3RELEtBQUtSLEtBQU1RLEtBQUtpRCxhQXhCbkJ2UyxRQUFRa0ksTUFBU29ILEtBQUt2QyxXQUF0QixjQTJCWm9CLFVBQVcsQ0FDUDNELFNBbFVVLEtBb1VWbkIsS0FITyxXQUlIaUcsS0FBS2lELE9BQVM1TixTQUFTc0ssZUFBZSxLQUN0QyxJQUFBeEIsU0FBUTZCLEtBQUsxRixHQUFJMEYsS0FBS2lELFFBQ3RCLElBQU12SyxFQUFRc0gsS0FBS2dFLFNBQ25CLElBQUFWLFFBQU81SyxFQUFNdUwsSUFBS2pFLEtBQUtpRCxTQUczQmUsTUFWTyxXQVdIaEUsS0FBS2tFLFVBQVlsRSxLQUFLM0YsR0FBR2dDLFNBQVN1QyxXQUFXb0IsS0FBS3ZDLFlBQzdDdUMsS0FBS2tFLFVBQVVuTyxRQUFRb08sV0FDeEJuRSxLQUFLa0UsVUFBVW5PLFFBQVFvTyxTQUFXLGVBRXRDLElBQU1wTyxFQUFVLENBQ1psRixLQUFNbVAsS0FBS3ZDLFdBQ1huRCxHQUFJMEYsS0FBSzFGLEdBQUcrSSxXQUFVLEdBRXRCZSxjQUFjLEVBRWRySCxTQUFVaUQsS0FBSzNGLEdBQ2Z4RCxPQUFRbUosS0FBSzNGLElBRWpCLE9BQU8sSUFBSTJGLEtBQUtrRSxVQUFVbk8sS0FJbEN3RyxLQUFNLENBQ0Z4QyxLQURFLFdBRUUsSUFBTXJCLEVBQVFzSCxLQUFLM0YsR0FDYnhELEVBQVM2QixFQUFNcUUsU0FDZlIsRUFBT3lELEtBQUtqRixXQUFXd0IsS0FFdkI4SCxHQURXOUgsRUFBS0MsS0FDSkQsRUFBS0ssWUFDakIwSCxFQUFnQnRFLEtBQUtzRSxjQUFnQixJQUFJeEQsVUFBUWpLLEVBQVF3TixHQUFXLFNBQVN6QyxHQUMvRWxKLEVBQU02RCxFQUFLQyxNQUFRb0YsSUFDcEIsQ0FBQzJDLE1BQU0sS0FDVixJQUFBdkgsZ0JBQWV0RSxFQUFPNkQsRUFBS0MsS0FBTThILEVBQWNwVCxRQUduRDZQLE9BYkUsY0FpQk5yRCxLQUFNLENBQ0Z4QyxTQTVXSyxLQThXTG5CLEtBSEUsV0FJRSxJQUFJbEosR0FBTyxJQUFBZ00sU0FBUW1ELEtBQUsxRixHQUFJLFFBQ2hCLE1BQVJ6SixJQUNBQSxFQUFPLFdBRVgsSUFBTTJULEVBQVV4RSxLQUFLM0YsR0FBR29LLGVBQWlCekUsS0FBSzNGLEdBQUdvSyxjQUFjNVQsSUFDL0QsSUFBQXNOLFNBQVE2QixLQUFLMUYsR0FBSWtLLE8sNkNDL1g3QixJLElBQUEsd0JBQ0Esd0JBQ0EsNEJBR0Esd0IsSUFDQSwwQixJQUNBLG1CLG1EQUdBLFNBQVNFLEVBQVEzTyxHQUNiaUssS0FBSzJFLE1BQU01TyxHQW9XZixTQUFTNk8sS0FHVCxTQUFTQyxFQUFtQnZMLEVBQVFlLEdBQ2hDLElBQU1vRyxFQUFVLElBQUlLLFVBQVF6RyxFQUFJZixFQUFRLEtBQU0sQ0FDMUN3TCxNQUFNLElBRVYsT0FBTyxXQU9ILE9BTklyRSxFQUFRc0UsT0FDUnRFLEVBQVF1RSxXQUVSbEYsVUFBSUksUUFDSk8sRUFBUU4sU0FFTE0sRUFBUXZQLE9BL1d2QndULEVBQVEzTyxRQUFVLENBQ2RxRyxxQkFDQXdDLFdBQVksR0FDWkosUUFBUyxJQU1ia0csRUFBUU8sTUFBUSxTQUFTQSxHQUNyQmpGLEtBQUtqSyxTQUFVLElBQUFtUCxjQUFhbEYsS0FBS2pLLFFBQVNrUCxJQUk5Q1AsRUFBUVMsVUFBWSxTQUFTQyxFQUFTclAsR0FDbENpSyxLQUFLakssUUFBUXFHLFdBQVdnSixHQUFXclAsR0FJdkMyTyxFQUFRVyxJQUFNLFNBQVVDLEdBQ3BCLElBQUlBLEVBQU9DLFVBQVgsQ0FHQSxJQUFNQyxHQUFPLElBQUExSCxTQUFRMkgsVUFBVyxHQVNoQyxPQVJBRCxFQUFLRSxRQUFRMUYsTUFFaUIsbUJBQW5Cc0YsRUFBT0ssUUFDZEwsRUFBT0ssUUFBUXhTLE1BQU1tUyxFQUFRRSxHQUU3QkYsRUFBT25TLE1BQU0sS0FBTXFTLEdBRXZCRixFQUFPQyxXQUFZLEVBQ1p2RixPQUdYMEUsRUFBUWtCLElBQU0sRUFFZGxCLEVBQVFoRSxPQUFTLFNBQVNtRixHQUN0QkEsRUFBZ0JBLEdBQWlCLEdBQ2pDLElBQ0lDLEVBQThCLElBRHBCOUYsS0FDWTRGLElBQzFCLEdBQUlFLEdBQWlCRCxFQUFjRSxNQUMvQixPQUFPRixFQUFjRSxNQUd6QixJQUFNbFYsRUFBT2dWLEVBQWNoVixNQU5ibVAsS0FNMkJqSyxRQUFRbEYsS0FFM0NtVixFQUFNLElBQUlDLFNBQVMsbUJBQThCcFYsRUEwVjVDc04sUUFBUStILEVBQVlDLFdBMVZnQyxxQ0FBbkQsR0FnQlosT0FmQUgsRUFBSWpYLFVBQVlELE9BQU8rSyxPQVRUbUcsS0FTc0JqUixXQUNwQ2lYLEVBQUlqWCxVQUFVcVgsWUFBY0osRUFDNUJBLEVBQUlqUSxTQUFVLElBQUFtUCxjQVhBbEYsS0FXbUJqSyxRQUFTOFAsR0FDMUNHLEVBQUEsTUFaY2hHLEtBYWRnRyxFQUFJdEYsT0FiVVYsS0FhS1UsT0FDbkJzRixFQUFJbkgsVUFkVW1CLEtBY1FuQixVQUVsQmhPLElBQ0FtVixFQUFJalEsUUFBUTZJLFdBQVcvTixHQUFRbVYsR0FHL0JGLElBQ0FELEVBQWNFLE1BQVFDLEdBR25CQSxHQUlYdEIsRUFBUTdGLFVBQVksU0FBUzlLLEVBQUlzUyxFQUFZQyxHQUN6QyxPQUFLRCxHQUdJQSxFQUFXeFYsT0FDWndWLEVBQVd4VixLQUFPa0QsR0FHdEJzUyxFQUFhM0IsRUFBUWhFLE9BQU8yRixHQUV2QkMsSUFDRHRHLEtBQUtqSyxRQUFMLFdBQTJCaEMsR0FBTXNTLEdBRzlCQSxHQVpBckcsS0FBS2pLLFFBQUwsV0FBMkJoQyxJQWlCMUMyUSxFQUFRNkIsT0FBUyxTQUFTeFMsRUFBSTdELEdBQzFCOFAsS0FBS2pLLFFBQVF5SSxRQUFRekssR0FBTTdELEdBSS9Cd1UsRUFBUTNWLFVBQVksQ0FDaEJxWCxZQUFhMUIsRUFHYkMsTUFKZ0IsU0FJVjVPLEdBQ0ZpSyxLQUFLaUUsSUFBTSxLQUNYakUsS0FBS3dHLFFBQVV6USxFQUFRYyxPQUV2Qm1KLEtBQUt5RyxZQUFhLEVBRWxCekcsS0FBSzBHLE1BQVExRyxLQUFLd0csUUFBU3hHLEtBQUt3RyxRQUFRRSxNQUFRMUcsS0FFaERBLEtBQUsyRyxVQUFZLEdBR2pCM0csS0FBSzRHLFVBQVksR0FHakI1RyxLQUFLNkcsUUFBVSxHQUdmN0csS0FBS3hFLFlBQWMsR0FHbkJ3RSxLQUFLakQsU0FBV2hILEVBQVFnSCxVQUFZaUQsS0FBS3dHLFFBRXJDeEcsS0FBS3dHLFNBQ0x4RyxLQUFLd0csUUFBUUcsVUFBVW5XLEtBQUt3UCxNQUloQ2pLLEVBQVVpSyxLQUFLM0QsVUFBVyxJQUFBNkksY0FBYWxGLEtBQUtvRyxZQUFZclEsUUFBU0EsRUFBU2lLLE1BQzFFQSxLQUFLdkUsVUFBVSxRQUVmdUUsS0FBSzhHLGNBQ0w5RyxLQUFLK0csa0JBQ0wvRyxLQUFLZ0gsYUFDTGhILEtBQUtpSCxlQUNMakgsS0FBS2tILFlBQ0xsSCxLQUFLbUgsYUFDTG5ILEtBQUtvSCxnQkFDTHBILEtBQUtxSCxjQUVMckgsS0FBS3ZFLFVBQVUsV0FDWDFGLEVBQVF1RSxJQUNSMEYsS0FBS3NILFlBSWJSLFlBakRnQixXQWtEWixJQUFJL1EsRUFBVWlLLEtBQUszRCxTQUNmdEcsRUFBUWtQLFFBQ1JqRixLQUFLM0QsVUFBVyxJQUFBNkksY0FBYW5QLEVBQVNBLEVBQVFrUCxTQUl0RDhCLGdCQXhEZ0IsV0F5RFosSUFBTW5JLEVBQWFvQixLQUFLM0QsU0FBU3VDLFdBQ3BCOVAsT0FBT29KLEtBQUswRyxHQUNwQnpHLFNBQVEsU0FBQTJCLEdBQ1Q4RSxFQUFXOUUsR0FBTzRLLEVBQVE3RixVQUFVL0UsRUFBSzhFLEVBQVc5RSxJQUFNLE9BSWxFa04sV0FoRWdCLFdBaUVaLElBQU1qUixFQUFVaUssS0FBSzNELFNBQ2pCL0IsRUFBS3ZFLEVBQVF1RSxHQUNYZ0MsRUFBUXZHLEVBQVF1RyxNQUN0QmhDLEVBQUt2RSxFQUFRdUUsSUFBSyxJQUFBaU4sT0FBTWpOLEdBRXBCZ0MsR0FBd0IsR0FBZmhDLEVBQUcyQyxXQUNaLElBQUFmLGNBQWE4RCxLQUFNMUYsRUFBSWdDLElBSS9CMkssYUEzRWdCLFdBMkVELFdBQ0xPLEVBQVV4SCxLQUFLM0QsU0FBU21MLFFBQVN4SCxLQUFLM0QsU0FBU21MLFFBQVUsR0FDbEQxWSxPQUFPb0osS0FBS3NQLEdBRXBCclAsU0FBUSxTQUFBMkIsR0FFVCxFQUFLQSxJQUFPLElBQUFDLE1BQUt5TixFQUFRMU4sR0FBTSxPQUl2Q29OLFVBckZnQixXQXFGSixXQUVKeFQsRUFBT3NNLEtBQUszRCxTQUFTM0ksS0FDekJBLEVBQU9zTSxLQUFLeUgsTUFBd0IsbUJBQVQvVCxFQUFxQkEsSUFBU0EsR0FBUSxHQUNwRDVFLE9BQU9vSixLQUFLeEUsR0FHcEJ5RSxTQUFRLFNBQUEyQixHQUNULEVBQUs0TixPQUFPLEVBQU0sUUFBUzVOLE9BRy9CLGFBQVFrRyxLQUFLeUgsUUFHakJOLFdBbkdnQixXQW1HSCxXQUNULEdBQUluSCxLQUFLM0QsU0FBU3NMLE1BQU8sQ0FDckIsSUFBTUEsRUFBUTNILEtBQUszRCxTQUFTc0wsTUFDZjdZLE9BQU9vSixLQUFLeVAsR0FDcEJ4UCxTQUFRLFNBQUEyQixHQUNULEVBQUs4TixPQUFPOU4sRUFBSzZOLEVBQU03TixTQUtuQ3NOLGNBN0dnQixXQTZHQSxXQUNaLEdBQUlwSCxLQUFLM0QsU0FBU3dMLFNBQVUsQ0FDeEIsSUFBTUEsRUFBVzdILEtBQUszRCxTQUFTd0wsU0FDbEIvWSxPQUFPb0osS0FBSzJQLEdBQ3BCMVAsU0FBUSxTQUFBMkIsR0FDVGhMLE9BQU9xQyxlQUFlLEVBQU0ySSxFQUFLLENBQzdCL0ksWUFBWSxFQUNaRCxjQUFjLEVBQ2RFLElBQUs2VCxFQUFtQmdELEVBQVMvTixHQUFNLEdBQ3ZDN0ksSUFBSzJULFNBTXJCeUMsWUE1SGdCLFdBNkhaLElBQU10UixFQUFVaUssS0FBSzNELFNBRWpCdEcsRUFBUXFPLGNBa0xwQixTQUFpQy9KLEVBQUlDLEdBQ2pDLElBQU0yRCxFQUFPLGFBQ1A2SixHQUFRLElBQUFoSyxTQUFReEQsRUFBR3lELFlBRXJCbE4sU0FBTUssU0FBT2tSLFNBRWpCMEYsRUFBTTNQLFNBQVEsU0FBQTJELEdBQ1ZqTCxFQUFPaUwsRUFBS2pMLEtBQUttTixPQUNqQjlNLEVBQVE0SyxFQUFLNUssTUFBTThNLE9BQ2ZDLEVBQUtYLEtBQUt6TSxLQUNWQSxFQUFPQSxFQUFLc04sUUFBUUYsRUFBTSxJQUMxQi9NLEdBQVMsZ0NBQ1RrUixFQU1aLFNBQTBCdkwsRUFBUTNGLEdBQzlCLElBQU1GLEVBQU0sSUFBSWlWLFNBQVMsS0FBTSxhQUFlL1UsR0FDOUMsT0FBTyxXQUNIMkYsRUFBT2tSLFlBQWEsSUFBQWpLLFNBQVEySCxXQUM1QixJQUFNNVAsRUFBUzdFLEVBQUkvQixLQUFLNEgsRUFBUUEsR0FFaEMsT0FEQUEsRUFBT2tSLFdBQWEsS0FDYmxTLEdBWk9tUyxDQUFpQjNOLEVBQUcwQyxTQUFVN0wsR0FDeENtSixFQUFHNE4sSUFBSXBYLEVBQU11UixPQTlMYjhGLENBQXdCbEksS0FBTWpLLEVBQVF1RSxLQUk5Q29OLE9BcElnQixTQW9JVHhILEVBQVFpSSxFQUFXck8sR0FDdEIsSUFBTXNPLEVBQTJCLENBQzdCclgsWUFBWSxFQUNaRCxjQUFjLEVBSWxCc1gsSUFBK0IsV0FDM0IsT0FBT3BJLEtBQUttSSxHQUFXck8sSUFFM0JzTyxJQUErQixTQUFzQnhHLEdBQ2pENUIsS0FBS21JLEdBQVdyTyxHQUFPOEgsSUFFM0I5UyxPQUFPcUMsZUFBZStPLEVBQVFwRyxFQUFLc08sSUFJdkNDLEtBckpnQixTQXFKWEMsRUFBS3hPLEVBQUs4SCxHQUNYNUIsS0FBS3NJLEdBQUt4TyxHQUFPOEgsRUFDakJ2SCxHQUFHaU8sR0FBS0MsT0FBT2pXLElBQUlrTyxVQUd2QmdJLFFBMUpnQixTQTBKUkYsRUFBS3hPLElBQ0wsSUFBQTRILFNBQVExQixLQUFLc0ksSUFDYnRJLEtBQUtzSSxHQUFLdFYsT0FBTzhHLEVBQUssV0FFZmtHLEtBQUtzSSxHQUFLeE8sR0FDakJPLEdBQUdpTyxHQUFLQyxPQUFPalcsSUFBSWtPLFdBSTNCb0gsT0FuS2dCLFNBbUtUYSxFQUFTbFcsRUFBVXdELEdBQ3RCLElBQUkrSyxVQUFRZCxLQUFNeUksRUFBU2xXLEVBQVV3RCxJQUd6Q2tTLElBdktnQixTQXVLWlMsRUFBT3hZLElBQ044UCxLQUFLNkcsUUFBUTZCLEtBQVcxSSxLQUFLNkcsUUFBUTZCLEdBQVMsS0FBS2xZLEtBQUtOLElBRzdEeVksS0EzS2dCLFNBMktYRCxFQUFPeFksR0FDUixJQUFNMFksRUFBTTVJLEtBQUs2RyxRQUFRNkIsR0FDekIsR0FBS3hZLEVBS0wsSUFEQSxJQUFJb0QsRUFBSXNWLEVBQUlsVyxPQUNMWSxLQUFLLENBQ0NzVixFQUFJdFYsS0FDRnBELEdBQ1AwWSxFQUFJNVYsT0FBT00sRUFBRyxRQVBsQnNWLEVBQUlsVyxPQUFTLEdBWXJCbVcsTUExTGdCLFNBMExWSCxHQUFPLFdBQ0hFLEVBQU01SSxLQUFLNkcsUUFBUTZCLEdBQ25CbEQsR0FBTyxJQUFBMUgsU0FBUTJILFVBQVcsR0FDM0JtRCxFQUlEcEQsRUFBSzlTLE9BQVMsRUFDZGtXLEVBQUl6USxTQUFRLFNBQUFuQyxHQUNSQSxFQUFHN0MsTUFBTSxFQUFNcVMsTUFHbkJvRCxFQUFJelEsU0FBUSxTQUFBbkMsR0FDUkEsRUFBRy9HLEtBQUssRUFBTXVXLEVBQUssT0FUdkJ4RixLQUFLNkcsUUFBUTZCLEdBQVMsSUFjOUJJLE1BNU1nQixTQTRNVkosRUFBT3hZLEdBQ1QsSUFBTW1LLEVBQUsyRixLQUtYQSxLQUFLaUksSUFBSVMsR0FKVCxTQUFTdEssSUFDTC9ELEVBQUdzTyxLQUFLRCxFQUFPdEssR0FDZmxPLEVBQUdpRCxNQUFNNk0sS0FBTXlGLGVBS3ZCc0QsVUFBV0MsV0FHWEMsY0F4TmdCLFNBd05GL1gsRUFBT3NOLEdBQVMsV0FDcEIwSyxFQUFhbEosS0FBSzNELFNBQVNtQyxRQUFTd0IsS0FBSzNELFNBQVNtQyxRQUFVLEdBQzlENEQsU0FPSixPQU5BNUQsRUFBUXJHLFNBQVEsU0FBQW9PLElBQ1puRSxFQUFVOEcsRUFBVzNDLEVBQU8xVixTQUV4QkssRUFBUWtSLEVBQVFuVCxLQUFLLEVBQU1pQyxPQUc1QkEsR0FJWHVLLFVBck9nQixTQXFPTjBOLEdBQU0sV0FDTm5JLEVBQVVoQixLQUFLM0QsU0FBUzhNLEdBRU4sbUJBQWJuSSxFQUNQQSxFQUFTL1IsS0FBSytRLE1BQ1BnQixHQUNQQSxFQUFTN0ksU0FBUSxTQUFBaUssR0FDYkEsRUFBUW5ULEtBQUssT0FNekJxWSxTQWxQZ0IsV0FtUFosSUFBTXZSLEVBQVVpSyxLQUFLM0QsU0FDckJ0RyxFQUFRdUUsR0FBSzBGLEtBQUtpRSxLQUFNLElBQUFzRCxPQUFNeFIsRUFBUXVFLElBQ3RDLElBQU04TyxFQXFDZCxTQUFvQjlPLEVBQUl2RSxHQUNwQixHQUFJQSxFQUFRb08sU0FBVSxDQUVsQnBPLEVBQVFzVCxTQUFXQyxFQUFlaFAsR0FFbEMsSUFBSTZKLEVBQVdwTyxFQUFRb08sU0FBU25HLE9BQzFCckQsRUFBT3RGLFNBQVNDLGNBQWMsT0FDcENxRixFQUFLNkgsVUFBWTJCLEVBQ2pCLElBQUkzRSxFQUFPOEosRUFBZTNPLEdBQU0sR0FHMUI0TyxHQUZOL0osRUFBT0EsRUFBSzZELFdBQVUsSUFFQW1HLFdBRXRCLE9BREEsSUFBQUMsWUFBV25QLEVBQUlpUCxHQUNSQSxHQWxEUUcsQ0FBVzFKLEtBQUtpRSxJQUFLbE8sR0FDaENxVCxJQUNBcEosS0FBS2lFLElBQU1tRixFQUNYclQsRUFBUXVFLEdBQUdrSSxVQUFZLElBQ3ZCLElBQUFyRSxTQUFRcEksRUFBUXVFLEdBQUkwRixLQUFLaUUsTUFvR3JDLFNBQXNCNUosRUFBSW1LLEdBQ3RCLElBQUtBLEVBQ0QsT0FHSixJQUFNbUYsRUFBV3RQLEVBQUdvSyxjQUFnQjNWLE9BQU8rSyxPQUFPLE1BQzlDaEosU0FRSixJQUFLQSxLQVBMLElBQUFpTixTQUFRMEcsRUFBUS9ULFVBQVUwSCxTQUFRLFNBQUFtQyxJQUMxQnpKLEVBQU95SixFQUFHc1AsYUFBYSxXQUN0QkQsRUFBUzlZLEtBQVU4WSxFQUFTOVksR0FBUSxLQUFLTCxLQUFLOEosTUFLMUNxUCxFQUNUQSxFQUFTOVksR0FBUWdaLEVBQWdCRixFQUFTOVksR0FBTzJULEdBSXJELEdBQUlBLEVBQVFoSyxnQkFBaUIsQ0FDekIsSUFBTUUsRUFBUThKLEVBQVE1SixXQUV0QixHQUFxQixJQUFqQkYsRUFBTWhJLFFBQXNDLElBQXRCZ0ksRUFBTSxHQUFHdUMsV0FBbUJ2QyxFQUFNLEdBQUdoSCxLQUFLc0ssT0FDaEUsT0FFSjJMLEVBQUEsUUFBc0JFLEVBQWdCckYsRUFBUTVKLFdBQVk0SixJQTFIMURzRixDQUFhOUosS0FBTWpLLEVBQVFzVCxVQUMzQnJKLEtBQUt2RSxVQUFVLGtCQUNmLElBQUFyQixTQUFRNEYsS0FBTUEsS0FBS2lFLE9BSTNCelYsT0FBT2tXLFFBQVVBLEVBeUNqQixJQUFNd0IsRUFBYSxvQkFvQ25CLFNBQVNvRCxFQUFlaFAsRUFBSXlQLEdBQ3hCLElBQUlyUixTQUFPc1IsU0FDWCxHQUFJMVAsRUFBR0UsZ0JBSUgsS0FIQSxJQUFBeVAsVUFBUzNQLEdBQ1QwUCxFQUFhRCxFQUFhMVUsU0FBU29LLHlCQUEyQnBLLFNBQVNDLGNBQWMsT0FFOUVvRCxFQUFRNEIsRUFBR2tQLFlBQ2RRLEVBQVd0VSxZQUFZZ0QsR0FHL0IsT0FBT3NSLEVBa0NYLFNBQVNILEVBQWdCblAsRUFBTzdELEdBQzVCLElBQU0ySSxFQUFPbkssU0FBU29LLHlCQUNsQnlLLFNBaUJKLE9BaEJBeFAsR0FBUSxJQUFBb0QsU0FBUXBELElBRVZ2QyxTQUFRLFNBQUF3QyxJQUVMLElBQUF3UCxhQUFZeFAsS0FDYjlELEVBQU91VCxZQUFZelAsSUFDbkJ1UCxFQUFNN1UsU0FBU0MsY0FBYyxRQUN6QmtOLFVBQVk3SCxFQUFLNkgsV0FDckIsSUFBQXlILFVBQVNDLElBRUksSUFBQXBNLFNBQVFvTSxFQUFJdFAsWUFDZHpDLFNBQVEsU0FBQU8sR0FDZjhHLEVBQUs5SixZQUFZZ0QsVUFJdEI4RyxJLDRUQzNjYTZLLEUsRUErQ1JyTixpQkEzRmhCLEksRUFBQSxvQixvQ0FDQSw0QkFHQSxJQUFNc04sRUFBYUMsTUFBTXhiLFVBQ25CeWIsRUFBZTFiLE9BQU8rSyxPQUFPeVEsR0F1Q3BCLFNBQVNELEVBQVFuWixHQUM1QixHQUFLQSxHQUEwQixpQkFBakIsSUFBT0EsRUFBUCxjQUFPQSxJQUFyQixDQUlBLElBQUl1WixTQU9KLE9BTkksSUFBQUMsUUFBT3haLEVBQU8sV0FBYUEsRUFBTXFYLGtCQUFrQm9DLEVBQ25ERixFQUFLdlosRUFBTXFYLE9BQ0hyWCxFQUFNdVYsYUFDZGdFLEVBQUssSUFBSUUsRUFBU3paLElBR2Z1WixHQUlYLFNBQVNFLEVBQVN6WixHQUNkOE8sS0FBSzlPLE1BQVFBLEVBQ2I4TyxLQUFLMU4sSUFBTSxJQUFJd04sV0FDZixJQUFBN0UsS0FBSS9KLEVBQU8sU0FBVThPLE9BRWpCLElBQUEwQixTQUFReFEsSUFDUkEsRUFBTTBaLFVBQVlKLEVBQ2xCeEssS0FBSzZLLGFBQWEzWixJQUVsQjhPLEtBQUs4SyxLQUFLNVosR0FzQlgsU0FBUzhMLEVBQWVzTCxFQUFLeE8sRUFBSzhILEdBQ3JDLElBQU10UCxFQUFNLElBQUl3TixVQUVaaUwsRUFBVVYsRUFBUXpJLEdBRXRCOVMsT0FBT3FDLGVBQWVtWCxFQUFLeE8sRUFBSyxDQUM1Qi9JLFlBQVksRUFDWkQsY0FBYyxFQUNkRSxJQUg0QixXQUt4QixHQUFJOE8sVUFBSUksU0FDSjVOLEVBQUk2TixTQUNBNEssR0FDQUEsRUFBUXpZLElBQUk2TixVQUVaLElBQUF1QixTQUFRRSxJQUNSLElBQUssSUFBSXhRLEVBQUdxQixFQUFJLEVBQUdhLEVBQUlzTyxFQUFJbFAsT0FBUUQsRUFBSWEsRUFBR2IsS0FDdENyQixFQUFJd1EsRUFBSW5QLEtBQ0hyQixFQUFFbVgsUUFBVW5YLEVBQUVtWCxPQUFPalcsSUFBSTZOLFNBSTFDLE9BQU95QixHQUVYM1EsSUFuQjRCLFNBbUJ4QitaLEdBQ0lwSixJQUFRb0osSUFHWnBKLEVBQU1vSixFQUVORCxFQUFVVixFQUFRVyxHQUVsQjFZLEVBQUlrTyxhQXBITyxDQUNuQixPQUNBLE1BQ0EsUUFDQSxVQUNBLFNBQ0EsT0FDQSxXQUlXckksU0FBUSxTQUFVOFMsR0FFN0IsSUFBTUMsRUFBV1osRUFBV1csSUFDNUIsSUFBQWhRLEtBQUl1UCxFQUFjUyxHQUFRLFdBQTBCLDJCQUFOekYsRUFBTSxxQkFBTkEsRUFBTSxnQkFFaEQsSUFBTTNQLEVBQVNxVixFQUFTL1gsTUFBTTZNLEtBQU13RixHQUM5QmlGLEVBQUt6SyxLQUFLdUksT0FDWjRDLFNBQ0osT0FBUUYsR0FDSixJQUFLLE9BQ0wsSUFBSyxVQUNERSxFQUFXM0YsRUFDWCxNQUNKLElBQUssU0FDRDJGLEVBQVczRixFQUFLaE4sTUFBTSxHQVE5QixPQUxJMlMsR0FDQVYsRUFBR0ksYUFBYU0sR0FHcEJWLEVBQUduWSxJQUFJa08sU0FDQTNLLFFBb0NmOFUsRUFBUzViLFVBQVksQ0FDakIrYixLQURpQixTQUNaeEMsR0FFRCxJQURBLElBQU1wUSxFQUFPcEosT0FBT29KLEtBQUtvUSxHQUNoQjdWLEVBQUksRUFBR2tSLEVBQU16TCxFQUFLeEYsT0FBUUQsRUFBSWtSLEVBQUtsUixJQUN4Q3VLLEVBQWVzTCxFQUFLcFEsRUFBS3pGLEdBQUk2VixFQUFJcFEsRUFBS3pGLE1BSTlDb1ksYUFSaUIsU0FRSk8sR0FDVEEsRUFBS2pULFNBQVEsU0FBQWpCLEdBQ1RtVCxFQUFRblQsUyxvV0NsRko0RyxRQUFULFNBQWlCc04sRUFBTWxNLEdBRTFCLE9BREFBLEVBQVFBLEdBQVMsRUFDVixVLHNIQUFBLENBQUlrTSxJQUFNNVMsTUFBTTBHLEksRUFHWGYsUUFBVCxTQUFpQmtOLEVBQVNDLEdBQzdCLElBQU16VSxFQUFTd1UsRUFBUUUsV0FDbkIxVSxHQUNBQSxFQUFPMlUsYUFBYUYsRUFBU0QsSSxFQUlyQjNLLE9BQVQsU0FBZ0IrSyxFQUFJQyxHQUN2QixJQUFNeFQsRUFBT3BKLE9BQU9vSixLQUFLd1QsR0FDckJqWixFQUFJeUYsRUFBS3hGLE9BQ2IsS0FBT0QsS0FDSGdaLEVBQUd2VCxFQUFLekYsSUFBTWlaLEVBQUt4VCxFQUFLekYsSUFFNUIsT0FBT2daLEcsRUFHS3JOLEdBQVQsU0FBWTlELEVBQUlvTyxFQUFPMVMsRUFBSTJWLEdBQzlCclIsRUFBR3NSLGlCQUFpQmxELEVBQU8xUyxFQUFJMlYsSSxFQUduQnhLLElBQVQsU0FBYTdHLEVBQUlvTyxFQUFPMVMsR0FDM0JzRSxFQUFHdVIsb0JBQW9CbkQsRUFBTzFTLEksRUFHbEIrRCxLQUFULFNBQWM3SixFQUFJNGIsR0FDckIsT0FBTyxTQUFVOVUsR0FDYixJQUFJMUQsRUFBSW1TLFVBQVUvUyxPQUNsQixPQUFPWSxFQUFJQSxFQUFJLEVBQUlwRCxFQUFHaUQsTUFBTTJZLEVBQUtyRyxXQUFhdlYsRUFBR2pCLEtBQUs2YyxFQUFLOVUsR0FBSzlHLEVBQUdqQixLQUFLNmMsSyxFQUloRTdRLElBQVQsU0FBYXFOLEVBQUt4TyxFQUFLOEgsRUFBSzdRLEdBQy9CakMsT0FBT3FDLGVBQWVtWCxFQUFLeE8sRUFBSyxDQUM1QjVJLE1BQU8wUSxFQUNQN1EsYUFBY0EsRUFDZGdiLFVBQVUsRUFDVmpiLGNBQWMsSyxFQUlONFosUyxFQUlBc0IsU0FBVCxTQUFrQjFELEdBQ3JCLE9BQWUsT0FBUkEsR0FBK0IsaUJBQWYsSUFBT0EsRUFBUCxjQUFPQSxLLEVBTWxCekwsVSxFQVFBSixZQUFULFNBQXFCOUIsRUFBTTlKLEdBQzlCLElBQUkrUSxFQUFNL0UsRUFBUWxDLEVBQU0sSUFBTTlKLEdBQ2xCLE9BQVIrUSxJQUNBQSxFQUFNL0UsRUFBUWxDLEVBQU0sVUFBWTlKLElBRXBDLE9BQU8rUSxHLEVBR0ttQixPQUFULFNBQWdCekksR0FDbkJBLEVBQUdpUixXQUFXbkIsWUFBWTlQLEksRUFHZGdKLE9BQVQsU0FBZ0JnSSxFQUFTRCxHQUM1QkEsRUFBUUUsV0FBV1UsYUFBYVgsRUFBU0QsSSxFQUc3QmEsU0FBVCxTQUFrQjVSLEVBQUk2UixHQUN6QjdSLEVBQUc4UixVQUFVQyxJQUFJRixJLEVBR0w1RSxNQUFULFNBQWVqTixHQUNsQixNQUFxQixpQkFBUEEsRUFBa0JqRixTQUFTaVgsY0FBY2hTLEdBQU1BLEcsRUFHakRpUyxhQUFULFNBQXNCNVEsR0FDekIsT0FBTyxJQUFJc0ssU0FBSix1QkFBb0N0SyxFQUFwQyxPLEVBR0s2USxpQkFBVCxTQUEwQkMsR0FDN0IsT0FBT0EsRUFBSUMsVUFBVSxFQUFHLEdBQUdDLGNBQWdCRixFQUFJQyxVQUFVLEksRUFJN0N6QyxTQUFULFNBQWtCdFAsR0FDckIsSUFBSWpDLFNBQ0osS0FBaUN5UixFQUF6QnpSLEVBQVFpQyxFQUFLNk8sYUFDakI3TyxFQUFLeVAsWUFBWTFSLEdBRXJCLEtBQWdDeVIsRUFBeEJ6UixFQUFRaUMsRUFBS2lTLFlBQ2pCalMsRUFBS3lQLFlBQVkxUixJLEVBS1R5UixjLEVBSUFoRSxRQUFULFNBQWlCMEcsRUFBRzVYLEdBQ3ZCLE9BQU9BLEVBQUlBLEVBQUUwWCxjQUFnQixJLEVBR2pCMWIsSUFBVCxTQUFTQSxFQUFJcVgsRUFBS3hPLEVBQUs4SCxHQUMxQixHQUFJOEksRUFBT3BDLEVBQUt4TyxHQUVaLFlBREF3TyxFQUFJeE8sR0FBTzhILEdBR2YsR0FBSTBHLEVBQUk3QixXQUVKLFlBREF4VixFQUFJcVgsRUFBSWIsTUFBTzNOLEVBQUs4SCxHQUd4QixJQUFNNkksRUFBS25DLEVBQUlDLE9BQ2YsSUFBS2tDLEVBRUQsWUFEQW5DLEVBQUl4TyxHQUFPOEgsR0FHZjZJLEVBQUdxQyxRQUFRaFQsRUFBSzhILEdBQ2hCNkksRUFBR25ZLElBQUlrTyxTQUNQLE9BQU9vQixHQXhJWCxnQ0FpRE8sU0FBUzhJLEVBQU9wQyxFQUFLeE8sR0FDeEIsT0FBTzlLLGVBQWVDLEtBQUtxWixFQUFLeE8sRyxFQWhENUJvTCw0QixFQUFjdUUsd0JBdUR0QixJQUFNL0gsRUFBVTZJLE1BQU03SSxRQUdmLFNBQVM3RSxFQUFRbEMsRUFBTW9TLEdBQzFCLElBQU1uTCxFQUFNakgsRUFBS2lQLGFBQWFtRCxHQUk5QixPQUhZLE9BQVJuTCxHQUNBakgsRUFBS3VELGdCQUFnQjZPLEdBRWxCbkwsRUErQ0osU0FBU3VJLEVBQVl4UCxHQUN4QixPQUFPQSxJQUEyQixJQUFsQkEsRUFBS3NDLFdBQW1CdEMsRUFBS2pILEtBQUtzSyxRQUE0QixJQUFsQnJELEVBQUtzQyxVLEVBdkQ3RHlFLFcsdUdDN0JRd0QsYUFBVCxTQUFTQSxFQUFhck8sRUFBUTZCLEVBQU8yQixJQW1DNUMsU0FBeUJ0RSxHQUNyQixHQUFJQSxFQUFRNkksV0FBWSxDQUNwQixJQUFNQSxFQUFhN0ksRUFBUTZJLFdBQ2Q5UCxPQUFPb0osS0FBSzBHLEdBQ3BCekcsU0FBUSxTQUFBMkIsR0FDVDhFLEVBQVc5RSxHQUFPNEssUUFBUTdGLFVBQVUvRSxFQUFLOEUsRUFBVzlFLElBQU0sT0F2Q2xFa1QsQ0FBZ0J0VSxHQUNoQixJQUFNM0MsRUFBVSxHQUNoQixJQUFJK0QsU0FFQXBCLEVBQUEsVUFDQTdCLEVBQXFDLG1CQUFyQjZCLEVBQUEsUUFBa0N3TSxFQUFhck8sRUFBUTZCLEVBQUEsUUFBaUIzQyxRQUFTc0UsR0FBTTZLLEVBQWFyTyxFQUFRNkIsRUFBQSxRQUFrQjJCLElBR2xKLEdBQUkzQixFQUFNdVUsT0FDTixJQUFLLElBQUl4YSxFQUFJLEVBQUdhLEVBQUlvRixFQUFNdVUsT0FBT3ZhLE9BQVFELEVBQUlhLEVBQUdiLElBQUssQ0FDakQsSUFBTXdTLEVBQVF2TSxFQUFNdVUsT0FBT3hhLEdBQ3JCeWEsRUFBZWpJLEVBQU1sVyxxQkFBcUIyVixRQUFVTyxFQUFNbFAsUUFBVWtQLEVBQzFFcE8sRUFBU3FPLEVBQWFyTyxFQUFRcVcsRUFBYzdTLEdBS3BELElBQUtQLEtBQU9qRCxFQUNSc1csRUFBV3JULEdBR2YsSUFBS0EsS0FBT3BCLEdBQ0gsSUFBQWdTLFFBQU83VCxFQUFRaUQsSUFDZnFULEVBQVdyVCxHQUlwQixTQUFTcVQsRUFBV3JULEdBQ2hCLElBQU1zVCxFQUFRQyxFQUFPdlQsSUFBUXdULEVBQzdCdlgsRUFBUStELEdBQU9zVCxFQUFNdlcsRUFBT2lELEdBQU1wQixFQUFNb0IsR0FBTU8sRUFBSVAsR0FFdEQsT0FBTy9ELEcsRUE0SEswVCxXQUFULFNBQW9CaUMsRUFBTUQsR0FDN0IsSUFBTTNELEVBQVE0RCxFQUFLM04sV0FDZnRMLEVBQUlxVixFQUFNcFYsT0FDVjdCLFNBQU1LLFNBQ1YsS0FBT3VCLEtBQ0g1QixFQUFPaVgsRUFBTXJWLEdBQUc1QixLQUNoQkssRUFBUTRXLEVBQU1yVixHQUFHdkIsTUFBTThNLE9BQ2xCeU4sRUFBR25LLGFBQWF6USxJQUFVMGMsRUFBY2pRLEtBQUt6TSxHQUU5QixVQUFUQSxHQUNQSyxFQUFNcU4sTUFBTSxPQUFPcEcsU0FBUSxTQUFBZ1UsR0FDdkJELFNBQVNULEVBQUlVLE1BSGpCVixFQUFHcEosYUFBYXhSLEVBQU1LLElBak1sQyxnQ0FRQSxJQUFNbWMsRUFBU3ZlLE9BQU8rSyxPQUFPLE1Ba0U3QixTQUFTMlQsRUFBVS9CLEVBQUlDLEdBQ25CLElBQUk1UixTQUFLMlQsU0FBT0MsU0FDaEIsSUFBSzVULEtBQU80UixFQUNSK0IsRUFBUWhDLEVBQUczUixHQUNYNFQsRUFBVWhDLEVBQUs1UixJQUNWLElBQUE0USxRQUFPZSxFQUFJM1IsR0FFTGtTLFNBQVN5QixJQUFVekIsU0FBUzBCLElBQ25DRixFQUFVQyxFQUFPQyxJQUZqQixJQUFBemMsS0FBSXdhLEVBQUkzUixFQUFLNFQsR0FLckIsT0FBT2pDLEVBeURYLFNBQVNrQyxFQUFZQyxFQUFXQyxHQUM1QixJQUFNMUwsRUFBTXJULE9BQU8rSyxPQUFPK1QsR0FBYSxNQUN2QyxPQUFPQyxHQUFXLElBQUFuTixRQUFPeUIsRUF0STdCLFNBQTBCMkwsR0FDdEIsSUFBSSxJQUFBcE0sU0FBUW9NLEdBQVMsQ0FJakIsSUFIQSxJQUFNM0wsRUFBTSxHQUNSMVAsRUFBSXFiLEVBQU9wYixPQUNYcWIsU0FDR3RiLEtBQ0hzYixFQUFRRCxFQUFPcmIsR0FDZnNCLEdBQXNCLG1CQUFWZ2EsRUFBdUJBLEVBQU1oWSxTQUFXZ1ksRUFBTWhZLFFBQVFsRixNQUFRa2QsRUFBTWhhLEdBQUtnYSxFQUFNbGQsTUFBUWtkLEVBQU1oYSxHQUNyR0EsS0FDQW9PLEVBQUlwTyxJQUFNZ2EsR0FHbEIsT0FBTzVMLEVBR2IsT0FBTzJMLEVBdUh5QkUsQ0FBaUJILElBQWExTCxFQWtDaEUsU0FBU21MLEVBQWFNLEVBQVdDLEdBQzdCLFlBQW9CcmIsSUFBYnFiLEVBQXlCRCxFQUFZQyxFQTNGaERSLEVBQU8zWixLQUFPLFNBQVVrYSxFQUFXQyxFQUFVeFQsR0FDekMsT0FBS0EsRUFjTXVULEdBQWFDLEVBQ2IsV0FDSCxJQUFNSSxFQUFtQyxtQkFBYkosRUFBMEJBLEVBQVM1ZSxLQUFLb0wsR0FBTXdULEVBQ3BFSyxFQUFtQyxtQkFBZE4sRUFBMkJBLEVBQVUzZSxLQUFLb0wsUUFBTTdILEVBQzNFLE9BQUl5YixFQUNPVCxFQUFVUyxFQUFjQyxHQUV4QkEsUUFQWixFQWJFTCxFQUdtQixtQkFBYkEsRUFDQUQsRUFFTkEsRUFJRSxXQUNILE9BQU9KLEVBQVVLLEVBQVM1ZSxLQUFLK1EsTUFBTzROLEVBQVUzZSxLQUFLK1EsUUFKOUM2TixFQU5GRCxHQTJCakJQLEVBQU8vUyxHQUFLLFNBQVVzVCxFQUFXQyxFQUFVeFQsR0FDdkMsR0FBS0EsSUFBTXdULEdBQWdDLG1CQUFiQSxFQUE5QixDQUdBLElBQU1NLEVBQU1OLEdBQVlELEVBQ3hCLE9BQU92VCxHQUFxQixtQkFBUjhULEVBQXFCQSxFQUFJbGYsS0FBS29MLEdBQU04VCxJQUs1RGQsRUFBT25MLEtBQ1BtTCxFQUFPZSxRQUNQZixFQUFPZ0IsTUFDUGhCLEVBQU9pQixTQUNQakIsRUFBT2tCLFNBQ1BsQixFQUFPbUIsY0FDUG5CLEVBQU9vQixTQUNQcEIsRUFBT3FCLGNBQ1ByQixFQUFPc0IsVUFDUHRCLEVBQU91QixTQUFXLFNBQVVoQixFQUFXQyxHQUNuQyxPQUFPQSxFQUFXRCxFQUFZQSxFQUFVOVcsT0FBTytXLElBQVksSUFBQW5NLFNBQVFtTSxHQUFZQSxFQUFXLENBQUNBLEdBQVlELEdBUzNHLENBQUMsWUFBYSxZQUFhLG1CQUFvQixTQUFVLGFBQWMsV0FBV3pWLFNBQVEsU0FBVXhCLEdBQ2hHMFcsRUFBTzFXLEVBQU8sS0FBT2dYLEtBR3pCTixFQUFPMUYsTUFBUTBGLEVBQU93QixPQUFTLFNBQVVqQixFQUFXQyxHQUNoRCxJQUFLQSxFQUFVLE9BQU9ELEVBQ3RCLElBQUtBLEVBQVcsT0FBT0MsRUFDdkIsSUFBTU0sRUFBTSxHQUVaLElBQUssSUFBSXJVLEtBRFQsSUFBQTRHLFFBQU95TixFQUFLUCxHQUNJQyxFQUFVLENBQ3RCLElBQUloWCxFQUFTc1gsRUFBSXJVLEdBQ2JwQixFQUFRbVYsRUFBUy9ULEdBQ2pCakQsS0FBVyxJQUFBNkssU0FBUTdLLEtBQ25CQSxFQUFTLENBQUNBLElBRWRzWCxFQUFJclUsR0FBT2pELEVBQVNBLEVBQU9DLE9BQU80QixHQUFTLENBQUNBLEdBR2hELE9BQU95VixHQUlYZCxFQUFPL1EsTUFBUStRLEVBQU83RixRQUFVNkYsRUFBT3hGLFNBQVcsU0FBVStGLEVBQVdDLEdBQ25FLElBQUtBLEVBQVUsT0FBT0QsRUFDdEIsSUFBS0EsRUFBVyxPQUFPQyxFQUN2QixJQUFNTSxFQUFNcmYsT0FBTytLLE9BQU8sTUFHMUIsT0FGQSxJQUFBNkcsUUFBT3lOLEVBQUtQLElBQ1osSUFBQWxOLFFBQU95TixFQUFLTixHQUNMTSxHQU9YLElBQU1aLEVBQWdCLGMsbUdDL0tOek0sVSxFQTRKQWtJLFdBbktoQixJLEVBQUEsb0Isb0NBQ0EsNEJBR0EsSUFBSWpKLEVBQU0sRUFHSCxTQUFTZSxFQUFRekcsRUFBSW9PLEVBQVNsVyxFQUFVd0QsR0F5QjNDLEdBeEJBc0UsRUFBR3VNLFVBQVVwVyxLQUFLd1AsTUFDZGpLLElBQ0EsSUFBQTJLLFFBQU9WLEtBQU1qSyxHQUdqQmlLLEtBQUtqTSxHQUFLZ00sSUFDVkMsS0FBSzNGLEdBQUtBLEVBQ1YyRixLQUFLdkMsV0FBYWdMLEVBR2xCekksS0FBS3VFLE9BQU94TyxHQUFTQSxFQUFRd08sS0FHN0J2RSxLQUFLK0UsTUFBUS9FLEtBQUs4RSxLQUdsQjlFLEtBQUs4TyxLQUFPLEdBR1o5TyxLQUFLK08sT0FBUyxJQUFJQyxJQUdsQmhQLEtBQUtoSyxHQUFLekQsRUFFYSxtQkFBWmtXLEVBQ1B6SSxLQUFLMUcsT0FBU21QLEVBQ2R6SSxLQUFLaVAsWUFBU3pjLE1BQ1gsQ0FDSCxJQUFNMlAsRUEyRmQsU0FBeUIrTSxHQUVyQixJQUFNL00sRUFBTSxDQUFDK00sSUFEYkEsRUFBTUEsRUFBSWxSLFFBR1YsT0FEQW1FLEVBQUluUixLQUFNLElBQUF1YixjQUFhMkMsR0FDaEIvTSxFQS9GU2dOLENBQWdCMUcsR0FDNUJ6SSxLQUFLMUcsT0FBUzZJLEVBQUluUixJQUNsQmdQLEtBQUtpUCxPQUFTLFNBQUMvZCxHQUNYbUosRUFBR29PLEdBQVd2WCxHQUlsQjhPLEtBQUs4RSxLQUNMOUUsS0FBSzlPLFdBQVFzQixFQUVid04sS0FBSzlPLE1BQVE4TyxLQUFLaFAsTUFJMUI4UCxFQUFRL1IsVUFBWSxDQUNoQmlDLElBRGdCLFdBRVosSUFBTXFKLEVBQUsyRixLQUFLM0YsR0FFaEJ5RixVQUFJSSxPQUFTRixLQUNiLElBQUk5TyxFQUFTOE8sS0FBSzFHLE9BQU9ySyxLQUFLb0wsRUFBSUEsR0FNbEMsT0FMSTJGLEtBQUt4QixVQUNMdE4sRUFBUW1KLEVBQUc0TyxjQUFjL1gsRUFBTzhPLEtBQUt4QixVQUd6Q3NCLFVBQUlJLE9BQVMsS0FDTmhQLEdBR1hELElBZGdCLFNBY1pDLEdBQ0E4TyxLQUFLaVAsT0FBT2hnQixLQUFLK1EsS0FBSzNGLEdBQUluSixJQUc5QjJELE9BbEJnQixXQXVCUm1MLEtBQUs4RSxLQUNMOUUsS0FBSytFLE9BQVEsRUFDTC9FLEtBQUt1RSxLQUdidkUsS0FBS29QLE1BNERqQixTQUFxQjNPLEdBQ2pCLElBQU0xTSxFQUFLME0sRUFBUTFNLEdBRUosTUFBWHNiLEVBQUl0YixLQUNKc2IsRUFBSXRiLEdBQU11QyxFQUFNNUQsT0FDaEI0RCxFQUFNOUYsS0FBS2lRLElBR1Y2TyxJQUNEQSxHQUFVLEVBQ1Z0RyxFQUFTdUcsSUF4RUxDLENBQVl4UCxPQU1wQm9QLElBaENnQixXQWlDWixJQUFNbGUsRUFBUThPLEtBQUtoUCxNQUNieWUsRUFBV3pQLEtBQUs5TyxNQUN0QjhPLEtBQUs5TyxNQUFRQSxHQUNUQSxJQUFVdWUsSUFBWSxJQUFBekQsVUFBUzlhLEtBQy9COE8sS0FBS2hLLEdBQUcvRyxLQUFLK1EsS0FBSzNGLEdBQUluSixFQUFPdWUsSUFJckNyUCxPQXpDZ0IsU0F5Q1Q5TixHQUtFME4sS0FBSytPLE9BQU9NLElBQUkvYyxFQUFJeUIsTUFDckJpTSxLQUFLOE8sS0FBS3RlLEtBQUs4QixHQUNmME4sS0FBSytPLE9BQU8xQyxJQUFJL1osRUFBSXlCLElBQ3BCekIsRUFBSStOLE9BQU9MLFFBSW5CL0QsU0FyRGdCLFdBc0RaK0QsS0FBSzNGLEdBQUd1TSxVQUFVNVQsT0FBT2dOLEtBQUszRixHQUFHdU0sVUFBVXJXLFFBQVF5UCxNQUFPLEdBRTFELElBREEsSUFBSXZOLEVBQUl1TixLQUFLOE8sS0FBS3BjLE9BQ1hELEtBQ0x1TixLQUFLOE8sS0FBS3JjLEdBQUc4TixVQUFVUCxNQUV6QkEsS0FBSzNGLEdBQUsyRixLQUFLaEssR0FBS2dLLEtBQUs5TyxNQUFRLE1BR3JDOFQsU0E5RGdCLFdBK0RaLElBQU0wSyxFQUFVNVAsVUFBSUksT0FDcEJGLEtBQUs5TyxNQUFROE8sS0FBS2hQLE1BQ2xCZ1AsS0FBSytFLE9BQVEsRUFDYmpGLFVBQUlJLE9BQVN3UCxHQUdqQnZQLE9BckVnQixXQXNFWkgsS0FBSzhPLEtBQUszVyxTQUFRLFNBQUE3RixHQUNkQSxFQUFJNk4sY0FhaEIsSUFBTTdKLEVBQVEsR0FDVitZLEVBQU0sR0FDTkMsR0FBVSxFQWdCZCxTQUFTQyxJQUNMalosRUFBTTZCLFNBQVEsU0FBQXdYLEdBQ1ZBLEVBQUVQLFNBSU5FLEdBQVUsRUFDVkQsRUFBTSxHQUNOL1ksRUFBTTVELE9BQVMsRUFHWixTQUFTc1csRUFBU2hULEVBQUk4VixHQUNmNVgsUUFBUUMsVUFDaEI1QyxNQUFLLFdBQ0h1YSxFQUFLOVYsRUFBRy9HLEtBQUs2YyxHQUFPOVYiLCJmaWxlIjoibWluaS12dWUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cbiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4gXHR3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0XHRpZiAocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdH0gO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdGlmIChudWxsKSBzY3JpcHQuY3Jvc3NPcmlnaW4gPSBudWxsO1xuIFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChyZXF1ZXN0VGltZW91dCkge1xuIFx0XHRyZXF1ZXN0VGltZW91dCA9IHJlcXVlc3RUaW1lb3V0IHx8IDEwMDAwO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0aWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xuIFx0XHRcdH1cbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiBcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xuIFx0XHRcdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHJlcXVlc3RQYXRoLCB0cnVlKTtcbiBcdFx0XHRcdHJlcXVlc3QudGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuIFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0aWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuIFx0XHRcdFx0aWYgKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4gXHRcdFx0XHRcdC8vIHRpbWVvdXRcbiBcdFx0XHRcdFx0cmVqZWN0KFxuIFx0XHRcdFx0XHRcdG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIilcbiBcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xuIFx0XHRcdFx0XHQvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG4gXHRcdFx0XHRcdHJlc29sdmUoKTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XG4gXHRcdFx0XHRcdC8vIG90aGVyIGZhaWx1cmVcbiBcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIGZhaWxlZC5cIikpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuIFx0XHRcdFx0XHRcdHJlamVjdChlKTtcbiBcdFx0XHRcdFx0XHRyZXR1cm47XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0cmVzb2x2ZSh1cGRhdGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHR2YXIgaG90QXBwbHlPblVwZGF0ZSA9IHRydWU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiNjI4MjkwYmIzOTJlOWQxODVhZjlcIjtcbiBcdHZhciBob3RSZXF1ZXN0VGltZW91dCA9IDEwMDAwO1xuIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XG4gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IFtdO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdGlmICghbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gXHRcdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcbiBcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4gXHRcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG4gXHRcdFx0XHRcdFx0cmVxdWVzdCArXG4gXHRcdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0KTtcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuIFx0XHR9O1xuIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XG4gXHRcdFx0XHR9LFxuIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fTtcbiBcdFx0Zm9yICh2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcImVcIiAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJ0XCJcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgT2JqZWN0RmFjdG9yeShuYW1lKSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKSBob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xuIFx0XHRcdFx0dGhyb3cgZXJyO1xuIFx0XHRcdH0pO1xuXG4gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xuIFx0XHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbiBcdFx0XHRcdFx0aWYgKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH07XG4gXHRcdGZuLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRcdGlmIChtb2RlICYgMSkgdmFsdWUgPSBmbih2YWx1ZSk7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18udCh2YWx1ZSwgbW9kZSAmIH4xKTtcbiBcdFx0fTtcbiBcdFx0cmV0dXJuIGZuO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgaG90ID0ge1xuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG4gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4gXHRcdFx0X21haW46IGhvdEN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cbiBcdFx0XHQvLyBNb2R1bGUgQVBJXG4gXHRcdFx0YWN0aXZlOiB0cnVlLFxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG4gXHRcdHJldHVybiBob3Q7XG4gXHR9XG5cbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbiBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90RGVmZXJyZWQ7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xuIFx0XHR2YXIgaXNOdW1iZXIgPSAraWQgKyBcIlwiID09PSBpZDtcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4gXHRcdH1cbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4gXHRcdFx0aWYgKCF1cGRhdGUpIHtcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XG4gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0e1xuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nID09PSAwICYmXG4gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuIFx0XHRcdHJldHVybjtcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbiBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbiBcdFx0aWYgKGhvdEFwcGx5T25VcGRhdGUpIHtcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcbiBcdFx0XHRcdH0pXG4gXHRcdFx0XHQudGhlbihcbiBcdFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuIFx0XHRcdFx0XHR9LFxuIFx0XHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0KTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG5cbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbiBcdFx0XHR9O1xuIFx0XHR9XG5cbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcbiBcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuIFx0XHRcdCk7XG4gXHRcdH07XG5cbiBcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbiBcdFx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cbiBcdFx0XHRcdHZhciByZXN1bHQ7XG4gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcbiBcdFx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcbiBcdFx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0ZGVmYXVsdDpcbiBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XG4gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0FwcGx5KSB7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gaG90VXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRcdFx0XHRpZiAoXG4gXHRcdFx0XHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcyxcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdFx0XHRcdClcbiBcdFx0XHRcdFx0XHQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG4gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZCAmJlxuIFx0XHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuIFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcbiBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcbiBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdH0pO1xuXG4gXHRcdHZhciBpZHg7XG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuIFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XG4gXHRcdFx0XHRjYihkYXRhKTtcbiBcdFx0XHR9XG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcblxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcbiBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XG4gXHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuIFx0XHR2YXIgZGVwZW5kZW5jeTtcbiBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuIFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG4gXHRcdGZvciAobW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG4gXHRcdHZhciBlcnJvciA9IG51bGw7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcbiBcdFx0XHRcdFx0XHRjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuIFx0XHRcdFx0XHRcdGlmIChjYikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGNiKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0Y2IgPSBjYWxsYmFja3NbaV07XG4gXHRcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRcdGNiKG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcbiBcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XG4gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcbiBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnIyO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG4gXHRcdGlmIChlcnJvcikge1xuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiBcdFx0fVxuXG4gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZShcIi4vc3JjL21haW4uanNcIikoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9tYWluLmpzXCIpO1xuIiwiaW1wb3J0IERpcmVjdGl2ZSBmcm9tICcuL2RpcmVjdGl2ZS5qcydcbmltcG9ydCB7dG9BcnJheSwgcmVwbGFjZSwgZ2V0QXR0ciwgZ2V0QmluZEF0dHJ9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQge2RlZmluZVJlYWN0aXZlfSBmcm9tICcuL29ic2VydmVyLmpzJ1xuXG4vLyDmjIfku6Tmj4/ov7DnrKblrrnlmahcbmNvbnN0IGRlcyA9IFtdXG4vLyDnlKjmnaXliKTmlq3lvZPliY3mmK/lkKblnKjop6PmnpDmjIfku6RcbmxldCBwZW5kaW5nID0gZmFsc2VcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUodm0sIGVsKSB7XG4gICAgLy8g5aaC5p6c5b2T5YmN6IqC54K55LiN5pivdi1mb3LmjIfku6Qg5YiZ57un57ut6Kej5p6Q5a2Q6IqC54K5XG4gICAgaWYgKCFjb21waWxlTm9kZShlbCwgdm0pKSB7XG4gICAgICAgIGlmIChlbC5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICAgIGNvbXBpbGVOb2RlTGlzdChlbC5jaGlsZE5vZGVzLCB2bSlcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDlvZPliY3lnKjop6PmnpDmjIfku6Qg5aaC5p6c5pyJ5paw55qE5oyH5LukIOWImeWKoOWIsGRlc+aVsOe7hOWQjumdoiDmlbDnu4TkvJrmjInpobrluo/miafooYzmj4/ov7DnrKYg5YyF5ous5paw55qE5o+P6L+w56ymXG4gICAgLy8g5YGH5aaC5pyJNeS4quaPj+i/sOespiDlvZPliY3miafooYzliLDnrKwy5LiqIOWmguaenOacieaWsOeahCDliJlwdXNo6L+b5pWw57uEIFxuICAgIGlmICghcGVuZGluZykge1xuICAgICAgICBsZXQgZGlyLCBkZXNjcmlwdG9yXG4gICAgICAgIHBlbmRpbmcgPSB0cnVlXG4gICAgICAgIHNvcnREZXNjcmlwdG9ycyhkZXMpXG4gICAgICAgIHdoaWxlIChkZXMubGVuZ3RoKSB7ICAgICAgIFxuICAgICAgICAgICAgZGVzY3JpcHRvciA9IGRlcy5zaGlmdCgpXG4gICAgICAgICAgICBkaXIgPSBuZXcgRGlyZWN0aXZlKGRlc2NyaXB0b3IsIGRlc2NyaXB0b3Iudm0pICBcbiAgICAgICAgICAgIGRpci5fYmluZCgpICAgICAgICAgIFxuICAgICAgICAgICAgZGVzY3JpcHRvci52bS5fZGlyZWN0aXZlcy5wdXNoKGRpcikgIFxuICAgICAgICB9XG4gICAgICAgIHBlbmRpbmcgPSBmYWxzZVxuICAgICAgICB2bS5fY2FsbEhvb2soJ2NvbXBpbGVkJylcbiAgICAgICAgLy8gSlPkuLvnur/nqIvmiafooYzlrozlho3ov5vooYzlup/lvIPmjIfku6Tlm57mlLZcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0ZWFyZG93bih2bSlcbiAgICAgICAgICAgIHZtLl9jYWxsSG9vaygnZGVzdHJveWVkJylcbiAgICAgICAgfSwgMClcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVOb2RlKG5vZGUsIHZtKSB7XG4gICAgY29uc3QgdHlwZSA9IG5vZGUubm9kZVR5cGVcbiAgICBpZiAodHlwZSA9PSAxKSB7XG4gICAgICAgIHJldHVybiBjb21waWxlRWxlbWVudChub2RlLCB2bSlcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gMykge1xuICAgICAgICByZXR1cm4gY29tcGlsZVRleHROb2RlKG5vZGUsIHZtKVxuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBjb21waWxlTm9kZUxpc3Qobm9kZXMsIHZtKSB7XG4gICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgaWYgKCFjb21waWxlTm9kZShub2RlLCB2bSkpIHsgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7ICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb21waWxlTm9kZUxpc3Qobm9kZS5jaGlsZE5vZGVzLCB2bSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmNvbnN0IG9uUmUgPSAvXih2LW9uOnxAKS9cbmNvbnN0IGRpckF0dHJSRSA9IC9edi0oW146XSspKD86JHw6KC4qKSQpL1xuY29uc3QgYmluZFJlID0gL14odi1iaW5kOnw6KS9cbmNvbnN0IHRhZ1JFID0gL1xce1xce1xceygoPzoufFxcbikrPylcXH1cXH1cXH18XFx7XFx7KCg/Oi58XFxuKSs/KVxcfVxcfS9nXG5jb25zdCBjb21tb25UYWdSRSA9IC9eKGRpdnxwfHNwYW58aW1nfGF8YnxpfGJyfHVsfG9sfGxpfGgxfGgyfGgzfGg0fGg1fGg2fGNvZGV8cHJlfHRhYmxlfHRofHRkfHRyfGZvcm18bGFiZWx8aW5wdXR8c2VsZWN0fG9wdGlvbnxuYXZ8YXJ0aWNsZXxzZWN0aW9ufGhlYWRlcnxmb290ZXJ8YnV0dG9ufHRleHRhcmVhKSQvaVxuY29uc3QgcmVzZXJ2ZWRUYWdSRSA9IC9eKHNsb3R8cGFydGlhbHxjb21wb25lbnQpJC9pXG5cbmZ1bmN0aW9uIGNvbXBpbGVFbGVtZW50KG5vZGUsIHZtKSB7ICAgXG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IHZtLiRvcHRpb25zLmRpcmVjdGl2ZXNcbiAgICBjb25zdCB0YWcgPSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSBcbiAgICBpZiAoIWNvbW1vblRhZ1JFLnRlc3QodGFnKSAmJiAhcmVzZXJ2ZWRUYWdSRS50ZXN0KHRhZykpIHsgICAgXG4gICAgICAgIGlmICh2bS4kb3B0aW9ucy5jb21wb25lbnRzW3RhZ10pIHtcbiAgICAgICAgICAgIGRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB2bSxcbiAgICAgICAgICAgICAgICBlbDogbm9kZSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnY29tcG9uZW50JyxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiB0YWcsXG4gICAgICAgICAgICAgICAgZGVmOiBkaXJlY3RpdmVzLmNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gXG4gICAgfSBlbHNlIGlmICh0YWcgPT09ICdzbG90Jykge1xuICAgICAgICBkZXMucHVzaCh7XG4gICAgICAgICAgICB2bSxcbiAgICAgICAgICAgIGVsOiBub2RlLFxuICAgICAgICAgICAgYXJnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBuYW1lOiAnc2xvdCcsXG4gICAgICAgICAgICBhdHRyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBleHByZXNzaW9uOiAnJyxcbiAgICAgICAgICAgIGRlZjogZGlyZWN0aXZlcy5zbG90XG4gICAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChub2RlLmhhc0F0dHJpYnV0ZXMoKSkgeyAgICAgICBcbiAgICAgICAgbGV0IG1hdGNoZWRcbiAgICAgICAgbGV0IGlzRm9yID0gZmFsc2VcbiAgICAgICAgY29uc3QgYXR0cnMgPSB0b0FycmF5KG5vZGUuYXR0cmlidXRlcylcbiAgICAgICAgYXR0cnMuZm9yRWFjaCgoYXR0cikgPT4geyAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBhdHRyLm5hbWUudHJpbSgpXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHIudmFsdWUudHJpbSgpXG4gICAgICAgICAgICBpZiAob25SZS50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSlcbiAgICAgICAgICAgICAgICBkZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHZtLFxuICAgICAgICAgICAgICAgICAgICBlbDogbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgYXJnOiBuYW1lLnJlcGxhY2Uob25SZSwgJycpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnb24nLFxuICAgICAgICAgICAgICAgICAgICBhdHRyOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGVmOiBkaXJlY3RpdmVzLm9uXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYmluZFJlLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKVxuICAgICAgICAgICAgICAgIC8vIOmSiOWvuei/h+a7pOWZqFxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHZhbHVlLnNwbGl0KCd8JylcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0ge1xuICAgICAgICAgICAgICAgICAgICB2bSxcbiAgICAgICAgICAgICAgICAgICAgZWw6IG5vZGUsXG4gICAgICAgICAgICAgICAgICAgIGFyZzogbmFtZS5yZXBsYWNlKGJpbmRSZSwgJycpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYmluZCcsXG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRlZjogZGlyZWN0aXZlcy5iaW5kXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSB2YWx1ZXMuc2hpZnQoKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJzID0gW11cbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB2YWx1ZS50cmltKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgdGVtcC5leHByZXNzaW9uID0gZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgICAgICB0ZW1wLmZpbHRlcnMgPSBmaWx0ZXJzXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcC5leHByZXNzaW9uID0gdmFsdWVcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZXMucHVzaCh0ZW1wKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaGVkID0gbmFtZS5tYXRjaChkaXJBdHRyUkUpKSB7ICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09ICd2LXRleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHZhbHVlLnNwbGl0KCd8JylcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IG5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmc6IG5hbWUucmVwbGFjZShiaW5kUmUsICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWY6IGRpcmVjdGl2ZXMudGV4dFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHByZXNzaW9uID0gdmFsdWVzLnNoaWZ0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcnMgPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLmV4cHJlc3Npb24gPSBleHByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLmZpbHRlcnMgPSBmaWx0ZXJzXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLmV4cHJlc3Npb24gPSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzLnB1c2godGVtcClcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5hbWUgIT09ICd2LWVsc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBkZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB2bSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBub2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLnJlcGxhY2UoL152LS8sICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogZGlyZWN0aXZlc1ttYXRjaGVkWzFdXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09ICd2LWZvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNGb3IgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gaXNGb3JcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVUZXh0Tm9kZShub2RlLCB2bSkge1xuICAgIGNvbnN0IHRva2VucyA9IHBhcnNlVGV4dChub2RlLm5vZGVWYWx1ZSwgdm0pXG4gICAgaWYgKCF0b2tlbnMpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKVxuICAgIGxldCBlbFxuICAgIHRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcbiAgICAgICAgZWwgPSB0b2tlbi50YWcgPyBwcm9jZXNzVGV4dFRva2VuKHRva2VuLCB2bSkgOiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0b2tlbi52YWx1ZSlcbiAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChlbClcbiAgICAgICAgaWYgKHRva2VuLnRhZykge1xuICAgICAgICAgICAgZGVzLnB1c2godG9rZW4uZGVzY3JpcHRvcilcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyDlvILmraXmm7/mjaLoioLngrnmmK/kuLrkuobpmLLmraLlnKhjb21waWxlTm9kZUxpc3TkuK3lvqrnjq/lpITnkIboioLngrnml7Yg56qB54S25Yig5o6J5YW25Lit5LiA5Liq6IqC54K56ICM6YCg5oiQ5aSE55CG6ZSZ6K+vXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgIHJlcGxhY2Uobm9kZSwgZnJhZylcbiAgICB9KSBcbn1cbi8vIOWwhuaWh+aho+iKgueCueino+mHiuS4ulRPS0VOXG5mdW5jdGlvbiBwYXJzZVRleHQodGV4dCwgdm0pIHtcbiAgICBsZXQgaW5kZXggPSAwXG4gICAgbGV0IGxhc3RJbmRleCA9IDBcbiAgICBsZXQgbWF0Y2hcbiAgICBjb25zdCB0b2tlbnMgPSBbXVxuXG4gICAgd2hpbGUgKG1hdGNoID0gdGFnUkUuZXhlYyh0ZXh0KSkge1xuICAgICAgICBpbmRleCA9IG1hdGNoLmluZGV4XG5cbiAgICAgICAgaWYgKGluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRleHQuc2xpY2UobGFzdEluZGV4LCBpbmRleCksXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IG1hdGNoWzJdLFxuICAgICAgICAgICAgdGFnOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG4gICAgfVxuXG4gICAgaWYgKGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiB0ZXh0LnNsaWNlKGxhc3RJbmRleClcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHRva2Vuc1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzVGV4dFRva2VuKHRva2VuLCB2bSkge1xuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB2bS4kb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnICcpXG4gICAgaWYgKHRva2VuLmRlc2NyaXB0b3IpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIOmSiOWvuei/h+a7pOWZqFxuICAgIGNvbnN0IHZhbHVlcyA9IHRva2VuLnZhbHVlLnNwbGl0KCd8JylcbiAgICB0b2tlbi5kZXNjcmlwdG9yID0ge1xuICAgICAgICB2bSxcbiAgICAgICAgZWwsXG4gICAgICAgIG5hbWU6ICd0ZXh0JyxcbiAgICAgICAgZGVmOiBkaXJlY3RpdmVzLnRleHQsXG4gICAgfVxuXG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzLnNoaWZ0KClcbiAgICAgICAgY29uc3QgZmlsdGVycyA9IFtdXG4gICAgICAgIFxuICAgICAgICB2YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICB0b2tlbi5kZXNjcmlwdG9yLmV4cHJlc3Npb24gPSB2YWx1ZS50cmltKClcbiAgICAgICAgdG9rZW4uZGVzY3JpcHRvci5maWx0ZXJzID0gZmlsdGVyc1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRva2VuLmRlc2NyaXB0b3IuZXhwcmVzc2lvbiA9IHRva2VuLnZhbHVlLnRyaW0oKVxuICAgIH1cblxuICAgIHJldHVybiBlbFxufVxuXG4vLyDmlbTnkIbmjIfku6TkvJjlhYjnuqcg5LyY5YWI6auY55qE5YWI5omn6KGMIOS+i+WmgnYtZm9yXG5mdW5jdGlvbiBzb3J0RGVzY3JpcHRvcnMoZGVzKSB7XG4gICAgZGVzLmZvckVhY2goZCA9PiB7XG4gICAgICAgIGlmICghZC5kZWYucHJpb3JpdHkpIHtcbiAgICAgICAgICAgIGQuZGVmLnByaW9yaXR5ID0gMTAwMFxuICAgICAgICB9XG4gICAgfSlcbiAgICBkZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICByZXR1cm4gYi5kZWYucHJpb3JpdHkgLSBhLmRlZi5wcmlvcml0eVxuICAgIH0pXG59XG5cbi8vIOWIoOmZpOW3sue7j+eUqOS4jeS4iueahOaMh+S7pCDlpoLmnpzkuI3mmK92LWlm44CBdi1mb3Ig5bm25LiU5LiN5Zyo5paH5qGj5Lit55qERE9N5YWD57Sg5Yig6Zmk5bm25ZKM55u45bqU57uR5a6a55qE5oyH5Luk44CB6KeC5a+f6ICF5Ye95pWw5Yig6ZmkXG5mdW5jdGlvbiB0ZWFyZG93bih2bSkge1xuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5XG4gICAgY29uc3QgY29udGFpbnMgPSBib2R5LmNvbnRhaW5zXG4gICAgY29uc3QgZGlycyA9IHZtLl9kaXJlY3RpdmVzXG4gICAgbGV0IGF0dHJcbiAgICBjb25zdCB0ZW1wID0gW11cbiAgICBsZXQgZGlyXG4gICAgLy8gZG9jdW1lbnQuYm9keS5jb250YWluc+WIpOaWrURPTeaYr+WQpuWcqOaWh+aho+S4rVxuICAgIHdoaWxlIChkaXJzLmxlbmd0aCkge1xuICAgICAgICBkaXIgPSBkaXJzLnNoaWZ0KClcbiAgICAgICAgYXR0ciA9IGRpci5kZXNjcmlwdG9yLmF0dHJcbiAgICAgICAgLy8g5aaC5p6cRE9N5LiN5Zyo5paH5qGj5LitIOW5tuS4lOaMh+S7pOS4jeaYr3YtZm9yIHYtaWbliJnliKDpmaTmjIfku6RcbiAgICAgICAgaWYgKCFjb250YWlucy5jYWxsKGJvZHksIGRpci5lbCkgJiYgYXR0ciAhPT0gJ3YtZm9yJyAmJiBhdHRyICE9PSAndi1pZicpIHtcbiAgICAgICAgICAgIGRpci5fdGVhcmRvd24oKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcC5wdXNoKGRpcilcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB2bS5fZGlyZWN0aXZlcyA9IFsuLi50ZW1wXVxuICAgIHRlbXAubGVuZ3RoID0gMFxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlUHJvcHModm0sIGVsLCBwcm9wc09wdGlvbnMpIHtcbiAgICBjb25zdCBkaXJlY3RpdmVzID0gdm0uJG9wdGlvbnMuZGlyZWN0aXZlc1xuICAgIGNvbnN0IHByb3BzID0gW11cbiAgICBsZXQgcHJvcCwgdmFsdWUsIG5hbWVcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHNPcHRpb25zKVxuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBuYW1lID0gcHJvcHNPcHRpb25zW2tleV1cbiAgICAgICAgcHJvcCA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBwYXRoOiBuYW1lXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh2YWx1ZSA9IGdldEJpbmRBdHRyKGVsLCBuYW1lKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIOWKqOaAgee7keWumlxuICAgICAgICAgICAgcHJvcC5keW5hbWljID0gdHJ1ZVxuICAgICAgICAgICAgcHJvcC5yYXcgPSBwcm9wLnBhcmVudFBhdGggPSB2YWx1ZVxuICAgICAgICB9IGVsc2UgaWYgKCh2YWx1ZSA9IGdldEF0dHIoZWwsIG5hbWUpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8g6Z2Z5oCB57uR5a6aXG4gICAgICAgICAgICBwcm9wLnJhdyA9IHZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMucHVzaChwcm9wKVxuICAgIH0pXG5cbiAgICB2bS5fcHJvcHMgPSB7fVxuICAgIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgIGxldCB7cGF0aCwgcmF3LCBvcHRpb25zfSA9IHByb3BcbiAgICAgICAgdm0uX3Byb3BzW3BhdGhdID0gcHJvcFxuICAgICAgICAvLyDliqjmgIHnu5HlrprliJnlu7rkuIDkuKrmjIfku6Qg5ZCm5YiZ55u05o6l5riy5p+TXG4gICAgICAgIGlmIChwcm9wLmR5bmFtaWMpIHtcbiAgICAgICAgICAgIGlmICh2bS5fY29udGV4dCkge1xuICAgICAgICAgICAgICAgIGRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdm0sXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9wJyxcbiAgICAgICAgICAgICAgICAgICAgZGVmOiBkaXJlY3RpdmVzLnByb3AsXG4gICAgICAgICAgICAgICAgICAgIHByb3AsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBwcm9wLnBhdGgsIHByb3AucmF3KVxuICAgICAgICB9XG4gICAgfSlcbn0iLCIvLyBkZXDlrp7kvovnmoRJRFxubGV0IHVpZCA9IDBcbi8vIERlcC50YXJnZXTkuLp3YXRjaGVy5a6e5L6LXG5EZXAudGFyZ2V0ID0gbnVsbFxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEZXAoKSB7XG4gICAgdGhpcy5pZCA9IHVpZCsrXG4gICAgdGhpcy5zdWJzID0gW10gICAgXG59XG5cbkRlcC5wcm90b3R5cGUgPSB7XG4gICAgZGVwZW5kKCkge1xuICAgICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICAgICAgRGVwLnRhcmdldC5hZGREZXAodGhpcylcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGRTdWIoc3ViKSB7XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKHN1YilcbiAgICB9LFxuXG4gICAgcmVtb3ZlU3ViKHN1Yikge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuc3Vicy5pbmRleE9mKHN1YilcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vicy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbm90aWZ5KCkge1xuICAgICAgICB0aGlzLnN1YnMuZm9yRWFjaCh3YXRjaGVyID0+IHtcbiAgICAgICAgICAgIHdhdGNoZXIudXBkYXRlKClcbiAgICAgICAgfSlcbiAgICB9XG59IiwiaW1wb3J0IHtleHRlbmR9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQge1dhdGNoZXJ9IGZyb20gJy4vd2F0Y2hlci5qcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGlyZWN0aXZlKGRlc2NyaXB0b3IsIHZtKSB7XG4gICAgdGhpcy52bSA9IHZtXG4gICAgdGhpcy5uYW1lID0gZGVzY3JpcHRvci5uYW1lXG4gICAgdGhpcy5kZXNjcmlwdG9yID0gZGVzY3JpcHRvclxuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGRlc2NyaXB0b3IuZXhwcmVzc2lvblxuICAgIHRoaXMuZWwgPSBkZXNjcmlwdG9yLmVsXG4gICAgdGhpcy5maWx0ZXJzID0gZGVzY3JpcHRvci5maWx0ZXJzXG4gICAgdGhpcy5tb2RpZmllcnMgPSBkZXNjcmlwdG9yLm1vZGlmaWVyc1xuICAgIHRoaXMubGl0ZXJhbCA9IHRoaXMubW9kaWZpZXJzICYmIHRoaXMubW9kaWZpZXJzLmxpdGVyYWxcbn1cblxuRGlyZWN0aXZlLnByb3RvdHlwZSA9IHtcbiAgICBfYmluZCgpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHRoaXMuZGVzY3JpcHRvclxuICAgICAgICBjb25zdCBkZWYgPSBkZXNjcmlwdG9yLmRlZlxuICAgICAgICBpZiAodHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUgPSBkZWZcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCBkZWYpXG4gICAgICAgIH1cblxuICAgICAgICAvLyDlpoLmnpzmjIfku6Tlm57osIPlr7nosaHmnIliaW5k5Ye95pWw5YiZ5omn6KGMXG4gICAgICAgIGlmICh0aGlzLmJpbmQpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZCgpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5saXRlcmFsKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSAmJiB0aGlzLnVwZGF0ZShkZXNjcmlwdG9yLnJhdylcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGRpciA9IHRoaXNcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2xkVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpci51cGRhdGUodmFsdWUsIG9sZFZhbClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB3YXRjaGVyID0gdGhpcy5fd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHRoaXMudm0sIHRoaXMuZXhwcmVzc2lvbiwgdGhpcy5fdXBkYXRlLCB7XG4gICAgICAgICAgICAgICAgZmlsdGVyczogdGhpcy5maWx0ZXJzXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAvLyDnrKzkuIDmrKHmm7TmlrDmuLLmn5NcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKHdhdGNoZXIudmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3dhdGNoZXIuc2V0KHZhbHVlKVxuICAgIH0sXG5cbiAgICBfdGVhcmRvd24oaSkge1xuICAgICAgICBpZiAodGhpcy51bmJpbmQpIHtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kKClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl93YXRjaGVyKSB7XG4gICAgICAgICAgICB0aGlzLl93YXRjaGVyLnRlYXJkb3duKClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudm0gPSB0aGlzLmVsID0gdGhpcy5fd2F0Y2hlciA9IG51bGxcbiAgICB9XG59IiwiaW1wb3J0IHtvbiwgb2ZmLCBiaW5kLCBpc0FycmF5LCBnZXRBdHRyLCByZW1vdmUsIHJlcGxhY2UsIGluc2VydH0gZnJvbSAnLi91dGlscydcbmltcG9ydCB7Y29tcGlsZX0gZnJvbSAnLi9jb21waWxlLmpzJ1xuaW1wb3J0IHtkZWZpbmVSZWFjdGl2ZX0gZnJvbSAnLi9vYnNlcnZlci5qcydcbmltcG9ydCB7V2F0Y2hlcn0gZnJvbSAnLi93YXRjaGVyLmpzJ1xuXG5jb25zdCBPTiA9IDcwMFxuY29uc3QgTU9ERUwgPSA4MDBcbmNvbnN0IEJJTkQgPSA4NTBcbmNvbnN0IENPTVBPTkVOVCA9IDE1MDBcbmNvbnN0IElGID0gMjEwMFxuY29uc3QgRk9SID0gMjIwMFxuY29uc3QgU0xPVCA9IDIzMDBcblxuXG5jb25zdCBoYW5kbGVycyA9IHtcbiAgICB0ZXh0OiB7XG4gICAgICAgIGJpbmQoKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuc2V0KHRoaXMudmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbih0aGlzLmVsLCAnaW5wdXQnLCB0aGlzLmxpc3RlbmVyKVxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5lbC52YWx1ZSA9IHZhbHVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgdW5iaW5kKCkge1xuICAgICAgICAgICAgb2ZmKHRoaXMuZWwsICdpbnB1dCcsIHRoaXMubGlzdGVuZXIpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2VsZWN0OiB7XG4gICAgICAgIGJpbmQoKSB7XG4gICAgICAgICAgICBjb25zdCBlbCAgPSB0aGlzLmVsXG4gICAgICAgICAgICBsZXQgbXVsdGlwbGUgPSB0aGlzLm11bHRpcGxlID0gZWwuaGFzQXR0cmlidXRlKCdtdWx0aXBsZScpXG5cbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUoZWwsIG11bHRpcGxlKVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KHZhbHVlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvbihlbCwgJ2NoYW5nZScsIHRoaXMubGlzdGVuZXIpXG5cbiAgICAgICAgICAgIC8vIOWIneWni+WMliDlr7nmr5TlgLzmnInmsqHmnInnm7jnrYkg5aaC5p6c5pyJ5bCx6YCJ5LitXG4gICAgICAgICAgICBnZXRWYWx1ZShlbCwgbXVsdGlwbGUsIHRydWUpXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZWxcbiAgICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMVxuICAgICAgICAgICAgY29uc3QgbXVsdGkgPSB0aGlzLm11bHRpcGxlICYmIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gZWwub3B0aW9uc1xuICAgICAgICAgICAgbGV0IGkgPSBvcHRpb25zLmxlbmd0aFxuICAgICAgICAgICAgbGV0IG9wLCB2YWxcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBvcCA9IG9wdGlvbnNbaV1cbiAgICAgICAgICAgICAgICB2YWwgPSBvcC52YWx1ZVxuICAgICAgICAgICAgICAgIG9wLnNlbGVjdGVkID0gbXVsdGk/IHZhbHVlLmluZGV4T2YodmFsKSA+IC0xIDogdmFsdWUgPT0gdmFsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdW5iaW5kKCkge1xuICAgICAgICAgICAgb2ZmKHRoaXMuZWwsICdjaGFuZ2UnLCB0aGlzLmxpc3RlbmVyKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJhZGlvOiB7XG4gICAgICAgIGJpbmQoKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZXQodGhpcy52YWx1ZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb24odGhpcy5lbCwgJ2NoYW5nZScsIHRoaXMubGlzdGVuZXIpXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZWxcbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSBlbC52YWx1ZSA9PSB2YWx1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIHVuYmluZCgpIHtcbiAgICAgICAgICAgIG9mZih0aGlzLmVsLCAnY2hhbmdlJywgdGhpcy5saXN0ZW5lcilcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjaGVja2JveDoge1xuICAgICAgICBiaW5kKCkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbFxuXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNDaGVja2VkID0gZWwuY2hlY2tlZFxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSBzZWxmLl93YXRjaGVyLmdldCgpXG4gICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB2YWwuaW5kZXhPZih0aGlzLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldCh2YWwuY29uY2F0KHRoaXMudmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXQodmFsLnNsaWNlKDAsIGluZGV4KS5jb25jYXQodmFsLnNsaWNlKGluZGV4ICsgMSkpKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXQoaXNDaGVja2VkKVxuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9uKGVsLCAnY2hhbmdlJywgdGhpcy5saXN0ZW5lcilcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGUodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbFxuICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgZWwuY2hlY2tlZCA9IHZhbHVlLmluZGV4T2YoZWwudmFsdWUpID4gLTFcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWwuY2hlY2tlZCA9ICEhdmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB1bmJpbmQoKSB7XG4gICAgICAgICAgICBvZmYoZWwsICdjaGFuZ2UnLCB0aGlzLmxpc3RlbmVyKVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyDpkojlr7nlkITnp43mjIfku6TnmoTlm57osIPlh73mlbBcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAvLyDmlofmnKzoioLngrkge3t0ZXh0fX1cbiAgICB0ZXh0OiB7XG4gICAgICAgIGJpbmQoKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHIgPSB0aGlzLmVsLm5vZGVUeXBlID09PSAzID8gJ2RhdGEnIDogJ3RleHRDb250ZW50J1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5lbFt0aGlzLmF0dHJdID0gdmFsdWVcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gQCB8IHYtb25cbiAgICBvbjoge1xuICAgICAgICBwcmlvcml0eTogT04sXG5cbiAgICAgICAgdXBkYXRlKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBvZmYodGhpcy5lbCwgdGhpcy5kZXNjcmlwdG9yLmFyZywgdGhpcy5oYW5kbGVyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlclxuICAgICAgICAgICAgb24odGhpcy5lbCwgdGhpcy5kZXNjcmlwdG9yLmFyZywgdGhpcy5oYW5kbGVyKVxuICAgICAgICB9LFxuXG4gICAgICAgIHVuYmluZCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBvZmYodGhpcy5lbCwgdGhpcy5kZXNjcmlwdG9yLmFyZywgdGhpcy5oYW5kbGVyKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyA6IHwgdi1iaW5kOlxuICAgIGJpbmQ6IHtcbiAgICAgICAgcHJpb3JpdHk6IEJJTkQsXG4gICAgICAgIGJpbmQoKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHIgPSB0aGlzLmRlc2NyaXB0b3IuYXJnXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSh0aGlzLmF0dHIsIHZhbHVlKVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyB2LW1vZGVsXG4gICAgbW9kZWw6IHtcbiAgICAgICAgcHJpb3JpdHk6IE1PREVMLFxuICAgICAgICBiaW5kKCkge1xuICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsXG4gICAgICAgICAgICBjb25zdCB0YWcgPSBlbC50YWdOYW1lXG4gICAgICAgICAgICBsZXQgaGFuZGxlclxuXG4gICAgICAgICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0lOUFVUJzpcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGhhbmRsZXJzW2VsLnR5cGVdIHx8IGhhbmRsZXJzLnRleHRcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdURVhUQVJFQSc6XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBoYW5kbGVycy50ZXh0XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnU0VMRUNUJzpcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGhhbmRsZXJzLnNlbGVjdFxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBoYW5kbGVyLmJpbmQuY2FsbCh0aGlzKVxuICAgICAgICAgICAgdGhpcy51cGRhdGUgPSBoYW5kbGVyLnVwZGF0ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyB2LWh0bWxcbiAgICBodG1sOiB7XG4gICAgICAgIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSB2YWx1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyB2LXNob3dcbiAgICBzaG93OiB7XG4gICAgICAgIHVwZGF0ZSh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5kaXNwbGF5ID0gISF2YWx1ZT8gJycgOiAnbm9uZSdcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gdi1pZlxuICAgIC8vIOWwhmlm5ZKMZWxzZeeahERPTemDvea4suafk+WujOavleeEtuWQjuenu+mZpCDkvYbnlKjlvJXnlKjkv53lrZjotbfmnaUg5Zyo5Y6f5L2N572u5pS+5LiA5Liq5paH5pys6IqC54K55Y2g5L2NIOagueaNruWAvHRydWUgb3IgZmFsc2Ug5p2l5bCG5a+55bqU55qE6IqC54K55re75Yqg5Yiw5Y2g5L2N6IqC54K555qE5YmN6Z2iXG4gICAgLy8g5aaC5p6c5YC85Y+Y5pu0IOWImeWwhuiKgueCueWIoOmZpOeUqOaWsOeahOabv+aNoiBcbiAgICBpZjoge1xuICAgICAgICBwcmlvcml0eTogSUYsXG4gICAgICAgIGJpbmQoKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZWxcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICAgICAgICAgIGlmIChuZXh0ICYmIGdldEF0dHIobmV4dCwgJ3YtZWxzZScpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKG5leHQpXG4gICAgICAgICAgICAgICAgdGhpcy5lbHNlRWwgPSBuZXh0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyDljaDkvY3oioLngrlcbiAgICAgICAgICAgIHRoaXMuYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpXG4gICAgICAgICAgICByZXBsYWNlKGVsLCB0aGlzLmFuY2hvcilcbiAgICAgICAgICAgIHRoaXMuaXNGaXJzdCA9IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGUodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsb25lRWxzZUVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzLmNsb25lRWxzZUVsKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0ZpcnN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvbmVFbCA9IHRoaXMuZWwuY2xvbmVOb2RlKHRydWUpXG4gICAgICAgICAgICAgICAgICAgIGluc2VydCh0aGlzLmNsb25lRWwsIHRoaXMuYW5jaG9yKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNGaXJzdCA9IGZhbHNlXG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb25lRWwgPSB0aGlzLmVsLmNsb25lTm9kZSh0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0KHRoaXMuY2xvbmVFbCwgdGhpcy5hbmNob3IpXG4gICAgICAgICAgICAgICAgICAgIH0sIDApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbG9uZUVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzLmNsb25lRWwpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9uZUVsc2VFbCA9IHRoaXMuZWxzZUVsLmNsb25lTm9kZSh0cnVlKVxuICAgICAgICAgICAgICAgICAgICBpbnNlcnQodGhpcy5jbG9uZUVsc2VFbCwgdGhpcy5hbmNob3IpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ZpcnN0ID0gZmFsc2VcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvbmVFbHNlRWwgPSB0aGlzLmVsc2VFbC5jbG9uZU5vZGUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydCh0aGlzLmNsb25lRWxzZUVsLCB0aGlzLmFuY2hvcilcbiAgICAgICAgICAgICAgICAgICAgfSwgMClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIHYtZm9yXG4gICAgLy8g5bCGdi1mb3LoioLngrnlhYvpmoYg5YaN5qC55o2u5YC855qE6ZW/5bqm5YWL6ZqG6L+b5Y675YaNY29tcGlsZea4suafkyDlpoLmnpzlgLzlj5jmm7Qg5YiZ5bCG5LmL5YmN55qE6IqC54K55YWo6YOo5Yig6ZmkIOmHjeaWsOa4suafk1xuICAgIGZvcjoge1xuICAgICAgICBwcmlvcml0eTogRk9SLFxuICAgICAgICBiaW5kKCkge1xuICAgICAgICAgICAgY29uc3QgcmUxID0gLyguKikgKD86aW58b2YpICguKikvXG4gICAgICAgICAgICBjb25zdCByZTIgPSAvXFwoKC4qKSwoLiopXFwpL1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gdGhpcy5leHByZXNzaW9uLm1hdGNoKHJlMSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoMSA9IG1hdGNoWzFdLm1hdGNoKC9cXCgoLiopLCguKilcXCkvKVxuICAgICAgICAgICAgICAgIGlmIChtYXRjaDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZUtleSA9IG1hdGNoMVsxXS50cmltKClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleEtleSA9IG1hdGNoMVsyXS50cmltKClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlS2V5ID0gbWF0Y2hbMV0udHJpbSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlS2V5ID0gbWF0Y2hbMV0udHJpbSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IG1hdGNoWzJdLnRyaW0oKVxuICAgICAgICAgICAgdGhpcy5hbmNob3IgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJylcbiAgICAgICAgICAgIHRoaXMuZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKVxuICAgICAgICAgICAgcmVwbGFjZSh0aGlzLmVsLCB0aGlzLmFuY2hvcilcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGUodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbikge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmxlbi0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzLmFuY2hvci5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKVxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBsZXQgY2xvbmVOb2RlXG4gICAgICAgICAgICBsZXQgcmUxXG4gICAgICAgICAgICBsZXQgcmUyIFxuICAgICAgICAgICAgbGV0IGh0bWxcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGAke3RoaXMuZXhwcmVzc2lvbn3lv4XpobvkuLrlr7nosaHmiJbmlbDnu4RgKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxlbiA9IDBcblxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZW4rK1xuICAgICAgICAgICAgICAgIGNsb25lTm9kZSA9IHRoaXMuZWwuY2xvbmVOb2RlKHRydWUpXG4gICAgICAgICAgICAgICAgaHRtbCA9IGNsb25lTm9kZS5pbm5lckhUTUxcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52YWx1ZUtleSkge1xuICAgICAgICAgICAgICAgICAgICByZTEgPSBuZXcgUmVnRXhwKGB7e1xcXFxzKiR7dGhpcy52YWx1ZUtleX1cXFxccyp9fWAsICdnJylcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZShyZTEsIHZhbHVlW2tleV0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluZGV4S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlMiA9IG5ldyBSZWdFeHAoYHt7XFxcXHMqJHt0aGlzLmluZGV4S2V5fVxcXFxzKn19YCwgJ2cnKVxuICAgICAgICAgICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKHJlMiwga2V5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNsb25lTm9kZS5pbm5lckhUTUwgPSBodG1sIFxuICAgICAgICAgICAgICAgIHRoaXMuZnJhZy5hcHBlbmRDaGlsZChjbG9uZU5vZGUpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21waWxlKHRoaXMudm0sIHRoaXMuZnJhZylcbiAgICAgICAgICAgIGluc2VydCh0aGlzLmZyYWcsIHRoaXMuYW5jaG9yKVxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21wb25lbnQ6IHtcbiAgICAgICAgcHJpb3JpdHk6IENPTVBPTkVOVCxcblxuICAgICAgICBiaW5kKCkge1xuICAgICAgICAgICAgdGhpcy5hbmNob3IgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJylcbiAgICAgICAgICAgIHJlcGxhY2UodGhpcy5lbCwgdGhpcy5hbmNob3IpXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuYnVpbGQoKVxuICAgICAgICAgICAgaW5zZXJ0KGNoaWxkLiRlbCwgdGhpcy5hbmNob3IpXG4gICAgICAgIH0sXG5cbiAgICAgICAgYnVpbGQoKSB7XG4gICAgICAgICAgICB0aGlzLkNvbXBvbmVudCA9IHRoaXMudm0uJG9wdGlvbnMuY29tcG9uZW50c1t0aGlzLmV4cHJlc3Npb25dXG4gICAgICAgICAgICBpZiAoIXRoaXMuQ29tcG9uZW50Lm9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLkNvbXBvbmVudC5vcHRpb25zLnRlbXBsYXRlID0gJzxkaXY+PC9kaXY+J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLmV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgZWw6IHRoaXMuZWwuY2xvbmVOb2RlKHRydWUpLFxuICAgICAgICAgICAgICAgIC8vIOe7hOS7tuagh+ivhlxuICAgICAgICAgICAgICAgIF9hc0NvbXBvbmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyDniLbnuqfkuIrkuIvmloflr7nosaFcbiAgICAgICAgICAgICAgICBfY29udGV4dDogdGhpcy52bSxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHRoaXMudm0sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuQ29tcG9uZW50KG9wdGlvbnMpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcHJvcDoge1xuICAgICAgICBiaW5kKCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLnZtXG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBjaGlsZC5fY29udGV4dFxuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHRoaXMuZGVzY3JpcHRvci5wcm9wXG4gICAgICAgICAgICBjb25zdCBjaGlsZEtleSA9IHByb3AucGF0aFxuICAgICAgICAgICAgY29uc3QgcGFyZW50S2V5ID0gcHJvcC5wYXJlbnRQYXRoXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRXYXRjaGVyID0gdGhpcy5wYXJlbnRXYXRjaGVyID0gbmV3IFdhdGNoZXIocGFyZW50LCBwYXJlbnRLZXksIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgIGNoaWxkW3Byb3AucGF0aF0gPSB2YWxcbiAgICAgICAgICAgIH0sIHtzeW5jOiB0cnVlfSlcbiAgICAgICAgICAgIGRlZmluZVJlYWN0aXZlKGNoaWxkLCBwcm9wLnBhdGgsIHBhcmVudFdhdGNoZXIudmFsdWUpXG4gICAgICAgIH0sXG5cbiAgICAgICAgdW5iaW5kKCkge1xuXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNsb3Q6IHtcbiAgICAgICAgcHJpb3JpdHk6IFNMT1QsXG5cbiAgICAgICAgYmluZCgpIHtcbiAgICAgICAgICAgIGxldCBuYW1lID0gZ2V0QXR0cih0aGlzLmVsLCAnbmFtZScpIFxuICAgICAgICAgICAgaWYgKG5hbWUgPT0gbnVsbCkgeyBcbiAgICAgICAgICAgICAgICBuYW1lID0gJ2RlZmF1bHQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy52bS5fc2xvdENvbnRlbnRzICYmIHRoaXMudm0uX3Nsb3RDb250ZW50c1tuYW1lXVxuICAgICAgICAgICAgcmVwbGFjZSh0aGlzLmVsLCBjb250ZW50KVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyDojrflj5ZzZWxlY3RlZOmAieS4reeahOWAvFxuZnVuY3Rpb24gZ2V0VmFsdWUoZWwsIG11bHRpLCBpbml0KSB7XG4gICAgY29uc3QgcmVzID0gbXVsdGk/IFtdIDogbnVsbFxuICAgIGxldCBvcCwgc2VsZWN0ZWRcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG9wID0gZWwub3B0aW9uc1tpXVxuICAgICAgICBzZWxlY3RlZCA9IGluaXQ/IG9wLmhhc0F0dHJpYnV0ZSgnc2VsZWN0ZWQnKSA6IG9wLnNlbGVjdGVkXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgaWYgKG11bHRpKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2gob3AudmFsdWUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcC52YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbn0iLCJpbXBvcnQgb2JzZXJ2ZSBmcm9tICcuL29ic2VydmVyLmpzJ1xuaW1wb3J0IHtXYXRjaGVyLCBuZXh0VGlja30gZnJvbSAnLi93YXRjaGVyLmpzJ1xuaW1wb3J0IHt0b0FycmF5LCBpc0FycmF5LCBhZGRDbGFzcywgZXh0ZW5kLCBoYXNPd24sIHJlcGxhY2UsIHF1ZXJ5LCBiaW5kLCBcbiAgICAgICAgZmlyc3RXb3JkdG9VcHBlciwgdG9VcHBlciwgdHJpbU5vZGUsIGlzVHJpbW1hYmxlLCBcbiAgICAgICAgbWVyZ2VPcHRpb25zLCBtZXJnZUF0dHJzfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IHtjb21waWxlLCBjb21waWxlUHJvcHN9IGZyb20gJy4vY29tcGlsZS5qcydcbmltcG9ydCBkaXJlY3RpdmVzIGZyb20gJy4vZGlyZWN0aXZlcy5qcydcbmltcG9ydCBEZXAgZnJvbSAnLi9kZXAuanMnXG5cbi8vIE1pbmlWdWXmnoTpgKDlh73mlbAg5Y+C5pWw5piv5LiA5Liq5a+56LGhXG5mdW5jdGlvbiBNaW5pVnVlKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9pbml0KG9wdGlvbnMpXG59XG5cbk1pbmlWdWUub3B0aW9ucyA9IHtcbiAgICBkaXJlY3RpdmVzLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIGZpbHRlcnM6IHt9LFxufVxuXG4vLyDlhajlsYDmlrnms5VcblxuLy8g5re35YWl5a+56LGhXG5NaW5pVnVlLm1peGluID0gZnVuY3Rpb24obWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbilcbn1cblxuLy8g5rOo5YaM5YWo5bGA5oyH5LukXG5NaW5pVnVlLmRpcmVjdGl2ZSA9IGZ1bmN0aW9uKGRpck5hbWUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMuZGlyZWN0aXZlc1tkaXJOYW1lXSA9IG9wdGlvbnNcbn1cblxuLy8g5L2/55So5o+S5Lu2XG5NaW5pVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICBpZiAocGx1Z2luLmluc3RhbGxlZCkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKVxuICAgIGFyZ3MudW5zaGlmdCh0aGlzKVxuXG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpXG4gICAgfVxuICAgIHBsdWdpbi5pbnN0YWxsZWQgPSB0cnVlXG4gICAgcmV0dXJuIHRoaXNcbn1cblxuTWluaVZ1ZS5jaWQgPSAwXG4vLyDnlJ/miJDlrZDnu4Tku7bmnoTpgKDlh73mlbBcbk1pbmlWdWUuZXh0ZW5kID0gZnVuY3Rpb24oZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9XG4gICAgY29uc3QgU3VwZXIgPSB0aGlzXG4gICAgbGV0IGlzRmlyc3RFeHRlbmQgPSBTdXBlci5jaWQgPT09IDBcbiAgICBpZiAoaXNGaXJzdEV4dGVuZCAmJiBleHRlbmRPcHRpb25zLl9DdG9yKSB7XG4gICAgICAgIHJldHVybiBleHRlbmRPcHRpb25zLl9DdG9yXG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWVcbiAgICBcbiAgICBjb25zdCBTdWIgPSBuZXcgRnVuY3Rpb24oJ3JldHVybiBmdW5jdGlvbiAnICsgY2xhc3NpZnkobmFtZSkgKyAnIChvcHRpb25zKSB7IHRoaXMuX2luaXQob3B0aW9ucykgfScpKClcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpXG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YlxuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFN1cGVyLm9wdGlvbnMsIGV4dGVuZE9wdGlvbnMpXG4gICAgU3ViWydzdXBlciddID0gU3VwZXJcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kXG4gICAgU3ViLmNvbXBvbmVudCA9IFN1cGVyLmNvbXBvbmVudFxuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YlxuICAgIH1cblxuICAgIGlmIChpc0ZpcnN0RXh0ZW5kKSB7XG4gICAgICAgIGV4dGVuZE9wdGlvbnMuX0N0b3IgPSBTdWJcbiAgICB9XG5cbiAgICByZXR1cm4gU3ViXG59XG5cbi8vIOWFqOWxgCDnlJ/miJDnu4Tku7Zcbk1pbmlWdWUuY29tcG9uZW50ID0gZnVuY3Rpb24oaWQsIGRlZmluaXRpb24sIGlzUHJpdmF0ZSkge1xuICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zWydjb21wb25lbnRzJ11baWRdXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFkZWZpbml0aW9uLm5hbWUpIHtcbiAgICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGlkXG4gICAgICAgIH1cblxuICAgICAgICBkZWZpbml0aW9uID0gTWluaVZ1ZS5leHRlbmQoZGVmaW5pdGlvbilcblxuICAgICAgICBpZiAoIWlzUHJpdmF0ZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zWydjb21wb25lbnRzJ11baWRdID0gZGVmaW5pdGlvblxuICAgICAgICB9XG4gIFxuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgIH1cbn1cblxuLy8g5rOo5YaM6L+H5ruk5ZmoXG5NaW5pVnVlLmZpbHRlciA9IGZ1bmN0aW9uKGlkLCBmbikge1xuICAgIHRoaXMub3B0aW9ucy5maWx0ZXJzW2lkXSA9IGZuXG59XG5cbi8vIOWOn+Wei+aWueazlVxuTWluaVZ1ZS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IE1pbmlWdWUsXG5cbiAgICAvLyDliJ3lp4vljJbmlbDmja7lkozmlrnms5VcbiAgICBfaW5pdChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuJGVsID0gbnVsbFxuICAgICAgICB0aGlzLiRwYXJlbnQgPSBvcHRpb25zLnBhcmVudFxuICAgICAgICAvLyBNaW5pVnVl5a6e5L6LXG4gICAgICAgIHRoaXMuX2lzTWluaVZ1ZSA9IHRydWVcbiAgICAgICAgLy8g5qC557uE5Lu2XG4gICAgICAgIHRoaXMuJHJvb3QgPSB0aGlzLiRwYXJlbnQ/IHRoaXMuJHBhcmVudC4kcm9vdCA6IHRoaXNcbiAgICAgICAgLy8g5a2Y5pS+5a2Q57uE5Lu2XG4gICAgICAgIHRoaXMuJGNoaWxkcmVuID0gW11cblxuICAgICAgICAvLyDlrZjmlL7op4Llr5/ogIXlrp7kvotcbiAgICAgICAgdGhpcy5fd2F0Y2hlcnMgPSBbXVxuXG4gICAgICAgIC8vIOWtmOaUvuS6i+S7tlxuICAgICAgICB0aGlzLl9ldmVudHMgPSB7fVxuXG4gICAgICAgIC8vIOWtmOaUvuaMh+S7pFxuICAgICAgICB0aGlzLl9kaXJlY3RpdmVzID0gW11cblxuICAgICAgICAvLyDniLbnuqfkuIrkuIvmloflr7nosaFcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG9wdGlvbnMuX2NvbnRleHQgfHwgdGhpcy4kcGFyZW50XG5cbiAgICAgICAgaWYgKHRoaXMuJHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy4kcGFyZW50LiRjaGlsZHJlbi5wdXNoKHRoaXMpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIOWQiOW5tuWPguaVsFxuICAgICAgICBvcHRpb25zID0gdGhpcy4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnMsIG9wdGlvbnMsIHRoaXMpXG4gICAgICAgIHRoaXMuX2NhbGxIb29rKCdpbml0JylcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2luaXRNaXhpbnMoKVxuICAgICAgICB0aGlzLl9pbml0Q29tcG9uZW50cygpICAgIFxuICAgICAgICB0aGlzLl9pbml0UHJvcHMoKSAgICAgIFxuICAgICAgICB0aGlzLl9pbml0TWV0aG9kcygpICAgICBcbiAgICAgICAgdGhpcy5faW5pdERhdGEoKSAgICAgIFxuICAgICAgICB0aGlzLl9pbml0V2F0Y2goKVxuICAgICAgICB0aGlzLl9pbml0Q29tcHV0ZWQoKVxuICAgICAgICB0aGlzLl9pbml0RXZlbnRzKClcblxuICAgICAgICB0aGlzLl9jYWxsSG9vaygnY3JlYXRlZCcpXG4gICAgICAgIGlmIChvcHRpb25zLmVsKSB7XG4gICAgICAgICAgICB0aGlzLl9jb21waWxlKClcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8g5bGA6YOobWl4aW5cbiAgICBfaW5pdE1peGlucygpIHtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zXG4gICAgICAgIGlmIChvcHRpb25zLm1peGluKSB7XG4gICAgICAgICAgICB0aGlzLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKG9wdGlvbnMsIG9wdGlvbnMubWl4aW4pICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIOWxgOmDqGNvbXBvbmV0XG4gICAgX2luaXRDb21wb25lbnRzKCkge1xuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gdGhpcy4kb3B0aW9ucy5jb21wb25lbnRzXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjb21wb25lbnRzKVxuICAgICAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGNvbXBvbmVudHNba2V5XSA9IE1pbmlWdWUuY29tcG9uZW50KGtleSwgY29tcG9uZW50c1trZXldLCB0cnVlKVxuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICBfaW5pdFByb3BzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy4kb3B0aW9uc1xuICAgICAgICBsZXQgZWwgPSBvcHRpb25zLmVsXG4gICAgICAgIGNvbnN0IHByb3BzID0gb3B0aW9ucy5wcm9wc1xuICAgICAgICBlbCA9IG9wdGlvbnMuZWwgPSBxdWVyeShlbClcblxuICAgICAgICBpZiAocHJvcHMgJiYgZWwubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgY29tcGlsZVByb3BzKHRoaXMsIGVsLCBwcm9wcylcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdE1ldGhvZHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZHMgPSB0aGlzLiRvcHRpb25zLm1ldGhvZHM/IHRoaXMuJG9wdGlvbnMubWV0aG9kcyA6IHt9XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhtZXRob2RzKVxuICAgICAgICAvLyDlsIZtZXRob2Rz5LiK55qE5pa55rOV6LWL5YC85Yiwdm3lrp7kvovkuIpcbiAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAvLyDlsIbmlrnms5V0aGlz5oyH5ZCR57uR5a6a5Yiwdm3kuIpcbiAgICAgICAgICAgIHRoaXNba2V5XSA9IGJpbmQobWV0aG9kc1trZXldLCB0aGlzKVxuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICBfaW5pdERhdGEoKSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuJG9wdGlvbnMuZGF0YVxuICAgICAgICBkYXRhID0gdGhpcy5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nPyBkYXRhKCkgOiBkYXRhIHx8IHt9XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKVxuICAgXG4gICAgICAgIC8vIOWvueavj+S4gOS4qmtleeWunueOsOS7o+eQhiDljbPlj6/pgJrov4d2bS5tc2fmnaXorr/pl652bS5fZGF0YS5tc2dcbiAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wcm94eSh0aGlzLCAnX2RhdGEnLCBrZXkpXG4gICAgICAgIH0pXG4gICAgICAgIC8vIOebkeWQrOaVsOaNrlxuICAgICAgICBvYnNlcnZlKHRoaXMuX2RhdGEpXG4gICAgfSxcblxuICAgIF9pbml0V2F0Y2goKSB7XG4gICAgICAgIGlmICh0aGlzLiRvcHRpb25zLndhdGNoKSB7XG4gICAgICAgICAgICBjb25zdCB3YXRjaCA9IHRoaXMuJG9wdGlvbnMud2F0Y2hcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh3YXRjaClcbiAgICAgICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJHdhdGNoKGtleSwgd2F0Y2hba2V5XSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2luaXRDb21wdXRlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJG9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVkID0gdGhpcy4kb3B0aW9ucy5jb21wdXRlZFxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGNvbXB1dGVkKVxuICAgICAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGdldDogbWFrZUNvbXB1dGVkR2V0dGVyKGNvbXB1dGVkW2tleV0sIHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBzZXQ6IG5vb3BcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdEV2ZW50cygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnNcbiAgICAgICAgLy8g5aaC5p6c5piv5LiA5Liq5a2Q57uE5Lu2IOWImeajgOafpee7hOS7tuS4iuaYr+WQpue7keWumuS6huS6i+S7tlxuICAgICAgICBpZiAob3B0aW9ucy5fYXNDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyQ29tcG9uZW50RXZlbnRzKHRoaXMsIG9wdGlvbnMuZWwpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3Byb3h5KHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgICAgICAgY29uc3Qgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uID0ge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g5a6e6ZmF5LiK6K+75Y+W5ZKM6L+U5Zue55qE5pivdm0uX2RhdGHkuIrnmoTmlbDmja5cbiAgICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3NvdXJjZUtleV1ba2V5XVxuICAgICAgICB9XG4gICAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgICAgICAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbFxuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKVxuICAgIH0sXG5cbiAgICAvLyDlvZPkuLrlr7nosaHmt7vliqDlsZ7mgKfmiJbkv67mlLnmlbDnu4TnmoTlgLzml7blj6/nlKjov5nkuKrmlrnms5Ug6IO95a6e5pe25pu05pawXG4gICAgJHNldChvYmosIGtleSwgdmFsKSB7XG4gICAgICAgIHRoaXNbb2JqXVtrZXldID0gdmFsXG4gICAgICAgIHZtW29ial0uX19vYl9fLmRlcC5ub3RpZnkoKVxuICAgIH0sXG4gICAgLy8g5b2T5Li65a+56LGh5Yig6Zmk5bGe5oCn5oiW5Yig6Zmk5pWw57uE55qE5YC85pe25Y+v55So6L+Z5Liq5pa55rOVIOiDveWunuaXtuabtOaWsFxuICAgICRkZWxldGUob2JqLCBrZXkpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodGhpc1tvYmpdKSkge1xuICAgICAgICAgICAgdGhpc1tvYmpdLnNwbGljZShrZXksIDEpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpc1tvYmpdW2tleV1cbiAgICAgICAgICAgIHZtW29ial0uX19vYl9fLmRlcC5ub3RpZnkoKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgICR3YXRjaChleHBPckZuLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICBuZXcgV2F0Y2hlcih0aGlzLCBleHBPckZuLCBjYWxsYmFjaywgb3B0aW9ucylcbiAgICB9LFxuXG4gICAgJG9uKGV2ZW50LCBmbikge1xuICAgICAgICAodGhpcy5fZXZlbnRzW2V2ZW50XSB8fCAodGhpcy5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbilcbiAgICB9LFxuXG4gICAgJG9mZihldmVudCwgZm4pIHtcbiAgICAgICAgY29uc3QgY2JzID0gdGhpcy5fZXZlbnRzW2V2ZW50XVxuICAgICAgICBpZiAoIWZuKSB7XG4gICAgICAgICAgICBjYnMubGVuZ3RoID0gMFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGwgPSBjYnMubGVuZ3RoXG4gICAgICAgIHdoaWxlIChsLS0pIHtcbiAgICAgICAgICAgIGxldCBjYiA9IGNic1tsXVxuICAgICAgICAgICAgaWYgKGNiID09PSBmbikge1xuICAgICAgICAgICAgICAgIGNicy5zcGxpY2UobCwgMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAkZW1pdChldmVudCkge1xuICAgICAgICBjb25zdCBjYnMgPSB0aGlzLl9ldmVudHNbZXZlbnRdXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSlcbiAgICAgICAgaWYgKCFjYnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tldmVudF0gPSBbXVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY2JzLmZvckVhY2goY2IgPT4ge1xuICAgICAgICAgICAgICAgIGNiLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2JzLmZvckVhY2goY2IgPT4ge1xuICAgICAgICAgICAgICAgIGNiLmNhbGwodGhpcywgYXJnc1swXSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgJG9uY2UoZXZlbnQsIGZuKSB7XG4gICAgICAgIGNvbnN0IHZtID0gdGhpc1xuICAgICAgICBmdW5jdGlvbiBvbigpIHtcbiAgICAgICAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKVxuICAgICAgICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuJG9uKGV2ZW50LCBvbilcbiAgICB9LFxuXG4gICAgJG5leHRUaWNrOiBuZXh0VGljayxcblxuICAgIC8vIOi/h+a7pOWZqFxuICAgIF9hcHBseUZpbHRlcnModmFsdWUsIGZpbHRlcnMpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyc09iaiA9IHRoaXMuJG9wdGlvbnMuZmlsdGVycz8gdGhpcy4kb3B0aW9ucy5maWx0ZXJzIDoge31cbiAgICAgICAgbGV0IGhhbmRsZXJcbiAgICAgICAgZmlsdGVycy5mb3JFYWNoKGZpbHRlciA9PiB7XG4gICAgICAgICAgICBoYW5kbGVyID0gZmlsdGVyc09ialtmaWx0ZXIubmFtZV1cbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBoYW5kbGVyLmNhbGwodGhpcywgdmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sIFxuXG4gICAgLy8g55Sf5ZG95ZGo5pyf6ZKp5a2Q5Ye95pWwXG4gICAgX2NhbGxIb29rKGhvb2spIHtcbiAgICAgICAgY29uc3QgaGFuZGxlcnMgPXRoaXMuJG9wdGlvbnNbaG9va11cblxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBoYW5kbGVycy5jYWxsKHRoaXMpXG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlcnMpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzLmZvckVhY2goaGFuZGxlciA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIOino+aekERPTVxuICAgIF9jb21waWxlKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy4kb3B0aW9uc1xuICAgICAgICBvcHRpb25zLmVsID0gdGhpcy4kZWwgPSBxdWVyeShvcHRpb25zLmVsKVxuICAgICAgICBjb25zdCB0ZW1wRWwgPSB0cmFuc2NsdWRlKHRoaXMuJGVsLCBvcHRpb25zKVxuICAgICAgICBpZiAodGVtcEVsKSB7XG4gICAgICAgICAgICB0aGlzLiRlbCA9IHRlbXBFbFxuICAgICAgICAgICAgb3B0aW9ucy5lbC5pbm5lckhUTUwgPSAnJ1xuICAgICAgICAgICAgcmVwbGFjZShvcHRpb25zLmVsLCB0aGlzLiRlbClcbiAgICAgICAgfVxuICAgICAgICAvLyDop6PmnpBzbG90XG4gICAgICAgIHJlc29sdmVTbG90cyh0aGlzLCBvcHRpb25zLl9jb250ZW50KVxuICAgICAgICB0aGlzLl9jYWxsSG9vaygnYmVmb3JlQ29tcGlsZScpXG4gICAgICAgIGNvbXBpbGUodGhpcywgdGhpcy4kZWwpXG4gICAgfVxufVxuXG53aW5kb3cuTWluaVZ1ZSA9IE1pbmlWdWVcblxuXG4vLyDnqbrmk43kvZxcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vLyDnlJ/miJDorqHnrpflsZ7mgKdnZXR0ZXJcbmZ1bmN0aW9uIG1ha2VDb21wdXRlZEdldHRlcihnZXR0ZXIsIHZtKSB7XG4gICAgY29uc3Qgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBnZXR0ZXIsIG51bGwsIHtcbiAgICAgICAgbGF6eTogdHJ1ZVxuICAgIH0pXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyKCkge1xuICAgICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgICAgIHdhdGNoZXIuZGVwZW5kKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbn1cblxuXG4vLyDlsIZlbOWGheWuueabv+aNouS4uuaooeadv+WGheWuuVxuZnVuY3Rpb24gdHJhbnNjbHVkZShlbCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnRlbXBsYXRlKSB7XG4gICAgICAgIC8vIOaPkOWPlue7hOS7tumHjOeahHNsb3RcbiAgICAgICAgb3B0aW9ucy5fY29udGVudCA9IGV4dHJhY3RDb250ZW50KGVsKVxuICAgICAgICBcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gb3B0aW9ucy50ZW1wbGF0ZS50cmltKClcbiAgICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gdGVtcGxhdGVcbiAgICAgICAgbGV0IGZyYWcgPSBleHRyYWN0Q29udGVudChub2RlLCB0cnVlKVxuICAgICAgICBmcmFnID0gZnJhZy5jbG9uZU5vZGUodHJ1ZSlcblxuICAgICAgICBjb25zdCByZXBsYWNlciA9IGZyYWcuZmlyc3RDaGlsZFxuICAgICAgICBtZXJnZUF0dHJzKGVsLCByZXBsYWNlcilcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VyXG4gICAgfVxufVxuXG5jb25zdCBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXFwvXSkoXFx3KS9nXG5cbmZ1bmN0aW9uIGNsYXNzaWZ5KHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShjbGFzc2lmeVJFLCB0b1VwcGVyKVxufVxuXG5mdW5jdGlvbiByZWdpc3RlckNvbXBvbmVudEV2ZW50cyh2bSwgZWwpIHtcbiAgICBjb25zdCBvblJlID0gL14odi1vbjp8QCkvXG4gICAgY29uc3QgYXR0cnMgPSB0b0FycmF5KGVsLmF0dHJpYnV0ZXMpXG5cbiAgICBsZXQgbmFtZSwgdmFsdWUsIGhhbmRsZXJcblxuICAgIGF0dHJzLmZvckVhY2goYXR0ciA9PiB7XG4gICAgICAgIG5hbWUgPSBhdHRyLm5hbWUudHJpbSgpXG4gICAgICAgIHZhbHVlID0gYXR0ci52YWx1ZS50cmltKClcbiAgICAgICAgaWYgKG9uUmUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJlLCAnJylcbiAgICAgICAgICAgIHZhbHVlICs9ICcuYXBwbHkodGhpcywgdGhpcy4kYXJndW1lbnRzKSdcbiAgICAgICAgICAgIGhhbmRsZXIgPSBzdGF0ZW1lbnRIYW5kbGVyKHZtLl9jb250ZXh0LCB2YWx1ZSlcbiAgICAgICAgICAgIHZtLiRvbihuYW1lLCBoYW5kbGVyKVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gc3RhdGVtZW50SGFuZGxlcihwYXJlbnQsIHZhbHVlKSB7XG4gICAgY29uc3QgZ2V0ID0gbmV3IEZ1bmN0aW9uKCd2bScsICdyZXR1cm4gdm0uJyArIHZhbHVlKVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcGFyZW50LiRhcmd1bWVudHMgPSB0b0FycmF5KGFyZ3VtZW50cylcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0LmNhbGwocGFyZW50LCBwYXJlbnQpXG4gICAgICAgIHBhcmVudC4kYXJndW1lbnRzID0gbnVsbFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxufVxuXG5cbi8vIOaPkOWPluWFg+e0oOmHjOmdoueahOWGheWuuVxuZnVuY3Rpb24gZXh0cmFjdENvbnRlbnQoZWwsIGFzRnJhZ21lbnQpIHtcbiAgICBsZXQgY2hpbGQsIHJhd0NvbnRlbnRcbiAgICBpZiAoZWwuaGFzQ2hpbGROb2RlcygpKSB7IFxuICAgICAgICB0cmltTm9kZShlbClcbiAgICAgICAgcmF3Q29udGVudCA9IGFzRnJhZ21lbnQgPyBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXG4gICAgICAgIHdoaWxlIChjaGlsZCA9IGVsLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHJhd0NvbnRlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhd0NvbnRlbnRcbn1cblxuLy8g6Kej5p6Qc2xvdFxuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzKHZtLCBjb250ZW50KSB7XG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBcbiAgICBjb25zdCBjb250ZW50cyA9IHZtLl9zbG90Q29udGVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgbGV0IG5hbWVcbiAgICB0b0FycmF5KGNvbnRlbnQuY2hpbGRyZW4pLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBpZiAobmFtZSA9IGVsLmdldEF0dHJpYnV0ZSgnc2xvdCcpKSB7XG4gICAgICAgICAgICAoY29udGVudHNbbmFtZV0gfHwgKGNvbnRlbnRzW25hbWVdID0gW10pKS5wdXNoKGVsKVxuICAgICAgICB9XG4gICAgfSlcbiAgICBcbiAgICAvLyDmnInlkI3lrZfnmoRzbG90XG4gICAgZm9yIChuYW1lIGluIGNvbnRlbnRzKSB7XG4gICAgICAgIGNvbnRlbnRzW25hbWVdID0gZXh0cmFjdEZyYWdtZW50KGNvbnRlbnRzW25hbWVdLCBjb250ZW50KVxuICAgIH1cblxuICAgIC8vIOayoeWQjeWtl+eahHNsb3RcbiAgICBpZiAoY29udGVudC5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBjb250ZW50LmNoaWxkTm9kZXNcbiAgICAgICAgLy8g56m65paH5pys6IqC54K555u05o6l6Lev6L+HXG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGggPT09IDEgJiYgbm9kZXNbMF0ubm9kZVR5cGUgPT09IDMgJiYgIW5vZGVzWzBdLmRhdGEudHJpbSgpKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb250ZW50c1snZGVmYXVsdCddID0gZXh0cmFjdEZyYWdtZW50KGNvbnRlbnQuY2hpbGROb2RlcywgY29udGVudClcbiAgICAgICAgXG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RnJhZ21lbnQobm9kZXMsIHBhcmVudCkge1xuICAgIGNvbnN0IGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KClcbiAgICBsZXQgZGl2LCBjaGlsZE5vZGVzXG4gICAgbm9kZXMgPSB0b0FycmF5KG5vZGVzKVxuICAgIFxuICAgIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIC8vIOmdnuepuuaWh+acrOiKgueCuVxuICAgICAgICBpZiAoIWlzVHJpbW1hYmxlKG5vZGUpKSB7XG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobm9kZSlcbiAgICAgICAgICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gbm9kZS5pbm5lckhUTUxcbiAgICAgICAgICAgIHRyaW1Ob2RlKGRpdilcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2hpbGROb2RlcyA9IHRvQXJyYXkoZGl2LmNoaWxkTm9kZXMpXG4gICAgICAgICAgICBjaGlsZE5vZGVzLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZnJhZ1xufVxuXG4iLCJpbXBvcnQgRGVwIGZyb20gJy4vZGVwLmpzJ1xuaW1wb3J0IHtkZWYsIGhhc093biwgaXNBcnJheX0gZnJvbSAnLi91dGlscydcblxuLy8g5Zyo5pWw57uE5Y6f5Z6L5LiK5aKe5Yqg5LiA54K55pS55YqoXG5jb25zdCBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlXG5jb25zdCBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pXG5cbmNvbnN0IG1ldGhvZHNUb1BhdGNoID0gW1xuICAgICdwdXNoJyxcbiAgICAncG9wJyxcbiAgICAnc2hpZnQnLFxuICAgICd1bnNoaWZ0JyxcbiAgICAnc3BsaWNlJyxcbiAgICAnc29ydCcsXG4gICAgJ3JldmVyc2UnXG5dXG5cblxubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgLy8g57yT5a2Y5Y6f5Z6L6Ieq6Lqr55qE5pa55rOVXG4gICAgY29uc3Qgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF1cbiAgICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IoLi4uYXJncykge1xuICAgICAgICAvLyDlhYjmiafooYzljp/lnovoh6rouqvnmoTmlrnms5VcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgY29uc3Qgb2IgPSB0aGlzLl9fb2JfX1xuICAgICAgICBsZXQgaW5zZXJ0ZWRcbiAgICAgICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgICAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgICAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zZXJ0ZWQpIHtcbiAgICAgICAgICAgIG9iLm9ic2VydmVBcnJheShpbnNlcnRlZClcbiAgICAgICAgfVxuICAgICAgICAvLyDop6blj5Hkvp3otZbmm7TmlrBcbiAgICAgICAgb2IuZGVwLm5vdGlmeSgpXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9KVxufSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb2JzZXJ2ZSh2YWx1ZSkge1xuICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgb2JcbiAgICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICAgICAgb2IgPSB2YWx1ZS5fX29iX19cbiAgICB9IGVsc2UgaWYgKCF2YWx1ZS5faXNNaW5pVnVlKSB7XG4gICAgICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKVxuICAgIH1cblxuICAgIHJldHVybiBvYlxufVxuXG4vLyDlr7nmlbDmja7ov5vooYznm5HlkKxcbmZ1bmN0aW9uIE9ic2VydmVyKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgdGhpcy5kZXAgPSBuZXcgRGVwKClcbiAgICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKVxuICAgIFxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5fX3Byb3RvX18gPSBhcnJheU1ldGhvZHNcbiAgICAgICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53YWxrKHZhbHVlKVxuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cblxuT2JzZXJ2ZXIucHJvdG90eXBlID0ge1xuICAgIHdhbGsob2JqKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopIFxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgZGVmaW5lUmVhY3RpdmUob2JqLCBrZXlzW2ldLCBvYmpba2V5c1tpXV0pXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb2JzZXJ2ZUFycmF5KGFycnkpIHtcbiAgICAgICAgYXJyeS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgb2JzZXJ2ZShpdGVtKVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlKG9iaiwga2V5LCB2YWwpIHtcbiAgICBjb25zdCBkZXAgPSBuZXcgRGVwKClcbiAgICAvLyDpgJLlvZLnm5HlkKxcbiAgICBsZXQgY2hpbGRPYiA9IG9ic2VydmUodmFsKVxuICAgIFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHsgICAgICBcbiAgICAgICAgICAgIC8vIOaUtumbhuWvueW6lOeahOinguWvn+iAheWvueixoVxuICAgICAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBkZXAuZGVwZW5kKClcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGUsIGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHZhbFtpXVxuICAgICAgICAgICAgICAgICAgICAgICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWxcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KG5ld1ZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCA9PT0gbmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWwgPSBuZXdWYWxcbiAgICAgICAgICAgIC8vIOmAkuW9kuebkeWQrFxuICAgICAgICAgICAgY2hpbGRPYiA9IG9ic2VydmUobmV3VmFsKVxuICAgICAgICAgICAgLy8g6Kem5Y+R5pu05pawXG4gICAgICAgICAgICBkZXAubm90aWZ5KClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfSlcbn1cbiIsImltcG9ydCB7bWVyZ2VPcHRpb25zLCBtZXJnZUF0dHJzfSBmcm9tICcuL21lcmdlLmpzJ1xuXG5leHBvcnQge21lcmdlT3B0aW9ucywgbWVyZ2VBdHRyc31cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXkoYXJyeSwgaW5kZXgpIHtcbiAgICBpbmRleCA9IGluZGV4IHx8IDBcbiAgICByZXR1cm4gWy4uLmFycnldLnNsaWNlKGluZGV4KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZShvbGROb2RlLCBuZXdOb2RlKSB7XG4gICAgY29uc3QgcGFyZW50ID0gb2xkTm9kZS5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdOb2RlLCBvbGROb2RlKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZCh0bywgZnJvbSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKVxuICAgIGxldCBpID0ga2V5cy5sZW5ndGhcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHRvW2tleXNbaV1dID0gZnJvbVtrZXlzW2ldXVxuICAgIH1cbiAgICByZXR1cm4gdG9cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uKGVsLCBldmVudCwgY2IsIHVzZUNhcHR1cmUpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYiwgdXNlQ2FwdHVyZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9mZihlbCwgZXZlbnQsIGNiKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgY2IpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kKGZuLCBjdHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgbGV0IGwgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgIHJldHVybiBsID8gbCA+IDEgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cykgOiBmbi5jYWxsKGN0eCwgYSkgOiBmbi5jYWxsKGN0eClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWYob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzT3duKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5XG5leHBvcnQge2lzQXJyYXl9XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyKG5vZGUsIF9hdHRyKSB7XG4gICAgY29uc3QgdmFsID0gbm9kZS5nZXRBdHRyaWJ1dGUoX2F0dHIpXG4gICAgaWYgKHZhbCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShfYXR0cilcbiAgICB9XG4gICAgcmV0dXJuIHZhbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmluZEF0dHIobm9kZSwgbmFtZSkge1xuICAgIGxldCB2YWwgPSBnZXRBdHRyKG5vZGUsICc6JyArIG5hbWUpXG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgICB2YWwgPSBnZXRBdHRyKG5vZGUsICd2LWJpbmQ6JyArIG5hbWUpXG4gICAgfVxuICAgIHJldHVybiB2YWxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShlbCkge1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnNlcnQobmV3Tm9kZSwgb2xkTm9kZSkge1xuICAgIG9sZE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgb2xkTm9kZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZENsYXNzKGVsLCBjbHMpIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGNscylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5KGVsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKSA6IGVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUdldHRlckZuKGJvZHkpIHtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKGB3aXRoKHRoaXMpIHsgcmV0dXJuICR7Ym9keX0gfWApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlyc3RXb3JkdG9VcHBlcihzdHIpIHtcbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCAxKS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKVxufVxuXG4vLyDljrvpmaTnqbrmlofmnKzoioLngrlcbmV4cG9ydCBmdW5jdGlvbiB0cmltTm9kZShub2RlKSB7XG4gICAgbGV0IGNoaWxkXG4gICAgd2hpbGUgKChjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCwgaXNUcmltbWFibGUoY2hpbGQpKSkge1xuICAgICAgICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKVxuICAgIH1cbiAgICB3aGlsZSAoKGNoaWxkID0gbm9kZS5sYXN0Q2hpbGQsIGlzVHJpbW1hYmxlKGNoaWxkKSkpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZClcbiAgICB9XG59XG5cbi8vIOaYr+WQpuS4uuepuuaWh+acrOiKgueCuVxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJpbW1hYmxlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZSAmJiAobm9kZS5ub2RlVHlwZSA9PT0gMyAmJiAhbm9kZS5kYXRhLnRyaW0oKSB8fCBub2RlLm5vZGVUeXBlID09PSA4KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9VcHBlcihfLCBjKSB7XG4gICAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG9iaiwga2V5LCB2YWwpIHtcbiAgICBpZiAoaGFzT3duKG9iaiwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IHZhbFxuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKG9iai5faXNNaW5pVnVlKSB7XG4gICAgICAgIHNldChvYmouX2RhdGEsIGtleSwgdmFsKVxuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3Qgb2IgPSBvYmouX19vYl9fXG4gICAgaWYgKCFvYikge1xuICAgICAgICBvYmpba2V5XSA9IHZhbFxuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgb2IuY29udmVydChrZXksIHZhbClcbiAgICBvYi5kZXAubm90aWZ5KClcbiAgICByZXR1cm4gdmFsXG59IiwiaW1wb3J0IHtoYXNPd24sIGV4dGVuZCwgaXNBcnJheSwgc2V0fSBmcm9tICcuL2luZGV4LmpzJ1xuXG5jb25zdCBoeXBoZW5hdGVSRSA9IC8oW14tXSkoW0EtWl0pL2dcblxuZnVuY3Rpb24gaHlwaGVuYXRlKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJykucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJykudG9Mb3dlckNhc2UoKVxufVxuXG5jb25zdCBzdHJhdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbmZ1bmN0aW9uIGd1YXJkQXJyYXlBc3NldHMoYXNzZXRzKSB7XG4gICAgaWYgKGlzQXJyYXkoYXNzZXRzKSkge1xuICAgICAgICBjb25zdCByZXMgPSB7fVxuICAgICAgICBsZXQgaSA9IGFzc2V0cy5sZW5ndGhcbiAgICAgICAgbGV0IGFzc2V0XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGFzc2V0ID0gYXNzZXRzW2ldXG4gICAgICAgICAgICBpZCA9IHR5cGVvZiBhc3NldCA9PT0gJ2Z1bmN0aW9uJyA/IGFzc2V0Lm9wdGlvbnMgJiYgYXNzZXQub3B0aW9ucy5uYW1lIHx8IGFzc2V0LmlkIDogYXNzZXQubmFtZSB8fCBhc3NldC5pZFxuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgcmVzW2lkXSA9IGFzc2V0XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgXG4gIHJldHVybiBhc3NldHNcbn1cblxuLy8g5ZCI5bm25Y+C5pWwXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQsIHZtKSB7XG4gICAgZ3VhcmRDb21wb25lbnRzKGNoaWxkKVxuICAgIGNvbnN0IG9wdGlvbnMgPSB7fVxuICAgIGxldCBrZXlcblxuICAgIGlmIChjaGlsZFsnZXh0ZW5kcyddKSB7XG4gICAgICAgIHBhcmVudCA9IHR5cGVvZiBjaGlsZFsnZXh0ZW5kcyddID09PSAnZnVuY3Rpb24nID8gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGRbJ2V4dGVuZHMnXS5vcHRpb25zLCB2bSkgOiBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZFsnZXh0ZW5kcyddLCB2bSlcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbWl4aW4gPSBjaGlsZC5taXhpbnNbaV1cbiAgICAgICAgICAgIGNvbnN0IG1peGluT3B0aW9ucyA9IG1peGluLnByb3RvdHlwZSBpbnN0YW5jZW9mIE1pbmlWdWUgPyBtaXhpbi5vcHRpb25zIDogbWl4aW5cbiAgICAgICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIG1peGluT3B0aW9ucywgdm0pXG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICAgICAgbWVyZ2VGaWVsZChrZXkpXG4gICAgfVxuXG4gICAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICAgICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICAgICAgICAgbWVyZ2VGaWVsZChrZXkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUZpZWxkKGtleSkge1xuICAgICAgICBjb25zdCBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdFxuICAgICAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSlcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gZ3VhcmRDb21wb25lbnRzKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSBvcHRpb25zLmNvbXBvbmVudHNcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGNvbXBvbmVudHMpXG4gICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50c1trZXldID0gTWluaVZ1ZS5jb21wb25lbnQoa2V5LCBjb21wb25lbnRzW2tleV0sIHRydWUpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZURhdGEodG8sIGZyb20pIHtcbiAgICBsZXQga2V5LCB0b1ZhbCwgZnJvbVZhbFxuICAgIGZvciAoa2V5IGluIGZyb20pIHtcbiAgICAgICAgdG9WYWwgPSB0b1trZXldXG4gICAgICAgIGZyb21WYWwgPSBmcm9tW2tleV1cbiAgICAgICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgICAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKVxuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRvVmFsKSAmJiBpc09iamVjdChmcm9tVmFsKSkge1xuICAgICAgICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b1xufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXJlbnRWYWwpIHsgIFxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuKCkge1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShjaGlsZFZhbC5jYWxsKHRoaXMpLCBwYXJlbnRWYWwuY2FsbCh0aGlzKSlcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyZW50VmFsIHx8IGNoaWxkVmFsKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbigpIHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodm0pIDogY2hpbGRWYWxcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHZtKSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG5zdHJhdHMuZWwgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcbiAgICBpZiAoIXZtICYmIGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgcmV0ID0gY2hpbGRWYWwgfHwgcGFyZW50VmFsXG4gICAgcmV0dXJuIHZtICYmIHR5cGVvZiByZXQgPT09ICdmdW5jdGlvbicgPyByZXQuY2FsbCh2bSkgOiByZXRcbn1cblxuXG5cbnN0cmF0cy5pbml0ID0gXG5zdHJhdHMuY3JlYXRlZCA9IFxuc3RyYXRzLnJlYWR5ID0gXG5zdHJhdHMuYXR0YWNoZWQgPSBcbnN0cmF0cy5kZXRhY2hlZCA9IFxuc3RyYXRzLmJlZm9yZUNvbXBpbGUgPSBcbnN0cmF0cy5jb21waWxlZCA9IFxuc3RyYXRzLmJlZm9yZURlc3Ryb3kgPSBcbnN0cmF0cy5kZXN0cm95ZWQgPSBcbnN0cmF0cy5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gICAgcmV0dXJuIGNoaWxkVmFsID8gcGFyZW50VmFsID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbCkgOiBpc0FycmF5KGNoaWxkVmFsKSA/IGNoaWxkVmFsIDogW2NoaWxkVmFsXSA6IHBhcmVudFZhbFxufVxuXG5cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgICBjb25zdCByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKVxuICAgIHJldHVybiBjaGlsZFZhbCA/IGV4dGVuZChyZXMsIGd1YXJkQXJyYXlBc3NldHMoY2hpbGRWYWwpKSA6IHJlc1xufVxuXG5bJ2NvbXBvbmVudCcsICdkaXJlY3RpdmUnLCAnZWxlbWVudERpcmVjdGl2ZScsICdmaWx0ZXInLCAndHJhbnNpdGlvbicsICdwYXJ0aWFsJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzXG59KVxuXG5zdHJhdHMud2F0Y2ggPSBzdHJhdHMuZXZlbnRzID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHsgXG4gICAgaWYgKCFjaGlsZFZhbCkgcmV0dXJuIHBhcmVudFZhbFxuICAgIGlmICghcGFyZW50VmFsKSByZXR1cm4gY2hpbGRWYWxcbiAgICBjb25zdCByZXQgPSB7fVxuICAgIGV4dGVuZChyZXQsIHBhcmVudFZhbClcbiAgICBmb3IgKHZhciBrZXkgaW4gY2hpbGRWYWwpIHtcbiAgICAgICAgbGV0IHBhcmVudCA9IHJldFtrZXldXG4gICAgICAgIGxldCBjaGlsZCA9IGNoaWxkVmFsW2tleV1cbiAgICAgICAgaWYgKHBhcmVudCAmJiAhaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBbcGFyZW50XVxuICAgICAgICB9XG4gICAgICAgIHJldFtrZXldID0gcGFyZW50ID8gcGFyZW50LmNvbmNhdChjaGlsZCkgOiBbY2hpbGRdXG4gICAgfVxuXG4gICAgcmV0dXJuIHJldFxufVxuXG5cbnN0cmF0cy5wcm9wcyA9IHN0cmF0cy5tZXRob2RzID0gc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgICBpZiAoIWNoaWxkVmFsKSByZXR1cm4gcGFyZW50VmFsXG4gICAgaWYgKCFwYXJlbnRWYWwpIHJldHVybiBjaGlsZFZhbFxuICAgIGNvbnN0IHJldCA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICBleHRlbmQocmV0LCBwYXJlbnRWYWwpXG4gICAgZXh0ZW5kKHJldCwgY2hpbGRWYWwpXG4gICAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3RyYXQocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkID8gcGFyZW50VmFsIDogY2hpbGRWYWxcbn1cblxuY29uc3Qgc3BlY2lhbENoYXJSRSA9IC9bXlxcd1xcLTpcXC5dL1xuXG4vLyDlkIjlubblsZ7mgKdcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUF0dHJzKGZyb20sIHRvKSB7XG4gICAgY29uc3QgYXR0cnMgPSBmcm9tLmF0dHJpYnV0ZXNcbiAgICBsZXQgaSA9IGF0dHJzLmxlbmd0aFxuICAgIGxldCBuYW1lLCB2YWx1ZVxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgbmFtZSA9IGF0dHJzW2ldLm5hbWVcbiAgICAgICAgdmFsdWUgPSBhdHRyc1tpXS52YWx1ZS50cmltKClcbiAgICAgICAgaWYgKCF0by5oYXNBdHRyaWJ1dGUobmFtZSkgJiYgIXNwZWNpYWxDaGFyUkUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgdG8uc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKVxuICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgIHZhbHVlLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjbHMgPT4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRvLCBjbHMpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICAgIFxufSIsImltcG9ydCBEZXAgZnJvbSAnLi9kZXAuanMnXG5pbXBvcnQge2lzT2JqZWN0LCBleHRlbmQsIG1ha2VHZXR0ZXJGbiwgaXNBcnJheX0gZnJvbSAnLi91dGlscydcblxuLy8gd2F0Y2hlcuWunuS+i+eahElEIOavj+S4qndhdGNoZXLlrp7njrDnmoRJROmDveaYr+WUr+S4gOeahFxubGV0IHVpZCA9IDBcblxuLy8gZXhwT3JGbuS4uuihqOi+vuW8j+aIluS4gOS4quWPmOmHj+WQjVxuZXhwb3J0IGZ1bmN0aW9uIFdhdGNoZXIodm0sIGV4cE9yRm4sIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgdm0uX3dhdGNoZXJzLnB1c2godGhpcylcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBleHRlbmQodGhpcywgb3B0aW9ucylcbiAgICB9XG4gICAgXG4gICAgdGhpcy5pZCA9IHVpZCsrXG4gICAgdGhpcy52bSA9IHZtXG4gICAgdGhpcy5leHByZXNzaW9uID0gZXhwT3JGbiAgIFxuICAgIFxuICAgIC8vIHByb3Bz6ZyA6KaB55So5YiwXG4gICAgdGhpcy5zeW5jID0gb3B0aW9ucz8gb3B0aW9ucy5zeW5jIDogZmFsc2VcbiAgICBcbiAgICAvLyDorqHnrpflsZ7mgKfpnIDopoHnlKjliLBcbiAgICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5XG5cbiAgICAvLyDlrZjmlL5kZXDlrp7kvotcbiAgICB0aGlzLmRlcHMgPSBbXVxuXG4gICAgLy8g5a2Y5pS+ZGVw55qESURcbiAgICB0aGlzLmRlcElkcyA9IG5ldyBTZXQoKVxuXG4gICAgLy8g5pu05paw6Kem5Y+R5Zue6LCD5Ye95pWwXG4gICAgdGhpcy5jYiA9IGNhbGxiYWNrXG5cbiAgICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHsgICAgXG4gICAgICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGblxuICAgICAgICB0aGlzLnNldHRlciA9IHVuZGVmaW5lZFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHBhcnNlRXhwcmVzc2lvbihleHBPckZuKVxuICAgICAgICB0aGlzLmdldHRlciA9IHJlcy5nZXRcbiAgICAgICAgdGhpcy5zZXR0ZXIgPSAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHZtW2V4cE9yRm5dID0gdmFsdWVcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyDlnKjliJvlu7p3YXRjaGVy5a6e5L6L5pe25YWI5Y+W5LiA5qyh5YC8XG4gICAgaWYgKHRoaXMubGF6eSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KClcbiAgICB9XG59XG5cbldhdGNoZXIucHJvdG90eXBlID0ge1xuICAgIGdldCgpIHtcbiAgICAgICAgY29uc3Qgdm0gPSB0aGlzLnZtXG4gICAgICAgIC8vIOWcqOivu+WPluWAvOaXtuWFiOWwhuinguWvn+iAheWvueixoei1i+WAvOe7mURlcC50YXJnZXQg5ZCm5YiZRGVwLnRhcmdldOS4uuepuiDkuI3kvJrop6blj5HmlLbpm4bkvp3otZZcbiAgICAgICAgRGVwLnRhcmdldCA9IHRoaXNcbiAgICAgICAgbGV0IHZhbHVlID0gIHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKVxuICAgICAgICBpZiAodGhpcy5maWx0ZXJzKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZtLl9hcHBseUZpbHRlcnModmFsdWUsIHRoaXMuZmlsdGVycylcbiAgICAgICAgfVxuICAgICAgICAvLyDop6blj5Hkvp3otZblkI7nva7kuLrnqbpcbiAgICAgICAgRGVwLnRhcmdldCA9IG51bGxcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcblxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNldHRlci5jYWxsKHRoaXMudm0sIHZhbHVlKVxuICAgIH0sXG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIC8vIOinpuWPkeabtOaWsOWQjuaJp+ihjOWbnuiwg+WHveaVsFxuICAgICAgICAvLyDlpoLmnpzmsqHmnInlkIzmraXmoIforrAg5YiZ5byC5q2l5pu05pawXG4gICAgICAgIC8vIOWBh+iuvuWOn+adpeWcqOS4gOS4quWHveaVsOmHjOWQjOaXtuaJp+ihjGFnZSsrIDTmrKEg5YiZ5Lya5omn6KGM5Zue6LCD5Ye95pWwNOasoSBcbiAgICAgICAgLy8g5byC5q2l5pu05paw5YiZ5Lya5omn6KGM5LiA5qyhIOS8mOWMluaAp+iDvVxuICAgICAgICBpZiAodGhpcy5sYXp5KSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLnN5bmMpIHtcbiAgICAgICAgICAgIHB1c2hXYXRjaGVyKHRoaXMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJ1bigpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcnVuKCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0KClcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnZhbHVlXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICAgICAgICBpZiAodmFsdWUgIT09IG9sZFZhbHVlIHx8IGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSlcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGREZXAoZGVwKSB7XG4gICAgICAgIC8vIOinpuWPkeS+nei1liBkZXDmt7vliqDop4Llr5/ogIXlr7nosaEg5ZCM5pe26KeC5a+f6ICF5a+56LGh5Lmf5Lya5bCGZGVw5a6e5L6L5re75Yqg5Yiw6Ieq5bex55qEZGVwc+mHjFxuICAgICAgICAvLyDlpoLmnpxkZXDlt7Lnu4/lrZjlnKhkZXBz6YeMIOWImeS4jea3u+WKoFxuICAgICAgICAvLyBkZXDkuK3lrZjmlL7nnYDlr7nlupTnmoR3YXRjaGVyIHdhdGNoZXLkuK3kuZ/kvJrlrZjmlL7nnYDlr7nlupTnmoRkZXBcbiAgICAgICAgLy8g5LiA5LiqZGVw5Y+v6IO95pyJ5aSa5Liqd2F0Y2hlciDkuIDkuKp3YXRjaGVy5Lmf5Y+v6IO95a+55bqU552A5aSa5LiqZGVwXG4gICAgICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGVwcy5wdXNoKGRlcClcbiAgICAgICAgICAgIHRoaXMuZGVwSWRzLmFkZChkZXAuaWQpXG4gICAgICAgICAgICBkZXAuYWRkU3ViKHRoaXMpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdGVhcmRvd24oKSB7XG4gICAgICAgIHRoaXMudm0uX3dhdGNoZXJzLnNwbGljZSh0aGlzLnZtLl93YXRjaGVycy5pbmRleE9mKHRoaXMpLCAxKVxuICAgICAgICBsZXQgaSA9IHRoaXMuZGVwcy5sZW5ndGhcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHRoaXMuZGVwc1tpXS5yZW1vdmVTdWIodGhpcylcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZtID0gdGhpcy5jYiA9IHRoaXMudmFsdWUgPSBudWxsXG4gICAgfSxcblxuICAgIGV2YWx1YXRlKCkge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gRGVwLnRhcmdldFxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKVxuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2VcbiAgICAgICAgRGVwLnRhcmdldCA9IGN1cnJlbnRcbiAgICB9LFxuXG4gICAgZGVwZW5kKCkge1xuICAgICAgICB0aGlzLmRlcHMuZm9yRWFjaChkZXAgPT4ge1xuICAgICAgICAgICAgZGVwLmRlcGVuZCgpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vLyDlpoLmnpzopoHlr7l7e29iai5hLmIubXNnfX0g5rGC5YC8IOWImeW7uuS4gOS4quWHveaVsCDov5Tlm54gdm0ub2JqLmEuYi5tc2cg5YC8XG5mdW5jdGlvbiBwYXJzZUV4cHJlc3Npb24oZXhwKSB7XG4gICAgZXhwID0gZXhwLnRyaW0oKVxuICAgIGNvbnN0IHJlcyA9IHtleHB9XG4gICAgcmVzLmdldCA9IG1ha2VHZXR0ZXJGbihleHApXG4gICAgcmV0dXJuIHJlc1xufVxuXG5jb25zdCBxdWV1ZSA9IFtdXG5sZXQgaGFzID0ge31cbmxldCB3YWl0aW5nID0gZmFsc2VcblxuZnVuY3Rpb24gcHVzaFdhdGNoZXIod2F0Y2hlcikge1xuICAgIGNvbnN0IGlkID0gd2F0Y2hlci5pZFxuICAgIC8vIOWmguaenOW3sue7j+acieebuOWQjOeahHdhdGNoZXLliJnkuI3mt7vliqAg6Ziy5q2i6YeN5aSN5pu05pawXG4gICAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgICAgICBoYXNbaWRdID0gcXVldWUubGVuZ3RoXG4gICAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcilcbiAgICB9XG4gICAgXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICAgIHdhaXRpbmcgPSB0cnVlXG4gICAgICAgIG5leHRUaWNrKGZsdXNoUXVldWUpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBmbHVzaFF1ZXVlKCkge1xuICAgIHF1ZXVlLmZvckVhY2gocSA9PiB7XG4gICAgICAgIHEucnVuKClcbiAgICB9KVxuICAgIFxuICAgIC8vIOmHjee9rlxuICAgIHdhaXRpbmcgPSBmYWxzZVxuICAgIGhhcyA9IHt9XG4gICAgcXVldWUubGVuZ3RoID0gMFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dFRpY2soY2IsIGN0eCkge1xuICAgIGNvbnN0IHAgPSBQcm9taXNlLnJlc29sdmUoKVxuICAgIHAudGhlbigoKSA9PiB7XG4gICAgICAgIGN0eD8gY2IuY2FsbChjdHgpIDogY2IoKVxuICAgIH0pXG59Il0sInNvdXJjZVJvb3QiOiIifQ==